<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>守望的稻草人</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangyuanjun.cn/"/>
  <updated>2018-02-08T02:14:06.329Z</updated>
  <id>http://wangyuanjun.cn/</id>
  
  <author>
    <name>WangYuanJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java虚拟机学习——Java内存区域与内存溢出异常</title>
    <link href="http://wangyuanjun.cn/2018/02/01/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/"/>
    <id>http://wangyuanjun.cn/2018/02/01/Java虚拟机学习——Java内存区域与内存溢出异常/</id>
    <published>2018-02-01T02:50:54.000Z</published>
    <updated>2018-02-08T02:14:06.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：运行时数据区域"><a href="#一：运行时数据区域" class="headerlink" title="一：运行时数据区域"></a>一：运行时数据区域</h1><p><img src="/2018/02/01/Java虚拟机学习——Java内存区域与内存溢出异常/MemoryArea.jpg" alt="MemoryArea"></p>
<h2 id="1-1-程序计数器（Program-Counter-Register）"><a href="#1-1-程序计数器（Program-Counter-Register）" class="headerlink" title="1.1 程序计数器（Program Counter Register）"></a>1.1 程序计数器（Program Counter Register）</h2><p>程序计数器（Program Counter Register），也有称作为PC寄存器。在汇编语言中，程序计数器是指CPU中的寄存器，它保存的是程序当前执行的指令的地址（也可以说保存下一条指令的所在存储单元的地址），当CPU需要执行指令时，需要从程序计数器中得到当前需要执行的指令所在存储单元的地址，然后根据得到的地址获取到指令，在得到指令之后，程序计数器便自动加1或者根据转移指针得到下一条指令的地址，如此循环，直至执行完所有的指令。<br>虽然JVM中的程序计数器并不像汇编语言中的程序计数器一样是物理概念上的CPU寄存器，但是JVM中的程序计数器的功能跟汇编语言中的程序计数器的功能在逻辑上是等同的，也就是说是用来指示 执行哪条指令的。程序计数器（ Program Counter Register）是一块较小的内存空间，<font color="red">它的作用可以看做是当前线程所执行的字节码的行号指示器。</font>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>
<p>由于在JVM中，多线程是通过线程轮流切换来获得CPU执行时间的，因此，在任一具体时刻，一个CPU的内核只会执行一条线程中的指令，因此，为了能够使得每个线程都在线程切换后能够恢复在切换之前的程序执行位置，每个线程都需要有自己独立的程序计数器，并且不能互相被干扰，否则就会影响到程序的正常执行次序,此时程序计数器需要记录当前线程执行到哪一步了，以便下一次CPU可以在这个记录点上继续执行。因此，可以这么说，<font color="red">程序计数器是每个线程所私有的。</font></p>
<p>在JVM规范中规定，如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址,如果线程执行的是native方法，则程序计数器中的值是undefined。</p>
<p>由于程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于<font color="red">程序计数器是不会发生内存溢出现象(OutOfMemory)的。</font></p>
<h2 id="1-2-java虚拟机栈"><a href="#1-2-java虚拟机栈" class="headerlink" title="1.2 java虚拟机栈"></a>1.2 java虚拟机栈</h2><p>与程序计时器一样,<font color="red">虚拟机栈也是线程私有的，</font>它的生命周期与线程相同，虚拟机中描述的是Java方法执行的内存模型，<font color="red">每个方法在执行的同时都会创建一个栈帧（Stack Frame）(Java栈中存放的是一个个的栈帧，每个栈帧对应一个被调用的方法)，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</font>每一个方法从调用直到执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈道出栈的过程。当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。因此可知，线程当前执行的方法所对应的栈帧必定位于Java栈的顶部。其中局部变量表中存放了编译器可知的各种基本数据类型、对象引用类型（不是对象本身）。</p>
<p>局部变量表，就是用来存储方法中的局部变量（包括在方法中声明的非静态变量以及函数形参）。局部变量表中存放了编译器可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用（ reference 类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和 returnAddress 类型（指向了一条字节码指令的地址）。对于基本数据类型的变量，则直接存储它的值，对于引用类型的变量，则存的是指向对象的引用。<font color="red">局部变量表所需的内存空间在编译期完成分配</font>，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期不会改变局部变量大小。</p>
<p>操作数栈，栈最典型的一个应用就是用来对表达式求值。想想一个线程执行方法的过程中，实际上就是不断执行语句的过程，而归根到底就是进行计算的过程。因此可以这么说，程序中的所有计算过程都是在借助于操作数栈来完成的以及参数的传递。</p>
<p>指向运行时常量池的引用，因为在方法执行的过程中有可能需要用到类中的常量，所以必须要有一个引用指向运行时常量。</p>
<p>方法返回地址，当一个方法执行完毕之后，要返回之前调用它的地方，因此在栈帧中必须保存一个方法返回地址。<br>由于每个线程正在执行的方法可能不同，因此每个线程都会有一个自己的Java栈，互不干扰。<br> 对于java虚拟机栈，有两种异常情况：<br><strong>1)如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常 。</strong><br><strong>2)如果虚拟机栈扩展时无法申请到足够的内存时会抛出 OutOfMemoryError 异常。</strong><br><img src="/2018/02/01/Java虚拟机学习——Java内存区域与内存溢出异常/java虚拟机栈.png" alt="java虚拟机栈"></p>
<h2 id="1-3-本地方法栈（Native-Method-Stack）"><a href="#1-3-本地方法栈（Native-Method-Stack）" class="headerlink" title="1.3 本地方法栈（Native Method Stack）"></a>1.3 本地方法栈（Native Method Stack）</h2><p><font color="red">线程私有。</font>本地方法栈与Java栈的作用和原理非常相似。区别只不过是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，<font color="red">而本地方法栈则是为虚拟机使用到的 Native方法服务</font>。有的虚拟机（譬如 Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。<br>与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutMemoryError错误。</p>
<h2 id="1-4-java堆-Java-Heap"><a href="#1-4-java堆-Java-Heap" class="headerlink" title="1.4 java堆(Java Heap)"></a>1.4 java堆(Java Heap)</h2><p>对于大多数应用来说，Java堆是Java虚拟机所管理的内存中最大的一块。<font color="red">Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</font></p>
<p><font color="red">Java 堆是垃圾收集器管理的主要区域</font>，因此很多时候也被称做“GC 堆”（Garbage Collected Heap）。如果从内存回收的角度看，由于<font color="red">现在收集器基本采用分代回收算法，所以Java堆还可细分为：新生代（Young Generation）与老生代(Old Generation)；再细致一点的有Eden空间,From Survivor空间,To Survivor空间等。</font><strong>值得注意的是，从JKD1.7开始，永久代Perm逐渐被移除，最新的JDK1.8中已经使用元空间（MetaSpace）代替永久代。</strong>如果从内存分配的角度看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区。但无论怎么去划分，无论那个区域，java堆中存储的依然是对象的实例。进一步划分的目的是为了更好地回收内存，或者更快地分配内存。<br>当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。如果堆中没有内存完成实例分配，并且对也无法再扩展时，将会抛出OutOfMemoryError异常。<br><img src="/2018/02/01/Java虚拟机学习——Java内存区域与内存溢出异常/java堆.jpg" alt="java堆"><br>如图，新生代还可以分为Eden空间、From Survivor空间、To Survivor空间。<br>永久代(Permanent Generation)用于存储静态类型数据，与垃圾收集器关系不大。<br>注意：本图展示的是JVM堆的内存模型，JVM堆内存包括Java堆区域 和 永久代区域。因此，永久代不属于Java堆。</p>
<h2 id="1-5-方法区（Method-Area）"><a href="#1-5-方法区（Method-Area）" class="headerlink" title="1.5 方法区（Method Area）"></a>1.5 方法区（Method Area）</h2><p><font color="red">方法区是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据 </font>。</p>
<p>方法区与堆一样，是各个线程共享的内存区域。在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。<br>在JVM规范中，没有强制要求方法区必须实现垃圾回收。很多人习惯将方法区称为“永久代”，是因为HotSpot虚拟机以永久代来实现方法区，从而JVM的垃圾收集器可以像管理堆区一样管理这部分区域，从而不需要专门为这部分设计垃圾回收机制。<font color="red">不过自从JDK7之后，Hotspot虚拟机便将运行时常量池从永久代移除了。<br>相对而言，垃圾收集行为在这个区域比较少出现，但并非数据进了方法区就永久的存在了，<font color="red">这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载。</font><br><strong>JDK1.7中，已经把放在永久代的字符串常量池移到堆中。JDK1.8撤销永久代，引入元空间。</strong></font></p>
<p>根据java虚拟机规范的规定：当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p>
<h2 id="1-6-运行时常量池"><a href="#1-6-运行时常量池" class="headerlink" title="1.6 运行时常量池"></a>1.6 运行时常量池</h2><p>运行时常量池是方法区的一部分，在Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用。这部分内容将<font color="red">在类加载后进入方法区的运行时常量池中存放</font>。</p>
<p><font color="red">同时运行时常量池具备动态性</font>，并非预置入Class文件中常量池的内存才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，例如String类的intern()方法(方法返回s1在常量池中的引用，没有则创建)。<br>既然运行时常量池是方法区的一部分，自然受到方法区内存限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p>
<h2 id="1-7-直接内存（Direct-Memory）"><a href="#1-7-直接内存（Direct-Memory）" class="headerlink" title="1.7 直接内存（Direct Memory）"></a>1.7 直接内存（Direct Memory）</h2><p><font color="red">直接内存（Direct memory）并不是JVM运行时数据区的一部分</font>，也不是Java虚拟机规范中定义的内存区域。但这部分内存也被频繁使用，而且它也可能导致OutOfMemoryError异常出现。</p>
<p>直接内存不是虚拟机运行时数据区的一部分，在NIO类中引入一种基于通道与缓冲区的IO方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因此避免了在java堆和Native堆中来回复制数据。</p>
<p>本机直接内存的分配不会受到Java堆大小的限制，但是，还是会受到本机总内存（包括RAM及SWAP区或者分页文件）的大小及处理器寻址空间的限制，从而导致动态扩展时出现OutOfMemoryError异常。</p>
<h1 id="二：hotspot虚拟机对象奥秘"><a href="#二：hotspot虚拟机对象奥秘" class="headerlink" title="二：hotspot虚拟机对象奥秘"></a>二：hotspot虚拟机对象奥秘</h1><h2 id="2-1-对象的创建过程"><a href="#2-1-对象的创建过程" class="headerlink" title="2.1 对象的创建过程"></a>2.1 对象的创建过程</h2><p>Java在语言层面，通过一个关键字new来创建对象。在虚拟机中，当遇到一条new指令后，将开始如下创建过程：</p>
<h3 id="2-1-1-判断类是否加载、解析、初始化"><a href="#2-1-1-判断类是否加载、解析、初始化" class="headerlink" title="2.1.1 判断类是否加载、解析、初始化"></a>2.1.1 判断类是否加载、解析、初始化</h3><p>虚拟机遇到一条new指令时，先去检查这个指定的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那先执行相应的类加载过程。</p>
<h3 id="2-1-2-为新对象分配内存"><a href="#2-1-2-为新对象分配内存" class="headerlink" title="2.1.2 为新对象分配内存"></a>2.1.2 为新对象分配内存</h3><p>前面说到，对象的内存分配是在Java堆中的，对象所需内存的大小在类加载完便可确实。为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来，此时Java堆中的情况有两种可能，一种是Java堆中内存是绝对规整的，一种是Java堆中的内存并不是规整的。因此有两种分配方式：</p>
<ol>
<li>Java堆内存是规整的，即所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，此时，分配内存仅需要把这个指针向空闲空间那边挪动一段与对象大小相等的距离，这种方式也称为“指针碰撞”（Bump the Pointer）；</li>
<li>Java堆内存不是规整的，即已使用的内存和空闲的内存相互交错，就没有办法简单地进行指针的移动，此时的分配方案是，虚拟机必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的控件划分给对象实例，并更新列表上的记录，这种方式也称为“空闲列表”（Free List）；</li>
</ol>
<p>选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。因此，对于Serial、ParNew等带Compact过程的垃圾收集器，系统采用的是指针碰撞算法；对于CMS这种基于Mark-Sweep算法的收集器，通常采用空闲列表算法。</p>
<h3 id="2-1-3-解决并发安全问题"><a href="#2-1-3-解决并发安全问题" class="headerlink" title="2.1.3 解决并发安全问题"></a>2.1.3 解决并发安全问题</h3><p>确定了如何划分内存空间之后，还有一个问题就是，对象的创建在虚拟机中是非常频繁的行为，比如，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况，解决这种并发问题，一般有两种方案：</p>
<ol>
<li>对分配内存空间的动作进行同步处理，比如，虚拟机采用CAS配上失败重试的方式保证更新操作的原子性；</li>
<li>另一种方式是，把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB），哪个线程要分配内存，就在哪个线程的TLAB上分配。只有TLAB用完并分配新的TLAB时，才需要同步锁定，虚拟机是否使用TLAB，可以通过-XX:+/-UserTLAB参数来设定。</li>
</ol>
<h3 id="2-1-4-初始化分配到的内存空间"><a href="#2-1-4-初始化分配到的内存空间" class="headerlink" title="2.1.4 初始化分配到的内存空间"></a>2.1.4 初始化分配到的内存空间</h3><p>内存分配完成后，虚拟机将分配到的内存空间都初始化为零值（不包括对象头），如果使用TLAB，这一工作也可以提前至TLAB分配时进行。也正是这一步操作，才保证了我们对象的实例字段在Java代码中可以不赋初值就直接使用。注意，此时对象的实例字段全部为零值，并没有按照程序中的初值进行初始化。</p>
<h3 id="2-1-5-设置对象实例的对象头"><a href="#2-1-5-设置对象实例的对象头" class="headerlink" title="2.1.5 设置对象实例的对象头"></a>2.1.5 设置对象实例的对象头</h3><p>上面工作完成后，虚拟机对对象进行必要的设置，主要是设置对象的对象头信息，比如，这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等…</p>
<h3 id="2-1-6-初始化对象方法"><a href="#2-1-6-初始化对象方法" class="headerlink" title="2.1.6 初始化对象方法"></a>2.1.6 初始化对象<init>方法</init></h3><p>其实，上面工作完成后，从虚拟机角度来看，一个新的对象已经产生了，但从Java程序的角度来看，对象创建才刚刚开始，对象实例中的字段仅仅都为零值，还需要通过<init>方法进行初始化，把对象按照程序员的意愿进行初始化。此时，一个真正可用的对象才算完全产生出来。</init></p>
<h2 id="2-2-对象的内存布局"><a href="#2-2-对象的内存布局" class="headerlink" title="2.2 对象的内存布局"></a>2.2 对象的内存布局</h2><p>经过前面的创建工作，一个对象已经成功产生，也已经在Java堆中分配好了内存。那这个对象在Java堆内存中到底是什么形态呢？又包括哪些部分呢？这就涉及到了对象的内存布局了。<br>不同的虚拟机实现中，对象的内存布局有差别，以最常用的HotSpot虚拟机为例，对象在内存中存储的布局分为3块区域：对象头（Header）、实例数据（Instance Data）、对齐填充（Padding）。</p>
<ul>
<li>对象头：包含两部分信息，一部分是用于存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志等；另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是一个Java数组，对象头中还有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中却无法确定数组大小。</li>
<li>实例数据：真正存储对象有效信息的部分。也就是在程序中定义的各种类型的字段内容，包括从父类继承下来的，以及子类中定义的，都会在实例数据中记录。</li>
<li>对齐填充：不是必然存在的，仅起着占位符的作用，对于HotSpot来说，虚拟机的自动内存管理系统要求对象其实地址必须是8字节的整数倍，因此，如果对象实例数据部分没有对齐时，就需要通过对齐填充的方式来补全。</li>
</ul>
<h2 id="2-3-对象的访问定位"><a href="#2-3-对象的访问定位" class="headerlink" title="2.3 对象的访问定位"></a>2.3 对象的访问定位</h2><p>建立了对象是为了使用对象，我们对数据的使用是通过栈上的reference数据来操作堆上的具体对象，对于不同的虚拟机实现，reference数据类型有不同的定义，主要是如下两种访问方式：</p>
<h3 id="2-3-1-使用句柄访问"><a href="#2-3-1-使用句柄访问" class="headerlink" title="2.3.1 使用句柄访问"></a>2.3.1 使用句柄访问</h3><p>此时，Java堆中将会划出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息，如下图：<br><img src="/2018/02/01/Java虚拟机学习——Java内存区域与内存溢出异常/句柄访问.png" alt="句柄访问"></p>
<h3 id="2-3-2-使用直接指针访问"><a href="#2-3-2-使用直接指针访问" class="headerlink" title="2.3.2 使用直接指针访问"></a>2.3.2 使用直接指针访问</h3><p>此时reference中存储的就是对象的地址。如下图：<br><img src="/2018/02/01/Java虚拟机学习——Java内存区域与内存溢出异常/直接指针访问.png" alt="直接指针访问"></p>
<p>上面所说的，所谓对象类型，其实就是指，对象所属的哪个类。</p>
<p>上面两种对象访问方式各有优势，使用句柄访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时，只会改变句柄中的实例数据指针，而reference本身不需要修改；使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销（根据上图，节省的是对象实例数据的指针定位），由于对象的访问在Java中非常频繁，因此，这类开销积少成多后也是一项非常可观的执行成本。对于HotSpot而言，选择的是第二种方式。</p>
<h1 id="三：内存溢出"><a href="#三：内存溢出" class="headerlink" title="三：内存溢出"></a>三：内存溢出</h1><p><img src="/2018/02/01/Java虚拟机学习——Java内存区域与内存溢出异常/内存溢出测试.png" alt="内存溢出测试"><br><img src="/2018/02/01/Java虚拟机学习——Java内存区域与内存溢出异常/内存区域报错.png" alt="内存区域报错"><br>OOM分为两种情况：内存溢出（Memory Overflow）和内存泄漏（Memory Leak）。</p>
<h2 id="3-1-OutOfMemoryError"><a href="#3-1-OutOfMemoryError" class="headerlink" title="3.1 OutOfMemoryError"></a>3.1 OutOfMemoryError</h2><p>是指程序在申请内存时，没有足够的空间供其使用，出现了Out Of Memory，也就是要求分配的内存超出了系统能给你的，系统不能满足需求，于是产生溢出。<br>内存溢出分为上溢和下溢，比方说栈，栈满时再做进栈必定产生空间溢出，叫上溢，栈空时再做退栈也产生空间溢出，称为下溢。</p>
<h3 id="3-1-1-java堆溢出-OutOfMemoryError：Java-heap-space"><a href="#3-1-1-java堆溢出-OutOfMemoryError：Java-heap-space" class="headerlink" title="3.1.1 java堆溢出(OutOfMemoryError：Java heap space)"></a>3.1.1 java堆溢出(OutOfMemoryError：Java heap space)</h3><p>是被所有线程共享的一块内存区域，该内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都是在这里分配创建。由于他是虚拟机中管理的最大一块内存，所以是主要的收集区域。如果还需要再堆上分配实例，但是无法扩展出足够的内存空间，将会抛出OutOfMemoryError异常。<br><strong>Java堆用于存储对象实例，我们只要不断的创建对象，而又没有及时回收这些对象（即内存泄漏），就会在对象数量达到最大堆容量限制后产生内存溢出异常。</strong><br>如下代码限制java堆的大小为1m，不可扩展（就堆的最小值-Xms参数与最大值-Xmx参数设置为一样的即可避免堆自动扩展），通过参数-XX:+HeapDumpOnOutOfMemoryError可以让虚拟机在出现内存溢出时Dump出当前的转储快照以便事后进行分析。<br>    /**</p>
<pre><code> * VM Args: -Xms1m -Xmx1m -XX:+HeapDumpOnOutOfMemoryError
 * java堆溢出
 * 
 * @author：WangYuanJun
 * @date：2018年2月7日 下午2:22:42
 */
public class HeapOOM {

    static class OOMObejct {
    }

    public static void main(String[] args) {
        List&lt;OOMObejct&gt; list = new ArrayList&lt;&gt;();

        while (true) {
            list.add(new OOMObejct());
        }
    }
}

java.lang.OutOfMemoryError: Java heap space
Dumping heap to java_pid4008.hprof ...
Heap dump file created [2760158 bytes in 0.013 secs]
Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space
    at com.example.demo.test3.HeapOOM.main(HeapOOM.java:21)
</code></pre><h3 id="3-1-2-虚拟机栈和本地方法栈溢出-OutOfMemoryError：Java-heap-space"><a href="#3-1-2-虚拟机栈和本地方法栈溢出-OutOfMemoryError：Java-heap-space" class="headerlink" title="3.1.2 虚拟机栈和本地方法栈溢出(OutOfMemoryError：Java heap space)"></a>3.1.2 虚拟机栈和本地方法栈溢出(OutOfMemoryError：Java heap space)</h3><p>虚拟机栈：每个线程有一个私有的栈，随着线程的创建而创建。栈里面存着的是一种叫“栈帧”的东西，每个方法会创建一个栈帧，栈帧中存放了局部变量表（基本数据类型和对象引用）、操作数栈、方法出口等信息。栈的大小可以固定也可以动态扩展。当栈调用深度大于JVM所允许的范围，会抛出StackOverflowError的错误，不过这个深度范围不是一个恒定的值，我们通过下面这段程序可以测试一下这个结果<br>当应用程序递归太深而发生堆栈溢出时，抛出该错误。因为栈一般默认为1-2m，一旦出现死循环或者是大量的递归调用，在不断的压栈过程中，造成栈容量超过1m而导致溢出。<br>栈溢出的原因：<br>（1）递归调用<br>（2）大量循环或死循环<br>（3）全局变量是否过多<br>（4）数组、List、Map数据过大<br><strong>1)如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常 。</strong></p>
<pre><code>/**
 * VM Args: -Xss160k
 * 
 * 
 * @author：WangYuanJun
 * @date：2018年2月7日 下午2:45:03
 */
public class JavaVMStackSOF {
    private int stackLen = 1;

    public void stackLeak() {
        stackLen++;
        stackLeak();
    }

    public static void main(String[] args) throws Throwable {
        JavaVMStackSOF oom = new JavaVMStackSOF();
        try {
            oom.stackLeak();
        } catch (Throwable e) {
            System.out.println(&quot;stack length:&quot; + oom.stackLen);
            throw e;
        }
    }
}

stack length:771Exception in thread &quot;main&quot; 
java.lang.StackOverflowError
    at com.wdm.mem.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)
    at com.wdm.mem.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)
    at com.wdm.mem.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)
    at com.wdm.mem.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)
</code></pre><p><strong>2)如果虚拟机栈扩展时无法申请到足够的内存时会抛出 OutOfMemoryError 异常。</strong></p>
<pre><code> /**
 * VM Args: -Xss2m
 * 
 * 
 * @author：WangYuanJun
 * @date：2018年2月7日 下午3:04:59
 */
public class JavaVMStackOOM {

    private void dontStop() {
        while (true) {

        }
    }

    public void stackLeakByThread() {
        while (true) {
            Thread thread = new Thread(new Runnable() {

                @Override
                public void run() {
                    dontStop();
                }
            });
            thread.start();
        }

    }

    public static void main(String[] args) {
        JavaVMStackOOM javaVMStackOOM = new JavaVMStackOOM();
        javaVMStackOOM.stackLeakByThread();
    }
}

Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: unable to create new native thread
</code></pre><h3 id="3-1-3-方法区和运行常量池溢出"><a href="#3-1-3-方法区和运行常量池溢出" class="headerlink" title="3.1.3 方法区和运行常量池溢出"></a>3.1.3 方法区和运行常量池溢出</h3><p>1.方法区溢出<br>绝大部分 Java 程序员应该都见过 “java.lang.OutOfMemoryError: PermGen space “这个异常。这里的 “PermGen space”其实指的就是方法区。不过方法区和“PermGen space”又有着本质的区别。前者是 JVM 的规范，而后者则是 JVM 规范的一种实现，并且只有 HotSpot 才有 “PermGen space”，而对于其他类型的虚拟机，如 JRockit（Oracle）、J9（IBM） 并没有“PermGen space”。由于方法区主要存储类的相关信息，所以对于动态生成类的情况比较容易出现永久代的内存溢出。最典型的场景就是，在 jsp 页面比较多的情况，容易出现永久代内存溢出。我们现在通过动态生成类来模拟 “PermGen space”的内存溢出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> /**</div><div class="line">  * jdk1.7</div><div class="line">  * VM Args: -XX:PermSize=8M -XX:MaxPermSize=8M</div><div class="line">  *</div><div class="line">  * @author：WangYuanJun</div><div class="line">  * @date：2018年2月2日 下午1:42:48</div><div class="line">  */</div><div class="line">public class PermGenOomMock&#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        URL url = null;</div><div class="line">        List&lt;ClassLoader&gt; classLoaderList = new ArrayList&lt;ClassLoader&gt;();</div><div class="line">        try &#123;</div><div class="line">            url = new File(&quot;/tmp&quot;).toURI().toURL();</div><div class="line">            URL[] urls = &#123;url&#125;;</div><div class="line">            while (true)&#123;</div><div class="line">                ClassLoader loader = new URLClassLoader(urls);</div><div class="line">                classLoaderList.add(loader);</div><div class="line">                loader.loadClass(&quot;com.example.demo.test2.test&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: PermGen space</div></pre></td></tr></table></figure></p>
<p>本例中使用的 JDK 版本是 1.7，指定的 PermGen 区的大小为 8M。通过每次生成不同URLClassLoader对象来加载Test类，从而生成不同的类对象，这样就能看到我们熟悉的 “java.lang.OutOfMemoryError: PermGen space “ 异常了。这里之所以采用 JDK 1.7，是因为在 JDK 1.8 中， HotSpot 已经没有 “PermGen space”这个区间了，取而代之是一个叫做 Metaspace（元空间） 的东西。下面我们就来看看 Metaspace 与 PermGen space 的区别。可参考<a href="http://www.cnblogs.com/paddix/p/5309550.html" target="_blank" rel="external">Java8内存模型—永久代(PermGen)和元空间(Metaspace)</a></p>
<p>2.运行常量池溢出 </p>
<p>其实，移除永久代的工作从JDK1.7就开始了。JDK1.7中，存储在永久代的部分数据就已经转移到了Java Heap或者是 Native Heap。但永久代仍存在于JDK1.7中，并没完全移除，譬如符号引用(Symbols)转移到了native heap；字面量(interned strings)转移到了java heap；类的静态变量(class statics)转移到了java heap。我们可以通过一段程序来比较 JDK 1.6 与 JDK 1.7及 JDK 1.8 的区别，以字符串常量为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">运行常量池溢出(jdk1.6及jdk1.6之前)</div><div class="line">/**</div><div class="line"> * VM Args: -XX:PermSize=10M -XX:MaxPermSize=10M -Xmx16m</div><div class="line"> * 使用jdk1.6及jdk1.6之前</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年2月2日 下午2:10:12</div><div class="line"> */</div><div class="line">public class RuntimeConsPoolOOM &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line">        int i = 0;</div><div class="line">        while (true) &#123;</div><div class="line">            list.add(String.valueOf(i++).intern());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError： PermGen space</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * VM Args: -XX:PermSize=10M -XX:MaxPermSize=10M -Xmx16m</div><div class="line"> * 使用jdk1.7</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年2月2日 下午2:10:12</div><div class="line"> */</div><div class="line">public class RuntimeConsPoolOOM &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line">        int i = 0;</div><div class="line">        while (true) &#123;</div><div class="line">            list.add(String.valueOf(i++).intern());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError： Java heap space</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * VM Args: -Xmx16m</div><div class="line"> * 使用jdk1.8</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年2月2日 下午2:10:12</div><div class="line"> */</div><div class="line">public class RuntimeConsPoolOOM &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line">        int i = 0;</div><div class="line">        while (true) &#123;</div><div class="line">            list.add(String.valueOf(i++).intern());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError： Java heap space</div></pre></td></tr></table></figure>
<p>　　从上述结果可以看出，JDK 1.6下，会出现“PermGen Space”的内存溢出，而在 JDK 1.7和 JDK 1.8 中，会出现堆内存溢出，并且 JDK 1.8中 PermSize 和 MaxPermGen 已经无效。因此，可以大致验证 JDK 1.7 和 1.8 将字符串常量由永久代转移到堆中，并且 JDK 1.8 中已经不存在永久代的结论。现在我们看看元空间到底是一个什么东西？</p>
<p>　　元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制，但可以通过以下参数来指定元空间的大小：</p>
<p>　　-XX:MetaspaceSize，初始空间大小，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize时，适当提高该值。<br>　　-XX:MaxMetaspaceSize，最大空间，默认是没有限制的。</p>
<p>　　除了上面两个指定大小的选项以外，还有两个与 GC 相关的属性：<br>　　-XX:MinMetaspaceFreeRatio，在GC之后，最小的Metaspace剩余空间容量的百分比，减少为分配空间所导致的垃圾收集<br>　　-XX:MaxMetaspaceFreeRatio，在GC之后，最大的Metaspace剩余空间容量的百分比，减少为释放空间所导致的垃圾收集</p>
<p>现在我们在 JDK 8下重新运行一下代码段 ，不过这次不再指定 PermSize 和 MaxPermSize。而是指定 MetaSpaceSize 和 MaxMetaSpaceSize的大小。输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> /**</div><div class="line">  * jdk1.8</div><div class="line">  * -XX:MetaspaceSize=8m -XX:MaxMetaspaceSize=8m</div><div class="line">  * 1.8无PermGen space，取而代之是一个叫做 Metaspace（元空间）</div><div class="line">  * Metaspace（元空间）内存溢出</div><div class="line">  * 解决：增大perm区，允许class回收 </div><div class="line">  * </div><div class="line">  * @author：WangYuanJun</div><div class="line">  * @date：2018年2月2日 下午1:42:48</div><div class="line">  */</div><div class="line">public class PermGenOomMock&#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        URL url = null;</div><div class="line">        List&lt;ClassLoader&gt; classLoaderList = new ArrayList&lt;ClassLoader&gt;();</div><div class="line">        try &#123;</div><div class="line">            url = new File(&quot;/tmp&quot;).toURI().toURL();</div><div class="line">            URL[] urls = &#123;url&#125;;</div><div class="line">            while (true)&#123;</div><div class="line">                ClassLoader loader = new URLClassLoader(urls);</div><div class="line">                classLoaderList.add(loader);</div><div class="line">                loader.loadClass(&quot;com.example.demo.test2.test&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError： Metaspace</div></pre></td></tr></table></figure></p>
<h3 id="3-1-4-本机直接内存溢出"><a href="#3-1-4-本机直接内存溢出" class="headerlink" title="3.1.4 本机直接内存溢出"></a>3.1.4 本机直接内存溢出</h3><p>通过参数-XX:MaxDirectMemorySize指定DirectMemory容量，若不指定则与Java堆最大值一样。可以直接通过反射获取Unsafe实例并进行内存分配，使用unsafe.allocateMemory()申请分配内存。不足时会出现OutOfMemoryError。</p>
<h2 id="3-2-内存泄露（memory-leak）"><a href="#3-2-内存泄露（memory-leak）" class="headerlink" title="3.2 内存泄露（memory leak）"></a>3.2 内存泄露（memory leak）</h2><p>是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光，举个例子，就是说系统的篮子（内存）是有限的，而你申请了一个篮子，拿到之后没有归还（忘记还了或是丢了），于是造成一次内存泄漏。在你需要用篮子的时候，又去申请，如此反复，最终系统的篮子无法满足你的需求，最终会由内存泄漏造成内存溢出。</p>
<h1 id="四：总结"><a href="#四：总结" class="headerlink" title="四：总结"></a>四：总结</h1><h2 id="4-1-内存区域模型小结："><a href="#4-1-内存区域模型小结：" class="headerlink" title="4.1 内存区域模型小结："></a>4.1 内存区域模型小结：</h2><pre><code>（1）线程私有的区域：程序计数器、虚拟机栈、本地方法栈；
（2）所有线程共享的区域：Java堆、方法区；（注：直接内存不属于虚拟机内存模型的部分）
（3）没有异常的区域：程序计数器；
（4）StackOverflowError异常：Java虚拟机栈、本地方法栈；
（5）OutOfMemoryError异常：除程序计数器外的其他四个区域，Java虚拟机栈、本地方法栈、Java堆、方法区；直接内存也会出现OutOfMemoryError。
</code></pre><h2 id="4-2-类和对象在运行时的内存里是怎么样的？以及各类型变量、方法在运行时是怎么交互的？"><a href="#4-2-类和对象在运行时的内存里是怎么样的？以及各类型变量、方法在运行时是怎么交互的？" class="headerlink" title="4.2 类和对象在运行时的内存里是怎么样的？以及各类型变量、方法在运行时是怎么交互的？"></a>4.2 类和对象在运行时的内存里是怎么样的？以及各类型变量、方法在运行时是怎么交互的？</h2><pre><code>- 在程序运行时类是在方法区，实例对象本身在堆里面。
- 方法字节码在方法区。
- 线程调用方法执行时创建栈帧并压栈，方法的参数和局部变量在栈帧的局部变量表。
- 对象的实例变量和对象一起在堆里，所以各个线程都可以共享访问对象的实例变量。
- 静态变量在方法区，所有对象共享。字符串常量等常量在运行时常量池。
- 各线程调用的方法，通过堆内的对象，方法区的静态数据，可以共享交互信息。
</code></pre><p>对于JVM的内存管理， 最重要的还是与OS内存管理知识进行类比以及结合实践来学习。理解JVM内存区域的目的也是为了在工程中出现内存相关异常时能够准确的定位所在区域，及时处理。</p>
<p>参考:<br>周志明:《深入理解Java虚拟机：JVM高级特性与最佳实践》<br><!-- [http://blog.csdn.net/qq_36859415/article/details/53407439](http://blog.csdn.net/qq_36859415/article/details/53407439)
[https://www.cnblogs.com/ACFLOOD/p/5608292.html](https://www.cnblogs.com/ACFLOOD/p/5608292.html)
[http://www.cnblogs.com/paddix/p/5309550.html](http://www.cnblogs.com/paddix/p/5309550.html)
[https://www.cnblogs.com/hawk-whu/p/6731260.html](https://www.cnblogs.com/hawk-whu/p/6731260.html)
[http://blog.csdn.net/jiyiqinlovexx/article/details/51171452](http://blog.csdn.net/jiyiqinlovexx/article/details/51171452)
[http://blog.csdn.net/u011080472/article/details/51320300](http://blog.csdn.net/u011080472/article/details/51320300) --></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：运行时数据区域&quot;&gt;&lt;a href=&quot;#一：运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;一：运行时数据区域&quot;&gt;&lt;/a&gt;一：运行时数据区域&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/02/01/Java虚拟机学习——Java内存区域与
    
    </summary>
    
      <category term="JVM" scheme="http://wangyuanjun.cn/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://wangyuanjun.cn/tags/JVM/"/>
    
      <category term="java虚拟机" scheme="http://wangyuanjun.cn/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 2017.3激活</title>
    <link href="http://wangyuanjun.cn/2018/01/31/IntelliJ-IDEA-2017-3%E6%BF%80%E6%B4%BB/"/>
    <id>http://wangyuanjun.cn/2018/01/31/IntelliJ-IDEA-2017-3激活/</id>
    <published>2018-01-31T15:42:34.000Z</published>
    <updated>2018-02-01T13:21:04.866Z</updated>
    
    <content type="html"><![CDATA[<p>最新的IDEA激活方式，博主使用的是3.4的版本</p>
<h1 id="方法一：使用激活服务器激活方法-博主使用此方法"><a href="#方法一：使用激活服务器激活方法-博主使用此方法" class="headerlink" title="方法一：使用激活服务器激活方法(博主使用此方法)"></a>方法一：使用激活服务器激活方法(博主使用此方法)</h1><p>由于JetBrains封杀，大部分激活服务器已经不能使用，目前可用的网址有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://idea.java.sx</div></pre></td></tr></table></figure>
<p><img src="/2018/01/31/IntelliJ-IDEA-2017-3激活/1.png" alt="1"></p>
<p>步骤<br>1、打开注册/激活窗口；</p>
<p>2、选择 License server；</p>
<p>3、填入上述其中一个网址；</p>
<p>4、点击Activate即可完美激活!</p>
<h1 id="方法二：注册码激活方法"><a href="#方法二：注册码激活方法" class="headerlink" title="方法二：注册码激活方法"></a>方法二：注册码激活方法</h1><p>1、进入hosts文件中：C:\Windows\System32\drivers\etc\hosts<br><img src="/2018/01/31/IntelliJ-IDEA-2017-3激活/2.png" alt="2"><br>2、将“0.0.0.0 account.jetbrains.com”添加到hosts文件中<br>注意：添加只有重新打开hosts文件进行确认之后在进行下一步操作。<br>修改成功后如图所示：<br><img src="/2018/01/31/IntelliJ-IDEA-2017-3激活/3.png" alt="3"><br>注：将这条数据加入之后会提示保存，然后确认之后，重新打开hosts文件确认是否添加成功，有时候会提示确认两次。<br>3、点击获得注册码，<a href="http://idea.lanyus.com/" target="_blank" rel="external">点我</a>，然后将注册码复制，粘贴到IDEA中<br><img src="/2018/01/31/IntelliJ-IDEA-2017-3激活/4.png" alt="4"><br>4、点击获得注册码即可获得IDEA激活码。<br><img src="/2018/01/31/IntelliJ-IDEA-2017-3激活/5.png" alt="5"></p>
<h1 id="方法三：本地搭建激活服务器激活方法"><a href="#方法三：本地搭建激活服务器激活方法" class="headerlink" title="方法三：本地搭建激活服务器激活方法"></a>方法三：本地搭建激活服务器激活方法</h1><p>1、下载IDEA本地服务器，<a href="https://pan.baidu.com/s/1qZAnpF2" target="_blank" rel="external">点我下载(密码jx0m)</a></p>
<p>2、解压到本地硬盘任意位置，运行相应程序，32位操作系统请双击运行32位程序，64位操作系统请双击运行64位程序，如下图：<br><img src="/2018/01/31/IntelliJ-IDEA-2017-3激活/6.png" alt="6"><br>3、运行结果如图：<br><img src="/2018/01/31/IntelliJ-IDEA-2017-3激活/7.png" alt="7"><br>4、打开IDEA，在激活框内输入上图标示的网址即可。</p>
<p>注：在新版本IDEA2017.3中可能会出现无法激活的情况，此时将网址改为<a href="http://0.0.0.0:1017即可。" target="_blank" rel="external">http://0.0.0.0:1017即可。</a></p>
<h1 id="方法四：破解补丁激活方法"><a href="#方法四：破解补丁激活方法" class="headerlink" title="方法四：破解补丁激活方法"></a>方法四：破解补丁激活方法</h1><p>（1）破解补丁下载<br><a href="https://pan.baidu.com/s/1pM6l95h" target="_blank" rel="external">点我下载(密码jilt)</a><br>将下载的破解补丁放在你的安装IDEA下面的bin的目录下面（如图），本文示例为E:\develop-tools\toolsInstall\idea\IntelliJ IDEA 2017.3.4\bin<br><img src="/2018/01/31/IntelliJ-IDEA-2017-3激活/8.png" alt="8"><br>（2）修改配置文件</p>
<p>在安装的IDEA下面的bin目录下面有2个文件 ： idea.exe.vmoptions和idea64.exe.vmoptions。<br><img src="/2018/01/31/IntelliJ-IDEA-2017-3激活/10.png" alt="10"><br>用记事本打开，在上述两个文件的最后一行均加上下面这段代码（红色字体部分为你的IDEA安装目录）：</p>
<p>-javaagent:E:\develop-tools\toolsInstall\idea\IntelliJ IDEA 2017.3.4\bin\JetbrainsCrack-2.6.10-release-enc.jar</p>
<p>（3）输入激活码</p>
<p>启动IDEA，第一次进入会提示激活，选择Activation Code，并输入如下激活码：</p>
<pre><code>BIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==
</code></pre><p>（4）软件启动，进入Help，选择About，页面显示December 31，2099到期，完成激活。如下图：<br><img src="/2018/01/31/IntelliJ-IDEA-2017-3激活/9.png" alt="9"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最新的IDEA激活方式，博主使用的是3.4的版本&lt;/p&gt;
&lt;h1 id=&quot;方法一：使用激活服务器激活方法-博主使用此方法&quot;&gt;&lt;a href=&quot;#方法一：使用激活服务器激活方法-博主使用此方法&quot; class=&quot;headerlink&quot; title=&quot;方法一：使用激活服务器激活方
    
    </summary>
    
      <category term="IDEA" scheme="http://wangyuanjun.cn/categories/IDEA/"/>
    
    
      <category term="工具" scheme="http://wangyuanjun.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="IDEA" scheme="http://wangyuanjun.cn/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机学习——类加载机制</title>
    <link href="http://wangyuanjun.cn/2018/01/31/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://wangyuanjun.cn/2018/01/31/Java虚拟机学习——类加载机制/</id>
    <published>2018-01-31T09:28:16.000Z</published>
    <updated>2018-02-08T06:13:17.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：类加载机制概述"><a href="#一：类加载机制概述" class="headerlink" title="一：类加载机制概述"></a>一：类加载机制概述</h1><p><strong>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</strong><br>在java中，<font color="red">类型的加载、连接和初始化过程都是在程序运行期间完成的</font>，这种策略虽然会带来一些性能开销，但是却为java应用程序提供了高度的灵活性，java动态扩展的语言特性就是依赖运行期动态加载和动态链接这个特点形成的，所谓java动态扩展，比如，如果编写了一个面向接口的应用程序，可以等到运行时再指定其实际的实现类。</p>
<h1 id="二：类加载时机"><a href="#二：类加载时机" class="headerlink" title="二：类加载时机"></a>二：类加载时机</h1><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，整个生命周期包括：加载、验证、准备、解析、初始化、使用、卸载，共七个阶段。其中，验证、准备、解析3个阶段称为连接（Linking），7个过程发生顺序如下：<br><img src="/2018/01/31/Java虚拟机学习——类加载机制/类加载过程.png" alt="类加载过程"><br>上面这七个过程，除了解析这个过程外，其余过程必须按部就班地执行，即顺序是确定的，而解析过程不一定，在某些情况下可以在初始化阶段之后再执行，这是为了支持java语言的运行时绑定（也称为动态绑定或晚期绑定）。</p>
<p>java虚拟机规范中，并没有规定类加载过程中的第一个阶段（即加载阶段）的执行时机，但是对于初始化阶段，虚拟机规范中严格规定了<font color="red">“有且只有”下面5种情况下必须立即对类进行初始化</font>（而这时，加载、验证、准备自然需要在此之前开始）：<br>（1）遇到new、getstatic、putstatic、invokestatic这四条指令时，必须触发其初始化。这四条指令最常见的场景是：使用new关键字实例化对象、读取或设置一个类的静态字段（被final修饰、已经在编译期把结果放入常量池的静态字段除外，即常量除外）、调用一个类的静态方法的时候；<br>（2）进行反射调用的时候；<br>（3）初始化一个类的时候，如果其父类还没有初始化，则需要先触发其父类的初始化；<br>（4）当虚拟机启动时，需要先初始化那个包含main方法的要执行的主类；<br>（5）当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic 、REF_putStatic、REF_invokeStatic的方法句柄，句柄对应的类会被初始化；</p>
<p>上面五种场景触发类进行初始化的行为称为对一个类进行“主动引用”，除此之外，所有其他引用类的方式都不会触发初始化步骤（注意，此时已经是引用了，只不过不会触发初始化，其他阶段是否触发要看具体虚拟机的实现），这些引用称为“被动引用”。<br><strong>被动引用的几个例子</strong>：<br>（1）对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。至于是否要出发子类的加载、验证需要看具体虚拟机实现；如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class SuperClass&#123;  </div><div class="line">    static&#123;  </div><div class="line">        System.out.println(&quot;SuperClass init!&quot;);  </div><div class="line">    &#125;  </div><div class="line">    public static int value = 123;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">class SubClass extends SuperClass&#123;  </div><div class="line">    static&#123;  </div><div class="line">        System.out.println(&quot;SubClass init!&quot;);//子类中引用父类的静态字段，不会导致类初始化  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">public class Test &#123;  </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        System.out.println(SubClass.value);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SuperClass init!</div><div class="line">123</div></pre></td></tr></table></figure></p>
<p>可以看到，只会打印出父类的初始化语句。</p>
<p>（2）通过数组定义来引用类，不会触发此类的初始化。如 A[] ints = new A[10] ，  不会触发A 类的初始化。而是会触发名为 LA的类初始化。它是一个由虚拟机自动生成的、直接继承于Object 的子类，创建动作由字节码指令 newarray 触发。这个类代表了一个元素类型为 A 的一位数组，数组中的属性和方法都实现在这个类中。Java 语言中数组的访问比C/C++ 安全是因为这个类封装了数组元素的访问方法。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SuperClass[] sca = new SuperClass[10];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SuperClass类为上面的那个，运行后发现并没有打印出SuperClass init!，说明没有触发SuperClass类的初始化阶段。</p>
<p>（3）常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class ConstClass&#123;  </div><div class="line">    static&#123;  </div><div class="line">        System.out.println(&quot;ConstClass init!&quot;);  </div><div class="line">    &#125;  </div><div class="line">    public static final String HELLOWORLD = &quot;hello world&quot;;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">public class Test &#123;  </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        System.out.println(ConstClass.HELLOWORLD);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello world</div></pre></td></tr></table></figure></p>
<p>只是输出了hello world，并没有输出ConstClass init!，可见ConstClass类并没有被初始化。</p>
<p>注意：<br>上面讲的三个例子是被动引用的情况，很多情况下我们会通过new来初始化一个类，这个情形它属于上面提到的5种主动引用的场景，因此会触发这个类的初始化，如果这个类有父类的话，会先触发父类的初始化。注意不要和上面的被动引用搞混了。</p>
<p>接口的初始化<br>上面代码中用static语句块进行初始化，而结构中不能使用static语句块，但是编译器仍然回味接口生成&lt;clinit&gt;()类构造器来初始化接口中的成员变量（常量）；接口与类初始化的区别主要是在上面五种主动引用中的第三种：当一个类在初始化时，要求其父类全部已经初始化过了，但是对于接口的初始化来说，并不要求其父接口全部都完成了初始化，只有在真正使用到付接口的时候（如引用接口中定义的常量）才会初始化。</p>
<h1 id="三：类加载过程"><a href="#三：类加载过程" class="headerlink" title="三：类加载过程"></a>三：类加载过程</h1><h2 id="3-1-加载"><a href="#3-1-加载" class="headerlink" title="3.1 加载"></a>3.1 加载</h2><p>在加载阶段，需要完成三件事情：<br>（1）通过一个类的全限定名来获取其定义的二进制字节流。(<font color="red">获取.class文件的二进制流</font>)</p>
<p>（2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。(<font color="red">将类信息、静态变量、字节码、常量这些.class文件中的内容放入方法区中</font>)</p>
<p>（3）在内存中生成一个代表这个类的java.lang.Class对象（并没有明确规定是在java堆中，对于HotSpot虚拟机来说，Class对象比较特殊，它虽然是对象，但是存放在方法区里面），作为对方法区中这些数据的访问入口。(<font color="red">在内存中生成一个代表这个.class文件的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。一般这个Class是在堆里的，不过HotSpot虚拟机比较特殊，这个Class对象是放在方法区中的</font>)</p>
<p>对于（1），并没有指明二进制字节流的获取途径，也即不一定都是从一个Class文件中获取，还可以从如下方式获取：</p>
<p>1）从压缩包中获取，比如 JAR包、EAR、WAR包等<br>2）从网络中获取，比如红极一时的Applet技术<br>3）从运行过程中动态生成，最出名的便是动态代理技术，在java.lang.reflect.Proxy 中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为“$Proxy”的代理类的二进制流<br>4）从其它文件生成，如JSP文件生成Class 类<br>5）从数据库中读取，比如说有些中间件服务器，通过数据库完成程序代码在集群之间的分发</p>
<p>相对于类加载过程的其他阶段，加载这一步骤是开发人员可控的，即可以通过自定义类加载器来控制加载过程。</p>
<p>对于数组来说，数组类本身不通过类加载器创建，它是由Java虚拟机直接创建的，但是数组的元素类型，最终是要靠类加载器去创建。</p>
<h2 id="3-2-验证"><a href="#3-2-验证" class="headerlink" title="3.2 验证"></a>3.2 验证</h2><p>验证阶段的目的是<font color="red">为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</font><br>Java语言本身是相对安全的，因为使用纯粹的java代码无法做到诸如访问数组边界意外的数据、讲一个对象转型为它并未实现的类型、跳转到不存在的代码行之类的事情，如果我们这样做了，那编译器将拒绝编译，也就保证了安全。但是前面说过，Class文件并不一定要用Java源码编译而来，它还可以从很多途径产生，在字节码层面，其他方式可能能做到java代码无法做到的事情，因此虚拟机需要对加载尽量的字节流进行验证。验证过程分为四步：<br>（1）文件格式验证<br>这一阶段是要<font color="red">验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。</font>包括以下这些验证点：</p>
<ul>
<li>是否以魔数0xCAFEBABE开头</li>
<li>主、次版本号是否在当前虚拟机处理范围之内</li>
<li>常量池的常量中是否有不被支持的常量类型（检查常量tag标志）</li>
<li>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量</li>
<li>CONSTANT_Utf8_info 型的常量中是否有不符合UTF8 编码的数据</li>
<li>Class 文件中各个部分以及文件本身是否有被删除的或被附加的其它信息<br>…</li>
</ul>
<p>这一阶段验证的目的是<font color="red">保证输入的字节流能正确的解析并存储到方法区中，这阶段是基于二进制字节流进行的</font>，通过验证后，字节流才会进入到内存的方法区中进行存储。因此，后面的3个验证阶段是基于方法区的存储结构进行分析的，不会再直接操作字节流了。</p>
<p>（2）元数据验证<br>对字节码描述的信息进行语义分析，以<font color="red">保证其描述的信息符合Java语言规范的要求</font>，主要是验证类的继承关系、数据类型是否符合，验证点包括：</p>
<ul>
<li>这个类是否有父类（除Object类外，其他所有类都应当有父类）</li>
<li>这个类的父类是否继承了不允许被继承的类（final 修饰的类）</li>
<li>这个类如果不是抽象类，是否实现了其父类或接口之中要求实现的所有方法</li>
<li>类中的字段、方法是否和父类产生矛盾（如覆盖了父类final 字段，出现了非法的方法重载，如方法参数一致，但返回类型却不同）</li>
</ul>
<p>（3）字节码验证<br>最复杂的一个阶段，主要目的是<font color="red">通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的</font>。在元数据验证阶段对数据类型做完校验后，这个阶段将对类的方法体进行校验分析，以保证被校验类的方法在运行时不会做出危害虚拟机安全的事件，有如下一些验证点：</p>
<ul>
<li>保证任何时候，操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似这样的情况：在操作栈放入了一个int类型数据，使用时却按 long 类型加载到本地变量表中</li>
<li>保证跳转指令不会跳转到方法体外的字节码指令上</li>
<li>保证方法体中类型转换是有效的</li>
</ul>
<p>（4）符号引用验证<br>这一阶段发生在虚拟机将符号引用转化为直接引用的时候，而这个转化动作发生在解析阶段，符号引用可以看做是<font color="red">对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验</font>，验证点如下：</p>
<ul>
<li>符号引用中通过字符串描述的全限定名是否能找到相应的类</li>
<li>在指定类中对否存在符合方法的字段描述符以及简单名称所描述的方法和字段</li>
<li>符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可被当前类访问<br>这一阶段验证的目的是确保解析动作能正常执行。</li>
</ul>
<p>对于虚拟机来说，验证阶段是一个非常重要的，但不是一定必要（因为对程序运行期没有影响）的的阶段。</p>
<h2 id="3-3-准备"><a href="#3-3-准备" class="headerlink" title="3.3 准备"></a>3.3 准备</h2><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。有两点需要注意：<br>（1）这阶段进行内存分配的仅包括类变量（即被static修饰的变量），不包括实例变量，实例变量会在对象实例化时随着对象一起分配在Java堆中；<br>（2）这里所说的初始值“通常情况”下是数据类型的零值，假设一个类变量的定义如下：<br>    public static int value = 123;<br>那变量value在准备阶段过后的零值为0而不是123，因为这时候并未执行任何Java方法，把value赋值为123的动作是在初始化阶段才会进行。对于“非通常情况”，是指定义为常量的那些变量（即final修饰的），会在这一阶段就被赋值，如：<br>    public static final int value = 123;<br>此时在准备阶段过后，value的值将会被赋值为123。</p>
<h2 id="3-4-解析"><a href="#3-4-解析" class="headerlink" title="3.4 解析"></a>3.4 解析</h2><p>解析阶段是<font color="red">虚拟机将常量池中的符号引用转化为直接引用的过程。</font></p>
<ul>
<li>符号引用（Symbolic References）：即用一组符号来描述所引用的目标。它与虚拟机的内存布局无关，引用的目标不一定已经加载到内存中。</li>
<li>直接引用（Direct References）：直接引用可以是指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。它是和虚拟机内存布局相关的，如果有了直接引用，那引用的目标必定已经在内存中存在了。<br>解析动作主要针对 类或接口、字段、类方法、接口方法、方法类型、方法句柄 和 调用限定符 7类符号引用进行。<br>（1）类或接口的解析<br>判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。<br>（2）字段解析<br>在对字段进行解析前，会先查看该字段所属的类或接口的符号引用是否已经解析过，没有就先对字段所属的接口或类进行解析。在对字段进行解析的时候，先查找本类或接口中是否有该字段，有就直接返回；否则，再对实现的接口进行遍历，会按照继承关系从下往上递归（也就是说，每个父接口都会走一遍）搜索各个接口和它的父接口，返回最近一个接口的直接引用；再对继承的父类进行遍历，会按照继承关系从下往上递归（也就是说，每个父类都会走一遍）搜索各个父类，返回最近一个父类的直接引用。<br>（3）类方法解析<br>和字段解析搜索步骤差不多，只不过是先搜索父类，再搜索接口。<br>（4）接口方法解析<br>和类方法解析差不多，只不过接口中不会有父类，因此只需要对父接口进行搜索即可。</li>
</ul>
<h2 id="3-5-初始化"><a href="#3-5-初始化" class="headerlink" title="3.5 初始化"></a>3.5 初始化</h2><p>初始化是类加载过程的最后一步，此阶段才开始真正执行类中定义的Java程序代码（或者说字节码，也仅限与执行&lt;clinit&gt;()方法）。在准备阶段，我们已经给变量付过一次系统要求的初始值（零值），而<font color="red">在初始化阶段，则会根据程序员的意愿给类变量和其他资源赋值。</font>主要是通过&lt;clinit&gt;()方法来执行的：<br> （1）&lt;clinit&gt;()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句中可以赋值，但是不能访问。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;  </div><div class="line">    static&#123;  </div><div class="line">        i = 0;//可以给变量赋值，编译通过  </div><div class="line">        System.out.println(i);//编译不通过！！不能进行访问后面的静态变量  </div><div class="line">    &#125;  </div><div class="line">    static int i =1;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有点与我们平常的认知相反，这里是可以下赋值，却不能访问…</p>
<p> （2）&lt;clinit&gt;()方法与实例构造器&lt;init&gt;()方法（类的构造函数）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的&lt;clinit&gt;()方法执行之前，父类的&lt;clinit&gt;()方法已经执行完毕。因此，在虚拟机中第一个被执行的&lt;clinit&gt;()方法的类肯定是java.lang.Object。</p>
<p> （3）&lt;clinit&gt;()方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成&lt;clinit&gt;()方法。</p>
<p> （4）接口中不能使用静态语句块，但仍然有类变量（final static）初始化的赋值操作，因此接口与类一样会生成&lt;clinit&gt;()方法。但是接口与类不同的是：执行接口的&lt;clinit&gt;()方法不需要先执行父接口的&lt;clinit&gt;()方法，只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的&lt;clinit&gt;()方法。</p>
<p> （5）虚拟机会保证一个类的&lt;clinit&gt;()方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的&lt;clinit&gt;()方法，其他线程都需要阻塞等待，直到活动线程执行&lt;clinit&gt;()方法完毕。如果在一个类的&lt;clinit&gt;()方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。</p>
<h1 id="四：类加载器"><a href="#四：类加载器" class="headerlink" title="四：类加载器"></a>四：类加载器</h1><p>前面说过，在类加载过程的第一个阶段：加载阶段，除了可以使用系统提供的引导类加载器外，还可以使用用户自定义的类加载器，以便让用户决定如何去获取所需要的类（是从Class文件中？还是从jar、或者其他方式…可以自由决定）。</p>
<h2 id="4-1-类和类加载器"><a href="#4-1-类和类加载器" class="headerlink" title="4.1 类和类加载器"></a>4.1 类和类加载器</h2><p>任意一个类，都需要由加载它的类加载器和这个类本身共同确定其在Java 虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达的更通俗一些：<font color="red">比较两个类是否相等，只有在这两个类是同一个类加载器加载的前提下才意义。</font>否则，即使这两个类来自同一个Class文件，被同一个虚拟机加载，但只要加载他们的类加载器不同，那这两个类就必定不相等。</p>
<p>这里的“相等”，包括代表类的 Class 对象的equals() 方法、isAssignableFrom() 方法、isInstance() 方法的返回结果，也包括 instanceof 关键字对对象所属关系判定等情况。下面代码演示了不同类加载器对 instanceof 关键字运算的结果的影响。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class ClassLoaderTest &#123;    </div><div class="line">    public static void main(String[] args) throws Exception &#123;    </div><div class="line">        ClassLoader myLoader = new ClassLoader() &#123;    </div><div class="line">            @Override    </div><div class="line">            public Class&lt;?&gt; loadClass(String name)    </div><div class="line">                    throws ClassNotFoundException &#123;    </div><div class="line">                try &#123;    </div><div class="line">                    String fileName = name.substring(name.lastIndexOf(&quot;.&quot;) + 1)    </div><div class="line">                            + &quot;.class&quot;;    </div><div class="line">                    InputStream is = getClass().getResourceAsStream(fileName);    </div><div class="line">                    if (is == null) &#123;    </div><div class="line">                        return super.loadClass(name);    </div><div class="line">                    &#125;    </div><div class="line">                    byte[] b = new byte[is.available()];    </div><div class="line">                    is.read(b);    </div><div class="line">                    return defineClass(name, b, 0, b.length);    </div><div class="line">                &#125; catch (IOException e) &#123;    </div><div class="line">                    throw new ClassNotFoundException(name);    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">        &#125;;    </div><div class="line">  </div><div class="line">        Class c = myLoader.loadClass(&quot;org.bupt.xiaoye.blog.ClassLoaderTest&quot;);    </div><div class="line">        Object obj = c.newInstance();    </div><div class="line">        System.out.println(obj.getClass());    </div><div class="line">        System.out.println(ClassLoaderTest.class);    </div><div class="line">        System.out.println(obj instanceof ClassLoaderTest);    </div><div class="line">  </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class org.bupt.xiaoye.blog.ClassLoaderTest  </div><div class="line">class org.bupt.xiaoye.blog.ClassLoaderTest  </div><div class="line">false</div></pre></td></tr></table></figure></p>
<p>我们使用了一个自定义的类加载器去加载ClassLoaderTest，由第一句也可以看出这个对象也的确是ClassLoaderTest实例化出来的对象，但是这个对象在与类class org.bupt.xiaoye.blog.ClassLoaderTest 做属性检查的时候却反悔了false，这就是因为虚拟机中存在了两个ClassLoaderTest类，一个由系统应用程序类加载器加载，一个由我们自定义的类加载器加载，虽然是 来自同一个Class文件，但依然是两个独立的类。</p>
<p>因此，<font color="red">类是否相等，取决于类本身和加载该类的类加载器是否是同一个类加载器。</font></p>
<h2 id="4-2-双亲委派模型"><a href="#4-2-双亲委派模型" class="headerlink" title="4.2 双亲委派模型"></a>4.2 双亲委派模型</h2><p>从虚拟机的角度来讲，只存在两种不同的类加载器：</p>
<p>一种是启动类加载器（Bootstrap ClassLoader），这个类加载器用 C++  语言实现， 是虚拟机自身的一部分：<br>另一种就是所有其它的类加载器， 这些类加载器用Java 语言实现，独立于虚拟机外部，并且全都继承与抽象类 java.lang.ClassLoader。</p>
<p>从Java 开发人员的角度来看，类加载器还可以划分的更细致一些，绝大多数Java 程序都会用到以下3种系统提供的类加载器：</p>
<p>（1）启动类加载器（Bootstrap ClassLoader） ： 这个类加载器负责将存放在 &lt;JAVA_HOME&gt;\lib 目录中的，或者被 -Xbootclasspath 参数指定的路径中的，并且是虚拟机识别的(仅按照文件名识别,如rt.jar ，名字不符合类库不会加载) 类库加载到虚拟机内存中。启动类加载器无法被 java 程序直接引用，如需要，直接使用 null 代替即可。<br>（2）扩展类加载器（Extension ClassLoader）：这个加载器由sun.misc.Launcher$ExtClassLoader 实现，它负责加载&lt;JAVA_HOME&gt;\lib\ext 目录中的，或者被 java.ext.dirs 系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。<br>（3）应用程序类加载器(Application ClassLoader)：这个类加载器由 sun.misc.Launcher$AppClassLoader 实现。这个这个类加载器是 ClassLoader 中的getSystemClassLoader() 方法的返回值，所以一般称它为系统类加载器。它负责加载用户路径(ClassPath)上所指定的类库，开发者可以使用这个类加载器，如果应用程序没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
<p>我们的应用程序都是由这3中类加载器互相配合进行加载的，如果有必要，还可以加入自己定义的类加载器。这些类加载器之间的关系一般如下图所示：</p>
<p>!双亲委派](Java虚拟机学习——类加载机制/双亲委派.png)</p>
<p>图中的类加载器之间的这种层次关系，称为类加载器的双亲委派模型。双亲委派模型要求除了顶层的启动类加载器，其余的类加载器都应该有自己的父类加载器。这里类加载器之间的父子关系一般不会以继承关系来实现，而是使用组合关系来复用父加载器的代码。<br>双亲委派模型的工作过程是：<font color="red">如果一个类加载器收到了类加载器的请求，它首先不会自己尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类时），子加载类才会尝试自己去加载。</font></p>
<p>使用双亲委派模型的好处：就是<font color="red">Java类随着它的类加载器一起具备了一种带有优先级的层次关系。</font>比如对于类Object来说，它存放在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器去加载，因此Object类在程序中的各种类加载器环境中都是同一个类。相反，如果没有使用双亲委派模型，由各个类自己去加载的话，按照我们前面说的，如果用户自己编写了一个Object类，并放在程序的ClassPath中，那系统中将会出现多个不同的Object类，此时Java类型提醒中最基础的行为也就无法保证了，应用程序也将变得混乱。</p>
<p>因此，双亲委派模型对于保证Java程序的稳定运作很重要，但是他的实现其实很简单，实现双亲委派模型的代码几种在java.lang.ClassLoader的loadClass()方法之中，逻辑清晰易懂：先检查类是否被加载过，若没有则调用父加载器的loadClass() 方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父加载器失败，抛出 ClassNotFoundException 异常后，再调用自己的 finClass() 方法进行加载，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">protected Class&lt;?&gt; loadClass(String name, boolean resolve)    </div><div class="line">        throws ClassNotFoundException &#123;    </div><div class="line">    synchronized (getClassLoadingLock(name)) &#123;    </div><div class="line">        // 首先检查类是否已经被加载过    </div><div class="line">        Class c = findLoadedClass(name);    </div><div class="line">        if (c == null) &#123;    </div><div class="line">            long t0 = System.nanoTime();    </div><div class="line">            try &#123;    </div><div class="line">                if (parent != null) &#123;    </div><div class="line">                    // 调用父类加载器加载    </div><div class="line">                    c = parent.loadClass(name, false);    </div><div class="line">                &#125; else &#123;    </div><div class="line">                    c = findBootstrapClassOrNull(name);    </div><div class="line">                &#125;    </div><div class="line">            &#125; catch (ClassNotFoundException e) &#123;    </div><div class="line">                // ClassNotFoundException thrown if class not found    </div><div class="line">                // from the non-null parent class loader    </div><div class="line">            &#125;    </div><div class="line">  </div><div class="line">            if (c == null) &#123;    </div><div class="line">                // If still not found, then invoke findClass in order    </div><div class="line">                // to find the class.    </div><div class="line">                //父类加载器无法完成加载，调用本身的加载器加载  </div><div class="line">                long t1 = System.nanoTime();    </div><div class="line">                c = findClass(name);    </div><div class="line">  </div><div class="line">                // this is the defining class loader; record the stats    </div><div class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(    </div><div class="line">                        t1 - t0);    </div><div class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(    </div><div class="line">                        t1);    </div><div class="line">                sun.misc.PerfCounter.getFindClasses().increment();    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        if (resolve) &#123;    </div><div class="line">            resolveClass(c);    </div><div class="line">        &#125;    </div><div class="line">        return c;    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考:<br>周志明:《深入理解Java虚拟机：JVM高级特性与最佳实践》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：类加载机制概述&quot;&gt;&lt;a href=&quot;#一：类加载机制概述&quot; class=&quot;headerlink&quot; title=&quot;一：类加载机制概述&quot;&gt;&lt;/a&gt;一：类加载机制概述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转
    
    </summary>
    
      <category term="JVM" scheme="http://wangyuanjun.cn/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://wangyuanjun.cn/tags/JVM/"/>
    
      <category term="java虚拟机" scheme="http://wangyuanjun.cn/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>JDK1.8源码解析——String</title>
    <link href="http://wangyuanjun.cn/2018/01/30/JDK1.8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94String/"/>
    <id>http://wangyuanjun.cn/2018/01/30/JDK1.8源码解析——String/</id>
    <published>2018-01-30T14:32:49.000Z</published>
    <updated>2018-02-01T02:52:33.769Z</updated>
    
    <content type="html"><![CDATA[<p>String源码分析 </p>
<h1 id="一：类的声明"><a href="#一：类的声明" class="headerlink" title="一：类的声明"></a>一：类的声明</h1><p>在java.lang包中，此类被final修饰，表示String的对象是不可变量，不可继承。<br>String类实现了Serizlizable，Comparable, CharSequence接口。<br>Serizlizable接口没有任何方法和域，仅用于标识序列化的语意，实现此接口的类是可序列化的，是java提供的通用数据保存和读取的接口。<br>Comparable接口只有一个compareTo(To)方法。<br><img src="/2018/01/30/JDK1.8源码解析——String/Comparable接口.png" alt="Comparable接口"><br>CharSequence接口如下图<br><img src="/2018/01/30/JDK1.8源码解析——String/CharSequence接口.png" alt="CharSequence接口"></p>
<h1 id="类的成员变量"><a href="#类的成员变量" class="headerlink" title="类的成员变量"></a>类的成员变量</h1><pre><code>/** The value is used for character storage. */
private final char value[]; //使用字符数组存放字符串

/** Cache the hash code for the string */
private int hash; // Default to 0  存放哈希值
</code></pre><h1 id="类的构造方法"><a href="#类的构造方法" class="headerlink" title="类的构造方法"></a>类的构造方法</h1><h2 id="无参构造器"><a href="#无参构造器" class="headerlink" title="无参构造器"></a>无参构造器</h2><pre><code>// 无参构造方法 因为String对象内容不可变，所以没有必要调用此方法。
public String() {
    this.value = &quot;&quot;.value;
}
</code></pre><h2 id="String-参数"><a href="#String-参数" class="headerlink" title="String 参数"></a>String 参数</h2><pre><code>//初始化一个新创建的 String 对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。
public String(String original) {
    this.value = original.value;
    this.hash = original.hash;
}
</code></pre><p>可以看到只是将value引用指向original中的value数组，因为两者都是final的，所以这个看来也没那么必要。因为String s1=new String(“s1s1”); String s2=new String(s1);这种用法完全没有必要，而不如直接引用，s2=s1;</p>
<h2 id="char-参数"><a href="#char-参数" class="headerlink" title="char[]参数"></a>char[]参数</h2><pre><code>// 分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。
public String(char value[]) {
    this.value = Arrays.copyOf(value, value.length);
}
//可以发现当通过char数组构建时，只是将char数组复制到value中，而且是复制，而不是简单的引用相等。

// 分配一个新的 String，它包含取自字符数组参数一个子数组的字符。
// offset是起始位置，count是字符数量
public String(char value[], int offset, int count) {    
    if (offset &lt; 0) { // 如果起始位置小于0
        throw new StringIndexOutOfBoundsException(offset);
    }
    if (count &lt;= 0) { // 如果字符数量小于1
        if (count &lt; 0) { // 如果字符数量小于0
            throw new StringIndexOutOfBoundsException(count);
        }
        if (offset &lt;= value.length) { // 如果起始位置不超过参数中字符数组长度
            this.value = &quot;&quot;.value; // 设置为空字符串
            return;
        }
    }
    // Note: offset or count might be near -1&gt;&gt;&gt;1.
    if (offset &gt; value.length - count) { // 如果起始位置与字符数量不符合逻辑
        throw new StringIndexOutOfBoundsException(offset + count);
    }

    // 创建字符数组副本
    this.value = Arrays.copyOfRange(value, offset, offset+count);
}
与上面的区别是，这里只是利用char数组中的一部分来构建String，其中offset代表起始下标，count是所有构建的长度。
</code></pre><h2 id="int-参数"><a href="#int-参数" class="headerlink" title="int[]参数"></a>int[]参数</h2><pre><code>//分配一个新的 String，它包含 Unicode 代码点数组参数一个子数组的字符。
public String(int[] codePoints, int offset, int count) {
    if (offset &lt; 0) {
        throw new StringIndexOutOfBoundsException(offset);
    }
    if (count &lt;= 0) {
        if (count &lt; 0) {
            throw new StringIndexOutOfBoundsException(count);
        }
        if (offset &lt;= codePoints.length) {
            this.value = &quot;&quot;.value;
            return;
        }
    }
    // Note: offset or count might be near -1&gt;&gt;&gt;1.
    if (offset &gt; codePoints.length - count) {
        throw new StringIndexOutOfBoundsException(offset + count);
    }

    final int end = offset + count;

    // Pass 1: Compute precise size of char[]
    int n = count;
    for (int i = offset; i &lt; end; i++) {
        int c = codePoints[i];
        if (Character.isBmpCodePoint(c))
            continue;
        else if (Character.isValidCodePoint(c))
            n++;
        else throw new IllegalArgumentException(Integer.toString(c));
    }

    // Pass 2: Allocate and fill in char[]
    final char[] v = new char[n];

    for (int i = offset, j = 0; i &lt; end; i++, j++) {
        int c = codePoints[i];
        if (Character.isBmpCodePoint(c))
            v[j] = (char)c;
        else
            Character.toSurrogates(c, v, j++);
    }

    this.value = v;
}
</code></pre><h2 id="byte-参数"><a href="#byte-参数" class="headerlink" title="byte[]参数"></a>byte[]参数</h2><p>所谓好的适用性模块，一定是能有一坨坨的各种适应代码的。下面是一系列的利用byte[]数组来构建String对象的构造器，主要差别是可能需要指定特殊的字符集来解码，但是这一点其实在web编程，网络编程中还是很重要的</p>
<pre><code>//通过使用指定的字符集解码指定的 byte 子数组，构造一个新的 String。
public String(byte bytes[], int offset, int length, String charsetName)
        throws UnsupportedEncodingException {
    if (charsetName == null)
        throw new NullPointerException(&quot;charsetName&quot;);
    checkBounds(bytes, offset, length);
    this.value = StringCoding.decode(charsetName, bytes, offset, length);
}

//通过使用指定的 charset 解码指定的 byte 子数组，构造一个新的 String。
public String(byte bytes[], int offset, int length, Charset charset) {
    if (charset == null)
        throw new NullPointerException(&quot;charset&quot;);
    checkBounds(bytes, offset, length);
    this.value =  StringCoding.decode(charset, bytes, offset, length);
}

// 通过使用指定的 charset 解码指定的 byte 数组，构造一个新的 String。
public String(byte bytes[], String charsetName)
        throws UnsupportedEncodingException {
    this(bytes, 0, bytes.length, charsetName);
}

//通过使用指定的 charset 解码指定的 byte 数组，构造一个新的 String。
public String(byte bytes[], Charset charset) {
    this(bytes, 0, bytes.length, charset);
}

//通过使用平台的默认字符集解码指定的 byte 子数组，构造一个新的 String。
public String(byte bytes[], int offset, int length) {
    checkBounds(bytes, offset, length);
    this.value = StringCoding.decode(bytes, offset, length);
}

//通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。
public String(byte bytes[]) {
    this(bytes, 0, bytes.length);
}
</code></pre><h2 id="基于StringBuilder-StringBuffer参数"><a href="#基于StringBuilder-StringBuffer参数" class="headerlink" title="基于StringBuilder,StringBuffer参数"></a>基于StringBuilder,StringBuffer参数</h2><pre><code>//分配一个新的字符串，它包含字符串缓冲区参数中当前包含的字符序列。
public String(StringBuffer buffer) {
    synchronized(buffer) {
        this.value = Arrays.copyOf(buffer.getValue(), buffer.length());
    }
}

//分配一个新的字符串，它包含字符串生成器参数中当前包含的字符序列。
public String(StringBuilder builder) {
    this.value = Arrays.copyOf(builder.getValue(), builder.length());
}

String(char[] value, boolean share) {
    // assert share : &quot;unshared not supported&quot;;
    this.value = value;
}
</code></pre><h1 id="重要方法"><a href="#重要方法" class="headerlink" title="重要方法"></a>重要方法</h1><h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><pre><code>//获取字符串长度
//返回字符串中所包含的字符数目，即value数组的长度
public int length() {
    return value.length;
}
</code></pre><h2 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h2><pre><code>// 判断字符串是否为空
// 判断字符串是否为空，即判断value数组的长度为0即可
public boolean isEmpty() {
    return value.length == 0;
}
</code></pre><h2 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h2><pre><code>//按下标获取单个字符
//返回指定索引处的 char 值。索引范围为从 0 到 length() - 1。序列的第一个 char 值位于索引 0 处，第二个位于索引 1 处，依此类推，这类似于数组索引。 
public char charAt(int index) {
    if ((index &lt; 0) || (index &gt;= value.length)) {
        throw new StringIndexOutOfBoundsException(index);
    }
    return value[index];
}
</code></pre><h2 id="getChars"><a href="#getChars" class="headerlink" title="getChars"></a>getChars</h2><pre><code>//将字符串拷贝到目标字符数组
void getChars(char dst[], int dstBegin) {
    System.arraycopy(value, 0, dst, dstBegin, value.length);
}

// 获取子串，把它拷贝到目标字符数组
public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {
    if (srcBegin &lt; 0) { // 如果源数组开始位置&lt;0
        throw new StringIndexOutOfBoundsException(srcBegin);
    }
    if (srcEnd &gt; value.length) { // 如果源数组结束位置&gt;字符数组长度
        throw new StringIndexOutOfBoundsException(srcEnd);
    }
    if (srcBegin &gt; srcEnd) { // 如果源数组开始位置&gt;源数组结束位置
        throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);
    }
    System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);
}
</code></pre><h2 id="getBytes"><a href="#getBytes" class="headerlink" title="getBytes"></a>getBytes</h2><pre><code>//使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。 
public byte[] getBytes(String charsetName)
        throws UnsupportedEncodingException {
    if (charsetName == null) throw new NullPointerException();
    return StringCoding.encode(charsetName, value, 0, value.length);
}

//使用给定的 charset 将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。 
public byte[] getBytes(Charset charset) {
    if (charset == null) throw new NullPointerException();
    return StringCoding.encode(charset, value, 0, value.length);
}

//使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。 
public byte[] getBytes() {
    return StringCoding.encode(value, 0, value.length);
}
</code></pre><h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><pre><code>//将此字符串与指定的对象比较。当且仅当该参数不为 null，并且是与此对象表示相同字符序列的 String 对象时，结果才为 true。 
//比较两个引用指向的String对象内容是否相同
public boolean equals(Object anObject) {
    if (this == anObject) { // 如果两个引用指向的是同一个String对象
        return true;
    }
    if (anObject instanceof String) { // 如果第2个引用指向的对象是String实例
        String anotherString = (String)anObject; // 强制类型转换
        int n = value.length; // 获取第1个引用指向的String对象的字符串长度
        if (n == anotherString.value.length) { // 如果两个字符串长度相等
            // 定义字符数组指针
            char v1[] = value; 
            char v2[] = anotherString.value;

            // 字符依次比较
            int i = 0;
            while (n-- != 0) {
                if (v1[i] != v2[i])
                    return false;
                i++;
            }
            return true;
        }
    }
    return false;
}
</code></pre><p>可以看到equals方法重写了，会判断两个字符串的每一个字符是否相等。    </p>
<h2 id="equalsIgnoreCase"><a href="#equalsIgnoreCase" class="headerlink" title="equalsIgnoreCase"></a>equalsIgnoreCase</h2><pre><code>//将此 String 与另一个 String 比较，不考虑大小写。如果两个字符串的长度相同，并且其中的相应字符都相等（忽略大小写），则认为这两个字符串是相等的。
public boolean equalsIgnoreCase(String anotherString) {
        return (this == anotherString) ? true
                : (anotherString != null)
                &amp;&amp; (anotherString.value.length == value.length)
                &amp;&amp; regionMatches(true, 0, anotherString, 0, value.length);
    }
    判断两个字符串在忽略大小写的情况下是否相等，主要调用regionMatches方法

    public boolean regionMatches(boolean ignoreCase, int toffset,
            String other, int ooffset, int len) {
        char ta[] = value;
        int to = toffset;
        char pa[] = other.value;
        int po = ooffset;
        // Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.
        if ((ooffset &lt; 0) || (toffset &lt; 0)
                || (toffset &gt; (long)value.length - len)
                || (ooffset &gt; (long)other.value.length - len)) {
            return false;
        }
        while (len-- &gt; 0) {
            char c1 = ta[to++];
            char c2 = pa[po++];
            //在这里先行判断，如果相等就直接跳过后面即可，可以提高效率
            if (c1 == c2) {
                continue;
            }
            if (ignoreCase) {
                // If characters don&apos;t match but case may be ignored,
                // try converting both characters to uppercase.
                // If the results match, then the comparison scan should
                // continue.
                char u1 = Character.toUpperCase(c1);
                char u2 = Character.toUpperCase(c2);
                //都转换成大写的形式，如果相等，则跳过
                if (u1 == u2) {
                    continue;
                }
                // Unfortunately, conversion to uppercase does not work properly
                // for the Georgian alphabet, which has strange rules about case
                // conversion.  So we need to make one last check before
                // exiting.
                if (Character.toLowerCase(u1) == Character.toLowerCase(u2)) {
                    continue;
                }
            }
            return false;
        }
        return true;
    }
</code></pre><h2 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h2><pre><code>// 比较两个String对象的大小
public int compareTo(String anotherString) {
    // 获取字符数组长度
    int len1 = value.length;
    int len2 = anotherString.value.length;
    // 获取最小长度
    int lim = Math.min(len1, len2);
    // 定义字符数组指针
    char v1[] = value;
    char v2[] = anotherString.value;

    int k = 0;
    while (k &lt; lim) {
        char c1 = v1[k];
        char c2 = v2[k];
        if (c1 != c2) { // 如果两个字符不相等
            return c1 - c2;
        }
        k++;
    }

    // 根据长度比较大小
    return len1 - len2;
}
</code></pre><p>比较两个字符串的大小。如果两个字符串的字符序列相等，则返回0；不相等时，从两个字符串第0个字符开始比较，返回第一个不相等的字符差。另一种情况，较长的字符串的前面部分恰好是较短的字符串，则返回他们的长度差。</p>
<h2 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith"></a>startsWith</h2><pre><code>//测试此字符串从指定索引开始的子字符串是否以指定前缀开始。
public boolean startsWith(String prefix, int toffset) {
    char ta[] = value;
    int to = toffset;
    char pa[] = prefix.value;
    int po = 0;
    int pc = prefix.value.length;
    // Note: toffset might be near -1&gt;&gt;&gt;1.
    if ((toffset &lt; 0) || (toffset &gt; value.length - pc)) {
        return false;
    }
    while (--pc &gt;= 0) {
        if (ta[to++] != pa[po++]) {
            return false;
        }
    }
    return true;
}

//测试此字符串是否以指定的前缀开始。 
public boolean startsWith(String prefix) {
    return startsWith(prefix, 0);
}
</code></pre><h2 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith"></a>endsWith</h2><pre><code>//测试此字符串是否以指定的后缀结束。
public boolean endsWith(String suffix) {
    return startsWith(suffix, value.length - suffix.value.length);
}
</code></pre><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><pre><code>//返回此字符串的哈希码。String 对象的哈希码根据以下公式计算： s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1] 使用 int 算法，这里 s[i] 是字符串的第 i 个字符，n 是字符串的长度，^ 表示求幂。（空字符串的哈希值为 0。） 
// 获取散列码方法
public int hashCode() {
    // 获取字符串缓存散列码
    int h = hash;
    if (h == 0 &amp;&amp; value.length &gt; 0) { // 如果字符串缓存散列码为0并且字符串数组长度大于0
        // 定义字符数组指针
        char val[] = value;

        // 遍历每个字符
        for (int i = 0; i &lt; value.length; i++) {
            h = 31 * h + val[i]; // 31 * h会被JVM优化成(h &lt;&lt; 5) - h
        }
        hash = h; // 修改字符串缓存散列码
    }
    return h;
}
</code></pre><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><pre><code>// 获取指定字符在此字符串中第一次出现处的索引
public int indexOf(int ch) {
    return indexOf(ch, 0); // 从0开始查找
}

// 获取在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。
// Unicode指统一码（采用双字节对字符进行编码）
public int indexOf(int ch, int fromIndex) {
    // 获取字符数组长度
    final int max = value.length;
    if (fromIndex &lt; 0) { // 如果起始位置&lt;0
        fromIndex = 0; // 起始位置置0
    } else if (fromIndex &gt;= max) { // 如果起始位置&gt;=字符数组长度
        // Note: fromIndex might be near -1&gt;&gt;&gt;1.
        return -1;
    }

    // Character.MIN_SUPPLEMENTARY_CODE_POINT是BmpCode代码点
    // 值是2的16次方，是2个字节最大值+1
    // 如果ch是非辅助代码点或者负值（无效代码点）
    if (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) { 
        // handle most cases here (ch is a BMP code point or a
        // negative value (invalid code point))
        final char[] value = this.value; // 创建字符数组的指针
        for (int i = fromIndex; i &lt; max; i++) { // 从fromIndex开始遍历每个字符
            if (value[i] == ch) { // 如果找到ch字符
                return i;
            }
        }
        return -1;
    } else { // 寻找ch在辅助部分中的索引
        return indexOfSupplementary(ch, fromIndex);
    }
}

//返回指定字符在此字符串中最后一次出现处的索引。
public int lastIndexOf(int ch) {
    return lastIndexOf(ch, value.length - 1);
}

//返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。
public int lastIndexOf(int ch, int fromIndex) {
    if (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) {
        // handle most cases here (ch is a BMP code point or a
        // negative value (invalid code point))
        final char[] value = this.value;
        int i = Math.min(fromIndex, value.length - 1);
        for (; i &gt;= 0; i--) {
            if (value[i] == ch) {
                return i;
            }
        }
        return -1;
    } else {
        return lastIndexOfSupplementary(ch, fromIndex);
    }
}

//返回指定子字符串在此字符串中第一次出现处的索引。
public int indexOf(String str) {
    return indexOf(str, 0);
}

//返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。
public int indexOf(String str, int fromIndex) {
    return indexOf(value, 0, value.length,
            str.value, 0, str.value.length, fromIndex);
}


// 获取参数子串在该字符串中从起始位置开始第一次出现的位置
static int indexOf(char[] source, int sourceOffset, int sourceCount,
        String target, int fromIndex) {
    return indexOf(source, sourceOffset, sourceCount,
                   target.value, 0, target.value.length,
                   fromIndex);
}

/* @param   source       the characters being searched.//这里就是value数组
     * @param   sourceOffset offset of the source string./ //源字符串的偏移量
     * @param   sourceCount  count of the source string.    //这里是value数组的长度
     * @param   target       the characters being searched for.  //待搜索目标字符串
     * @param   targetOffset offset of the target string.   //待搜索目标字符串的偏移量
     * @param   targetCount  count of the target string.   //待搜索目标字符串的长度
     * @param   fromIndex    the index to begin searching from. //起始位置
     */
    // 获取参数子串在该字符串中从起始位置开始第一次出现的位置
    // source是目标串（该字符串），target是模式串（子串）
    static int indexOf(char[] source, int sourceOffset, int sourceCount,
        char[] target, int targetOffset, int targetCount,
        int fromIndex) {
        if (fromIndex &gt;= sourceCount) {//越界了
            return (targetCount == 0 ? sourceCount : -1);
        }
        if (fromIndex &lt; 0) {
            fromIndex = 0;
        }
        if (targetCount == 0) {
            return fromIndex;
        }

        char first = target[targetOffset];//待搜索字符串第一个字符
        int max = sourceOffset + (sourceCount - targetCount);//搜索第一个匹配的字符时所能达到的最大值，因为要保证后面的长度&gt;=targetCount

        // 朴素匹配算法
        //下面这里就是核心搜索算法了，会先匹配第一个字符，然后依次向后移，直到完全匹配
        //或者是匹配到max仍然没有匹配成功
        for (int i = sourceOffset + fromIndex; i &lt;= max; i++) {
            /* Look for first character. */
            if (source[i] != first) {// 如果第一个字符不匹配
                while (++i &lt;= max &amp;&amp; source[i] != first);// 寻找第一个匹配上的字符
            }

            /* Found first character, now look at the rest of v2 */
            //可以注意这里i下标只是用来匹配第一个字符，因为有可能部分匹配时，需要从先在匹配
            //所以这里重新应用下标j
            if (i &lt;= max) {// 匹配除了第一个字符的其他部分
                int j = i + 1;
                int end = j + targetCount - 1;
                for (int k = targetOffset + 1; j &lt; end &amp;&amp; source[j]
                        == target[k]; j++, k++);

                if (j == end) {
                    /* Found whole string. */
                    return i - sourceOffset;
                }
            }
        }
        return -1;
    }//当匹配失败时，返回-1

//返回指定子字符串在此字符串中最右边出现处的索引。
public int lastIndexOf(String str) {
    return lastIndexOf(str, value.length);
}


public int lastIndexOf(String str, int fromIndex) {
    return lastIndexOf(value, 0, value.length,
            str.value, 0, str.value.length, fromIndex);
}
</code></pre><p>static int lastIndexOf(char[] source, int sourceOffset, int sourceCount,<br>            char[] target, int targetOffset, int targetCount,<br>            int fromIndex) {<br>                /*</p>
<pre><code>     * Check arguments; return immediately where possible. For
     * consistency, don&apos;t check for null str.
     */
    //第一个字符所能匹配的最大位置，类似于上面的max
    int rightIndex = sourceCount - targetCount;
    if (fromIndex &lt; 0) {
        return -1;
    }
    if (fromIndex &gt; rightIndex) {
        fromIndex = rightIndex;
    }
    /* Empty string always matches. */
    if (targetCount == 0) {
        return fromIndex;
    }

    int strLastIndex = targetOffset + targetCount - 1;//目标字符串最后一个字符下标
    char strLastChar = target[strLastIndex];//最后一个字符
    int min = sourceOffset + targetCount - 1;//目标字符串最后一个字符所能匹配的源字符串最小下标
    int i = min + fromIndex;//这里i下标永远是最后一个字符匹配的下标索引

startSearchForLastChar:
    while (true) {
        while (i &gt;= min &amp;&amp; source[i] != strLastChar) {
            i--;
        }
        //小于min则不可能在搜索到了
        if (i &lt; min) {
            return -1;
        }
        int j = i - 1;
        int start = j - (targetCount - 1);
        int k = strLastIndex - 1;

        while (j &gt; start) {
            if (source[j--] != target[k--]) {
                //当存在部分匹配，而前半部分不匹配时，跳出当前查找，整体向前窗移
                i--;
                continue startSearchForLastChar;//直接跳到顶层while循环
            }
        }
        return start - sourceOffset + 1;
    }
}
</code></pre><p>可以看到与indexOf方法是对应的，只不过是反向搜索。</p>
<h2 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h2><pre><code>//返回一个新的字符串，它是此字符串的一个子字符串。该子字符串从指定索引处的字符开始，直到此字符串末尾。
public String substring(int beginIndex) {
    if (beginIndex &lt; 0) { // 如果起始下标&lt;0
        throw new StringIndexOutOfBoundsException(beginIndex);
    }
    int subLen = value.length - beginIndex; // 获取截取长度
    if (subLen &lt; 0) { // 如果截取长度&lt;0
        throw new StringIndexOutOfBoundsException(subLen);
    }
    return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);
}

//返回一个新字符串，它是此字符串的一个子字符串。该子字符串从指定的 beginIndex 处开始，直到索引 endIndex - 1 处的字符。因此，该子字符串的长度为 endIndex-beginIndex。 
public String substring(int beginIndex, int endIndex) {
    if (beginIndex &lt; 0) { // 如果起始下标&lt;0
        throw new StringIndexOutOfBoundsException(beginIndex);
    }
    if (endIndex &gt; value.length) { // 如果末尾下标&gt;字符数组长度
        throw new StringIndexOutOfBoundsException(endIndex);
    }
    int subLen = endIndex - beginIndex; // 获取截取长度
    if (subLen &lt; 0) { // 如果截取长度&lt;0
        throw new StringIndexOutOfBoundsException(subLen);
    }
    return ((beginIndex == 0) &amp;&amp; (endIndex == value.length)) ? this
            : new String(value, beginIndex, subLen);
}
</code></pre><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><pre><code>//将指定字符串连接到此字符串的结尾。 
//如果参数字符串的长度为 0，则返回此 String 对象。否则，创建一个新的 String 对象，用来表示由此 String 对象表示的字符序列和参数字符串表示的字符序列连接而成的字符序列。
public String concat(String str) {
    int otherLen = str.length();
    if (otherLen == 0) {
        return this;
    }
    int len = value.length;
    char buf[] = Arrays.copyOf(value, len + otherLen);
    str.getChars(buf, len);
    return new String(buf, true);
}

void getChars(char dst[], int dstBegin) {
            System.arraycopy(value, 0, dst, dstBegin, value.length);
    }
</code></pre><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><pre><code>public String replace(char oldChar, char newChar) {
    if (oldChar != newChar) {
        int len = value.length;
        int i = -1;
        char[] val = value; /* avoid getfield opcode */

        while (++i &lt; len) {
            if (val[i] == oldChar) {
                break;
            }
        }
        if (i &lt; len) {
            char buf[] = new char[len];
            for (int j = 0; j &lt; i; j++) {
                buf[j] = val[j];
            }
            while (i &lt; len) {
                char c = val[i];
                buf[i] = (c == oldChar) ? newChar : c;
                i++;
            }
            return new String(buf, true);
        }
    }
    return this;
}
</code></pre><h2 id="matches"><a href="#matches" class="headerlink" title="matches"></a>matches</h2><pre><code>//告知此字符串是否匹配给定的正则表达式。
public boolean matches(String regex) {
    return Pattern.matches(regex, this);
}
</code></pre><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><pre><code>//根据给定正则表达式的匹配拆分此字符串。 
public String[] split(String regex, int limit) {
    /* fastpath if the regex is a
     (1)one-char String and this character is not one of the
        RegEx&apos;s meta characters &quot;.$|()[{^?*+\\&quot;, or
     (2)two-char String and the first char is the backslash and
        the second is not the ascii digit or ascii letter.
     */
    char ch = 0;
    if (((regex.value.length == 1 &amp;&amp;
         &quot;.$|()[{^?*+\\&quot;.indexOf(ch = regex.charAt(0)) == -1) ||
         (regex.length() == 2 &amp;&amp;
          regex.charAt(0) == &apos;\\&apos; &amp;&amp;
          (((ch = regex.charAt(1))-&apos;0&apos;)|(&apos;9&apos;-ch)) &lt; 0 &amp;&amp;
          ((ch-&apos;a&apos;)|(&apos;z&apos;-ch)) &lt; 0 &amp;&amp;
          ((ch-&apos;A&apos;)|(&apos;Z&apos;-ch)) &lt; 0)) &amp;&amp;
        (ch &lt; Character.MIN_HIGH_SURROGATE ||
         ch &gt; Character.MAX_LOW_SURROGATE))
    {
        int off = 0;
        int next = 0;
        boolean limited = limit &gt; 0;
        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();
        while ((next = indexOf(ch, off)) != -1) {
            if (!limited || list.size() &lt; limit - 1) {
                list.add(substring(off, next));
                off = next + 1;
            } else {    // last one
                //assert (list.size() == limit - 1);
                list.add(substring(off, value.length));
                off = value.length;
                break;
            }
        }
        // If no match was found, return this
        if (off == 0)
            return new String[]{this};

        // Add remaining segment
        if (!limited || list.size() &lt; limit)
            list.add(substring(off, value.length));

        // Construct result
        int resultSize = list.size();
        if (limit == 0) {
            while (resultSize &gt; 0 &amp;&amp; list.get(resultSize - 1).length() == 0) {
                resultSize--;
            }
        }
        String[] result = new String[resultSize];
        return list.subList(0, resultSize).toArray(result);
    }
    return Pattern.compile(regex).split(this, limit);
}

public String[] split(String regex) {
    return split(regex, 0);
}
</code></pre><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><pre><code>//返回字符串的副本，忽略前导空白和尾部空白。
public String trim() {
    int len = value.length;
    int st = 0;
    char[] val = value;    /* avoid getfield opcode */

    while ((st &lt; len) &amp;&amp; (val[st] &lt;= &apos; &apos;)) {
        st++;
    }
    while ((st &lt; len) &amp;&amp; (val[len - 1] &lt;= &apos; &apos;)) {
        len--;
    }
    return ((st &gt; 0) || (len &lt; value.length)) ? substring(st, len) : this;
}
</code></pre><p>这个trim()是去掉首尾的空格，而实现方式也非常简单，分别找到第一个非空格字符的下标，与最后一个非空格字符的下标<br>然后返回之间的子字符串。注意这里由于应用了substring方法，所以len变量的控制要小心</p>
<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><pre><code>//获取当前String对象
public String toString() {
    return this;
}
</code></pre><h2 id="toCharArray"><a href="#toCharArray" class="headerlink" title="toCharArray"></a>toCharArray</h2><pre><code>//将此字符串转换为一个新的字符数组。 
public char[] toCharArray() {
    // Cannot use Arrays.copyOf because of class initialization order issues
    char result[] = new char[value.length];
    System.arraycopy(value, 0, result, 0, value.length);
    return result;
}
</code></pre><h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><pre><code>//使用指定的格式字符串和参数返回一个格式化字符串。
public static String format(String format, Object... args) {
    return new Formatter().format(format, args).toString();
}

//使用指定的语言环境、格式字符串和参数返回一个格式化字符串。 
public static String format(Locale l, String format, Object... args) {
    return new Formatter(l).format(format, args).toString();
}
</code></pre><h2 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h2><pre><code>//返回 Object 参数的字符串表示形式。
public static String valueOf(Object obj) {
    return (obj == null) ? &quot;null&quot; : obj.toString();
}

//返回 char 数组参数的字符串表示形式。字符数组的内容已被复制，后续修改不会影响新创建的字符串。 
public static String valueOf(char data[]) {
    return new String(data);
}

//返回 char 数组参数的特定子数组的字符串表示形式。 
//offset 参数是子数组的第一个字符的索引。count 参数指定子数组的长度。字符数组的内容已被复制，后续修改不会影响新创建的字符串。 
public static String valueOf(char data[], int offset, int count) {
    return new String(data, offset, count);
}

//返回指定数组中表示该字符序列的 String。 
public static String copyValueOf(char data[], int offset, int count) {
    return new String(data, offset, count);
}

//返回指定数组中表示该字符序列的 String。 
public static String copyValueOf(char data[]) {
    return new String(data);
}

//返回 boolean 参数的字符串表示形式。 
public static String valueOf(boolean b) {
    return b ? &quot;true&quot; : &quot;false&quot;;
}

//返回 char 参数的字符串表示形式。 
public static String valueOf(char c) {
    char data[] = {c};
    return new String(data, true);
}

//返回 int 参数的字符串表示形式。 
public static String valueOf(int i) {
    return Integer.toString(i);
}

//返回 long 参数的字符串表示形式。 
public static String valueOf(long l) {
    return Long.toString(l);
}

//返回 float 参数的字符串表示形式。 
public static String valueOf(float f) {
    return Float.toString(f);
}

//返回 double 参数的字符串表示形式。 
public static String valueOf(double d) {
    return Double.toString(d);
}

//本地方法，把该字符串存入常量池，返回此字符串的引用
public native String intern();
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;String源码分析 &lt;/p&gt;
&lt;h1 id=&quot;一：类的声明&quot;&gt;&lt;a href=&quot;#一：类的声明&quot; class=&quot;headerlink&quot; title=&quot;一：类的声明&quot;&gt;&lt;/a&gt;一：类的声明&lt;/h1&gt;&lt;p&gt;在java.lang包中，此类被final修饰，表示String的对象
    
    </summary>
    
      <category term="JDK1.8源码" scheme="http://wangyuanjun.cn/categories/JDK1-8%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="JDK1.8源码" scheme="http://wangyuanjun.cn/tags/JDK1-8%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>成为Java顶尖程序员 ，看这11本书就够了</title>
    <link href="http://wangyuanjun.cn/2018/01/30/%E6%88%90%E4%B8%BAJava%E9%A1%B6%E5%B0%96%E7%A8%8B%E5%BA%8F%E5%91%98-%EF%BC%8C%E7%9C%8B%E8%BF%9911%E6%9C%AC%E4%B9%A6%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
    <id>http://wangyuanjun.cn/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/</id>
    <published>2018-01-30T09:40:17.000Z</published>
    <updated>2018-02-01T02:56:11.943Z</updated>
    
    <content type="html"><![CDATA[<p>“学习的最好途径就是看书”，这是我自己学习并且小有了一定的积累之后的第一体会。个人认为看书有两点好处：<br><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/1.jpg" alt="1"><br>1.能出版出来的书一定是经过反复的思考、雕琢和审核的，因此从专业性的角度来说，一本好书的价值远超其他资料</p>
<p>2.对着书上的代码自己敲的时候方便</p>
<p>“看完书之后再次提升自我的最好途径是看一些相关的好博文”，我个人认为这是学习的第二步，因为一本书往往有好几百页，好的博文是自己看书学习之后的一些总结和提炼，对于梳理学习的内容很有好处，当然这里不是说自己的学习方法，就不再扯下去了。</p>
<p>很多程序员们往往有看书的冲动，但不知道看哪些书，下面我就给各位Java程序猿们推荐一些好书（每本书的作者会加粗标红），其中绝大多数都是我自己平时在看的书，也算是我对于平时读的书做一个小总结和读后感吧。</p>
<p>首先推荐的不是一本书，而是一个博客，也是我们博客园另外一位博友java_my_life。</p>
<p>目前市面上讲解设计模式的书很多，虽然我前面讲了看书是最好的，但是对设计模式感兴趣的朋友们，我推荐的是这个博客。这位博友的设计模式讲得非常非常好，我认为90%的内容都是没有问题且很值得学习的，其讲解设计模式的大体路线是：</p>
<p>1、随便开篇点明该设计模式的定义</p>
<p>2、图文并茂讲解该设计模式中的结构</p>
<p>3、以详细的代码形式写一下该种设计模式的实现</p>
<p>4、补充内容</p>
<p>5、讲解该设计模式的优缺点</p>
<p>对于一个设计模式我们关注、学习的知识点，不就是上面这些吗？</p>
<p>不 过我要重点提醒一下网友们，同一种设计模式的写法有多种，并不是说只有按某种写法来写才是这种设计模式。比方说适配器模式，我们关注适配器模式一定要关注 的是什么是适配器模式不是怎么写适配器模式，不要认为某段代码不是按照适配器模式的写法写下来的它就不是适配器模式了，记住这一点，你在学习设计模式的时 候一定会对代码中用到的设计模式有更深入的理解。</p>
<h2 id="《深入理解Java虚拟机：JVM高级特性与最佳实践》"><a href="#《深入理解Java虚拟机：JVM高级特性与最佳实践》" class="headerlink" title="《深入理解Java虚拟机：JVM高级特性与最佳实践》"></a>《深入理解Java虚拟机：JVM高级特性与最佳实践》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/深入理解Java虚拟机：JVM高级特性与最佳实践.jpeg" alt="深入理解Java虚拟机：JVM高级特性与最佳实践"></p>
<p>如果你不满足于做一个只会写if…else…的Java程序员，而是希望更进一步，我随便举几个例子吧：</p>
<p>1、了解Java代码的底层运行机制</p>
<p>2、定位性能问题</p>
<p>3、对整个系统进行性能调优</p>
<p>4、解决各种奇奇怪怪的线上线下问题</p>
<p>5、更加高级别的，为自己的项目量身定做一款适合自己项目的虚拟机</p>
<p>那 么Java虚拟机是你必学的一门技术。《深入理解Java虚拟机：JVM高级特性与最佳实践》作者是周志明，这本书可以说是国内写得最好的有关Java虚 拟机的书籍，近半年，前前后后这本书我起码看了有5遍。国内写虚拟机的书除了这本，其实还有一些其他的，我也买过，不过粗略看下来，很多内容也是《深入理 解Java虚拟机：JVM高级特性与最佳实践》此书里面的。</p>
<p>另外值得一提的是，《深入理解Java虚拟机：JVM高级特性与最佳实践》这本 书，有电子版的，网上搜一下就能下载到了。不过建议有兴趣的朋友还是去买书看，电子版本下载到的一般是比较老的版本，相比最新修订版的《深入理解Java 虚拟机：JVM高级特性与最佳实践》，有很多作者新补充的知识点是没有的。</p>
<h2 id="《HotSpot实战》"><a href="#《HotSpot实战》" class="headerlink" title="《HotSpot实战》"></a>《HotSpot实战》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/HotSpot实战.jpeg" alt="HotSpot实战"><br>所有的Java虚拟机都是遵循着Java虚拟机规范来的，市面上的Java虚拟机几十款，《深入理解Java虚拟机：JVM高级特性与最佳实践》一书里面讲的虚拟机并不针对某种特定的虚拟机，而是从Java虚拟机规范的角度来讲解Java虚拟机。</p>
<p>我们平时使用的乃至商用的大多数Java虚拟机都是Sun公司的HotSpot，大家cmd进入命令行，使用”java -version”命令就可以看到了。如果希望在Java虚拟机规范的基础上更加深入地去理解虚拟机的一些细节是怎么实现的，就可以看一下《HotSpot实战》一书，作者是陈涛。不过由于HotSpot的源码都是C/C++写的，所以要求读者有非常好的C/C++基础，如果对这两门语言不是很熟悉的朋友，看这本书可能对你帮助不是很大。</p>
<p>最后提一句，如果有兴趣的朋友，不妨先去网上下载一个openJDK，HotSpot的源码就在里面。</p>
<h2 id="《Java并发编程实战》"><a href="#《Java并发编程实战》" class="headerlink" title="《Java并发编程实战》"></a>《Java并发编程实战》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/Java并发编程实战.jpeg" alt="Java并发编程实战"><br>这本书常常被列入Java程序员必读十大书籍排行榜前几位，不过个人不是很推荐这本书。</p>
<p>《Java并发编程实战》作者是Brian Goetz，怎么说呢，这本书前前后后我也看了两遍左右，个人感受是：</p>
<p>1、文字多代码少</p>
<p>2、讲解多实践少</p>
<p>我 觉得这可能就是老外写书的特点吧，因为Java是北美国家（加拿大、美国）开发和维护的，所以老外对Java方方面面的理论知识体系都掌握得是非常清楚和 透彻的。翻开这本书看，多线程什么用、什么是死锁、什么是竞争、什么是线程安全等等，方方面面的知识点都用大量的文字篇幅讲解，不免让人感觉十分枯燥，也 难让读者有实质性的进步。我这本书看了两遍也属于一目十行意思，有兴趣的地方就重点看一下。</p>
<p>无论如何，作为一本常常位于Jva程序员必读十大书籍排行榜前几名的书，还是一定要推荐给大家的。</p>
<h2 id="《java多线程编程核心技术》"><a href="#《java多线程编程核心技术》" class="headerlink" title="《java多线程编程核心技术》"></a>《java多线程编程核心技术》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/java多线程编程核心技术.jpeg" alt="java多线程编程核心技术"><br>《Java多线程编程核心技术》作者高洪岩。想要学习多线程的朋友，这本书是我大力推荐的，我的个人博客里面二十多篇的多线程博文都是基于此书，并且在这本书的基础上进行提炼和总结而写出来的。</p>
<p>此书和《Java并发编程实战》 相反，这本书的特点是大篇幅的代码+小篇幅的精讲解，可能这和中国人写的书比较偏向实用主义的风格有关。本书关于线程安全、synchronized、 Reentrant、Timer等等都用详细的代码进行了讲解，而且每个大知识点下的多个小知识点都会详细讲解到，非常有实践价值。</p>
<p>有兴趣的朋友们，我相信只要你们跟着这本书里面的代码敲、运行、思考，三步走，对于多线程的使用与理解一定会进几大步。</p>
<p>不 过这本书的缺点就是对于Java并发包下的一些类像CountDownLatch、Semphore、CyclicBarrier、Future、 Callable等都没有讲到，重点的CAS和AQS也没有触及，重点类的实现原理也没有提。当然，这很深入了，在学习了这本书之后如果能再去对这些知识 进行一些学习、研究的话，你一定会慢慢成长为一个很厉害的多线程高手。</p>
<h2 id="《Effective-Java中文版》"><a href="#《Effective-Java中文版》" class="headerlink" title="《Effective Java中文版》"></a>《Effective Java中文版》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/Effective Java中文版.jpeg" alt="Effective Java中文版"><br>这是唯一一本我没有买的书。初识这本书，是在我的博文Java代码优化（长期更新）里面，底下评论的时候有朋友提到了这本书，当时我说要去买，不过这两个月一直都没时间去逛书店，甚是遗憾，之后肯定会找时间去买这本书的。</p>
<p>《Effective Java中文版》的作者是Joshua Bloch，这个人就很厉害了，他是谷歌的首席架构师，属于超级技术大牛级别了吧，呵呵。由于没有看过这本书，所以我不好发表评论，但是从这本书的知名度 以及其作者的来头来看（多提一句，这本书也是Java之父James Gosling博士推崇的一本书），我相信这一定是一本值得一看的好书。</p>
<p>好 的代码是每个Java程序员都应该去追求的，不是说我今天写一段好代码相比写一段烂代码对性能会有多大的提升，更多的应该是提升了代码的可读性以及可以规 避许多潜在的、未知的问题，避免代码上线之后出问题而花时间去维护—-无论从时间成本、人力成本还是风险成本来说，这都是非常高的。</p>
<h2 id="《深入分析Java-Web技术内幕》"><a href="#《深入分析Java-Web技术内幕》" class="headerlink" title="《深入分析Java Web技术内幕》"></a>《深入分析Java Web技术内幕》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/深入分析Java Web技术内幕.jpeg" alt="深入分析Java Web技术内幕"><br>《深入分析Java Web技术内幕》，作者许令波，淘宝工程师。</p>
<p>这本书我用一个字概括就是：全。真的非常全，HTTP、DNS、CDN、静态化、Jetty、Tomcat、Servlet、Spring、MyBatis等等，什么都有，涉及知识面非常广，但又不像专门精讲某个知识点的书籍一样讲得非常深入，感觉这本书就是尽量去用短的篇幅讲清楚一些Java Web使用到的技术的内幕，让读者对这些知识点的技术内幕有一个理性的认识。</p>
<p>不过，尽管每个知识点的篇幅都不多，但是重点都基本讲到了，是一本让人真正有收获的书。如果想进一步了解这些技术的技术内幕，就要自己去买相关书籍或者自己上网查资料了，有种抛砖引玉，或者说师傅领进门、修行在个人的感觉。</p>
<h2 id="《大型网站技术架构-核心原理与案例分析》"><a href="#《大型网站技术架构-核心原理与案例分析》" class="headerlink" title="《大型网站技术架构 核心原理与案例分析》"></a>《大型网站技术架构 核心原理与案例分析》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/大型网站技术架构 核心原理与案例分析.jpeg" alt="大型网站技术架构 核心原理与案例分析"></p>
<p>一个字评价这本书，屌；两个字评价这本书，很屌；三个字评价这本书，非常屌。呵呵，好了，再说下去可能别人以为我是水军了。</p>
<p>《大型网站技术架构 核心原理与案例分析》的作者是李智慧，原阿里巴巴技术专家。</p>
<p>Java 的大多数应用都是用在Web上的，现在只要稍微大型一点的Web应用，都一定是一个分布式系统，那么一个分布式系统用到了哪些技术？一个大型网站是如何从 一个小型网站成长起来的？如何保证你的网站安全？分布式系统使用到了缓存，有哪些缓存？缓存的使用有哪些值得注意的事项？</p>
<p>关 于分布式的知识点，都在这本书里面有体现，只有你想不到，没有他写不到，而且写得非常易懂，基本属于看一两遍，再记一些笔记就知道是怎么一回事儿了。多看 几遍，对分布式的理解一定会加深不少。而且里面不仅仅是分布式的知识，还非常接地气地写了如何做一个好的架构师，其实我认为这不仅仅是写给想做架构师的读 者看的，就是给读者一些建议，如何更好地提出意见、如何更让别人关注你的声音、如何看到他人的优点，入木三分，让人获益匪浅。</p>
<h2 id="《大型网站系统与Java中间件实践》"><a href="#《大型网站系统与Java中间件实践》" class="headerlink" title="《大型网站系统与Java中间件实践》"></a>《大型网站系统与Java中间件实践》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/大型网站系统与Java中间件实践.jpeg" alt="大型网站系统与Java中间件实践"><br>《大型网站系统与Java中间件实践》作者曾宪杰，是淘宝的技术总监，算起来应该在阿里有至少P8的级别了吧。</p>
<p>这本书的部分内容和上面一本李智慧的《大型网站技术架构 核心原理与案例分析》有所重合，像分布式系统的演化、CDN、CAP理论和BASE理论等等，这也更说明这些都是分布式系统或者说是一个大型网站重点关注的内容，当作一次再学习也不错。</p>
<p>本书要突出的重点是中间件三个字，中间件是分布式系统中一个非常重要的东西，其最重要的作用应该就是解耦，降低模块与模块之间的强依赖，不同的模块之间的依赖度降低，便可以各自独立地开发自己的功能，这也可以说是软件工程发展的目标和驱动力。</p>
<p>因此，本书有一部分的内容就是基于中间件，详细讲解了中间件与JMS的各种知识，适合对分布式系统比较熟悉并且想要往中间件方面有一定研究的读者。</p>
<h2 id="《从Paxos到ZooKeeper-分布式一致性原理与实践》"><a href="#《从Paxos到ZooKeeper-分布式一致性原理与实践》" class="headerlink" title="《从Paxos到ZooKeeper 分布式一致性原理与实践》"></a>《从Paxos到ZooKeeper 分布式一致性原理与实践》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/从Paxos到ZooKeeper 分布式一致性原理与实践.jpeg" alt="从Paxos到ZooKeeper 分布式一致性原理与实践"></p>
<p>《从Paxos到ZooKeeper 分布式一致性原理与实践》，作者倪超，阿里巴巴工程师。</p>
<p>这本书是我最近在研读的一本书，和上面的《大型网站系统与Java中间件实践》一样，属于分布式组件的范畴，属于有些深入的内容，当然也是我自己的个人兴趣。当然，如果有志向做一个出色的大型网站架构师、公司的技术总监之类，这些知识当然是必须掌握的。</p>
<p>本书从分布式系统基本理论开始讲起，讲到Paxos算法，最后慢慢引入到Zookeeper，循序渐进。当然，更多的我目前还不方便发表什么看法，因为这本书的第二张Paxos算法我都还没有弄懂（Paxos算法确实有些难以理解和不太易懂），接下来的章节还没有看下去。</p>
<p>如果网友们所在的公司在使用Zookeeper，并且你又对Zookeeper感兴趣想要研究一下它的原理的，这本书将是不二之选。</p>
<h2 id="《MySQL5-6从零开始学》"><a href="#《MySQL5-6从零开始学》" class="headerlink" title="《MySQL5.6从零开始学》"></a>《MySQL5.6从零开始学》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/MySQL5.6从零开始学.jpeg" alt="MySQL5.6从零开始学"><br>《MySQL5.6从零开始学》，作者刘增杰和李坤。</p>
<p>作为一名Java程序员，我认为我们千万不要觉得数据库是DBA的事情，数据库对一个Java程序员来说也是必须掌握的一门知识，丰富的数据库性能优化经验是一个顶尖程序员必备技能。</p>
<p>目前主流的数据库有Oracle和MySQL，当然推荐大家的是MySQL，主要原因我认为有两点：</p>
<p>1、MySQL相比Oracle更轻量级、更小、安装和卸载更方便，SQL其实都是差不多的，如果想学数据库，学MySQL就可以了，在家里面可以自己方便地研究，如果你的公司使用Oracle，只要再用对比学习法，关注一下Oracle和MySQL的差别即可</p>
<p>2、随着2009年阿里巴巴去IOE的运动的进行，目前国内的很多互联网公司都会选择MySQL作为它们使用的数据库，因为MySQL免费，所以既省钱又不需要出了问题就依赖甲骨文公司</p>
<p>MySQL学习我推荐的是这本我自己学习看的《MySQL5.6从零开始学》，我是觉得挺好的这本书，书里面的知识点很细致、很全面，读者选择书籍的标准大多不就是这两点吗？</p>
<h2 id="《Spring源码深度解析》"><a href="#《Spring源码深度解析》" class="headerlink" title="《Spring源码深度解析》"></a>《Spring源码深度解析》</h2><p><img src="/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/Spring源码深度解析.jpeg" alt="Spring源码深度解析"><br>《Spring源码深度解析》，作者郝佳。</p>
<p>Spring 这个框架做得太好了，功能太强大了，以至于很多开发者都只知Spring，不知什么是工厂、什么是单例、什么是代理（我面试别人的真实体会）。这种功能强 大的框架内部一定是很复杂的实现，这就导致一旦你的程序使用Spring，出了问题，可能是Error、可能是Exception、可能是程序运行结果不 是你的预期的，出现诸如此类问题的时候，将会让你感到困惑，除了上网查资料或者问别人似乎没有更好的解决办法。</p>
<p>研读Spring的源代码不失为一种很好的学习方法，我个人认为这有很多好处：</p>
<p>1、理解框架内部的实现之后，可以主动去解决问题，而不需要依赖别人</p>
<p>2、Spring框架内部实现用到了很多设计模式，很好的代码设计思路，这将会对你写代码、对你理解设计模式有很大的提高</p>
<p>3、研究Spring框架将会大大增强你读代码的能力，我相信只要你能研究清楚Spring内部是如何实现的，其他任何一个框架的源代码都难不倒你</p>
<p>总而言之，我认为读代码的能力是一个普通的程序员和一个好的程序员之间最大的差别之一，前者只会把别人写好的东西拿来用，后者不仅能用好，还清楚知道别人写好的东西底层是如何实现的，在出现问题的时候可以轻松解决。</p>
<p>Spring源代码，个人推荐《Spring源码深度解析》一书，真要研究透并且写清楚Spring源代码，恐怕三四本书都不够，作者在近400页的篇幅中尽量去讲解Spring源代码是如何实现的，殊为不易，尽管无法讲得完全，但是相信作者的讲解配合上读者自己的研究，一定可以对Spring的实现有更深度的理解。</p>
<p>后记</p>
<p>以 上就是我推荐给Java开发者们的一些值得一看的好书。但是这些书里面并没有Java基础、Java教程之类的书，不是我不推荐，而是离我自己学习 Java基础技术也过去好几年了，我学习的时候看的什么也忘了，所以我不能不负责任地推荐一些我自己都没有看过的书给大家。对于Java基础知识的学习， 我提两点建议吧：</p>
<p>1、多写多敲代码，好的代码与扎实的基础知识一定是实践出来的</p>
<p>2、可以去尚学堂下载一下马士兵的视频来学习一下Java基础，还挺不错的，如果尚学堂官网上下载不了可以底下回复，我的电脑里有</p>
<p>最后，每一位读到这里的网友，感谢你们能耐心地看完。希望在成为一名更优秀的Java程序员的道路上，我们可以一起学习、一起进步。</p>
<p>转载：<a href="http://developer.51cto.com/art/201512/503095.htm" target="_blank" rel="external">http://developer.51cto.com/art/201512/503095.htm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“学习的最好途径就是看书”，这是我自己学习并且小有了一定的积累之后的第一体会。个人认为看书有两点好处：&lt;br&gt;&lt;img src=&quot;/2018/01/30/成为Java顶尖程序员-，看这11本书就够了/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;br&gt;1.能出版出来的书一定是经过反复的思
    
    </summary>
    
      <category term="学习" scheme="http://wangyuanjun.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://wangyuanjun.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>解决微信公共号开发出现 redirect_uri域名与后台配置不一致，错误码10003 错误</title>
    <link href="http://wangyuanjun.cn/2018/01/27/%E8%A7%A3%E5%86%B3%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E5%87%BA%E7%8E%B0-redirect-uri%E5%9F%9F%E5%90%8D%E4%B8%8E%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE%E4%B8%8D%E4%B8%80%E8%87%B4%EF%BC%8C%E9%94%99%E8%AF%AF%E7%A0%8110003-%E9%94%99%E8%AF%AF/"/>
    <id>http://wangyuanjun.cn/2018/01/27/解决微信公共号开发出现-redirect-uri域名与后台配置不一致，错误码10003-错误/</id>
    <published>2018-01-27T15:27:54.000Z</published>
    <updated>2018-02-01T02:51:47.008Z</updated>
    
    <content type="html"><![CDATA[<p>做微信网页OAuth2.0 授权开发，进入授权页面是报错，redirect_uri域名与后台配置不一致，错误码10003<br><img src="/2018/01/27/解决微信公共号开发出现-redirect-uri域名与后台配置不一致，错误码10003-错误/报错.png" alt="报错"></p>
<p>问题原因：<font color="red">可能OAuth2.0网页授权页面没有填写授权回调页面域名，或者域名前面加了 http://</font></p>
<p>解决方法： 到 微信公共平台-&gt;测试号管理-&gt;体验接口权限表-&gt;网页服务-&gt;网页帐号-&gt;修改 ，填写域名<br><img src="/2018/01/27/解决微信公共号开发出现-redirect-uri域名与后台配置不一致，错误码10003-错误/b.png" alt="b"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做微信网页OAuth2.0 授权开发，进入授权页面是报错，redirect_uri域名与后台配置不一致，错误码10003&lt;br&gt;&lt;img src=&quot;/2018/01/27/解决微信公共号开发出现-redirect-uri域名与后台配置不一致，错误码10003-错误/报错.p
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——微信网页授权(八)</title>
    <link href="http://wangyuanjun.cn/2018/01/27/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83-%E5%85%AB/"/>
    <id>http://wangyuanjun.cn/2018/01/27/微信公共号开发教程java版——微信网页授权-八/</id>
    <published>2018-01-27T08:17:17.000Z</published>
    <updated>2018-01-27T14:34:24.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：微信网页授权介绍"><a href="#一：微信网页授权介绍" class="headerlink" title="一：微信网页授权介绍"></a>一：微信网页授权介绍</h1><p>官网详细介绍:<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140839" target="_blank" rel="external">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140839</a><br>如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p>
<h2 id="关于网页授权回调域名的说明"><a href="#关于网页授权回调域名的说明" class="headerlink" title="关于网页授权回调域名的说明"></a>关于网页授权回调域名的说明</h2><p>1、在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头；</p>
<p>2、授权回调域名配置规范为全域名，比如需要网页授权的域名为：www.qq.com，配置以后此域名下面的页面<a href="http://www.qq.com/music.html" target="_blank" rel="external">http://www.qq.com/music.html</a> 、 <a href="http://www.qq.com/login.html" target="_blank" rel="external">http://www.qq.com/login.html</a> 都可以进行OAuth2.0鉴权。但<a href="http://pay.qq.com" target="_blank" rel="external">http://pay.qq.com</a> 、 <a href="http://music.qq.com" target="_blank" rel="external">http://music.qq.com</a> 、 <a href="http://qq.com无法进行OAuth2.0鉴权" target="_blank" rel="external">http://qq.com无法进行OAuth2.0鉴权</a></p>
<p>3、如果公众号登录授权给了第三方开发者来进行管理，则不必做任何设置，由第三方代替公众号实现网页授权即可</p>
<h2 id="关于网页授权的两种scope的区别说明"><a href="#关于网页授权的两种scope的区别说明" class="headerlink" title="关于网页授权的两种scope的区别说明"></a>关于网页授权的两种scope的区别说明</h2><p>1、以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）</p>
<p>2、以snsapi_userinfo为scope发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。</p>
<p>3、用户管理类接口中的“获取用户基本信息接口”，是在用户和公众号产生消息交互或关注后事件推送后，才能根据用户OpenID来获取用户基本信息。这个接口，包括其他微信接口，都是需要该用户（即openid）关注了公众号后，才能调用成功的。</p>
<h2 id="关于网页授权access-token和普通access-token的区别"><a href="#关于网页授权access-token和普通access-token的区别" class="headerlink" title="关于网页授权access_token和普通access_token的区别"></a>关于网页授权access_token和普通access_token的区别</h2><p>1、微信网页授权是通过OAuth2.0机制实现的，在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证（网页授权access_token），通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息；</p>
<p>2、其他微信接口，需要通过基础支持中的“获取access_token”接口来获取到的普通access_token调用。</p>
<h2 id="关于UnionID机制"><a href="#关于UnionID机制" class="headerlink" title="关于UnionID机制"></a>关于UnionID机制</h2><p>1、请注意，网页授权获取用户基本信息也遵循UnionID机制。即如果开发者有在多个公众号，或在公众号、移动应用之间统一用户帐号的需求，需要前往微信开放平台（open.weixin.qq.com）绑定公众号后，才可利用UnionID机制来满足上述需求。</p>
<p>2、UnionID机制的作用说明：如果开发者拥有多个移动应用、网站应用和公众帐号，可通过获取用户基本信息中的unionid来区分用户的唯一性，因为同一用户，对同一个微信开放平台下的不同应用（移动应用、网站应用和公众帐号），unionid是相同的。</p>
<h2 id="关于特殊场景下的静默授权"><a href="#关于特殊场景下的静默授权" class="headerlink" title="关于特殊场景下的静默授权"></a>关于特殊场景下的静默授权</h2><p>1、上面已经提到，对于以snsapi_base为scope的网页授权，就静默授权的，用户无感知；</p>
<p>2、对于已关注公众号的用户，如果用户从公众号的会话或者自定义菜单进入本公众号的网页授权页，即使是scope为snsapi_userinfo，也是静默授权，用户无感知。</p>
<p><strong>具体而言，网页授权流程分为四步：</strong></p>
<p>1、引导用户进入授权页面同意授权，获取code</p>
<p>2、通过code换取网页授权access_token（与基础支持中的access_token不同）</p>
<p>3、如果需要，开发者可以刷新网页授权access_token，避免过期</p>
<p>4、通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</p>
<h1 id="二：网页授权的实现"><a href="#二：网页授权的实现" class="headerlink" title="二：网页授权的实现"></a>二：网页授权的实现</h1><h2 id="1-用户同意授权，获取code"><a href="#1-用户同意授权，获取code" class="headerlink" title="1.用户同意授权，获取code"></a>1.用户同意授权，获取code</h2><p>在确保微信公众账号拥有授权作用域（scope参数）的权限的前提下（服务号获得高级接口后，默认拥有scope参数中的snsapi_base和snsapi_userinfo），引导关注者打开如下页面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect 若提示“该链接无法访问”，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限。</div></pre></td></tr></table></figure>
<p>尤其注意：由于授权操作安全等级较高，所以在发起授权请求时，微信会对授权链接做正则强匹配校验，如果链接的参数顺序不对，授权页面将无法正常访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">参考链接(请在微信客户端中打开此链接体验):</div><div class="line">scope为snsapi_base</div><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect</div><div class="line">scope为snsapi_userinfo</div><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf0e81c3bee622d60&amp;redirect_uri=http%3A%2F%2Fnba.bluewebgame.com%2Foauth_response.php&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect</div></pre></td></tr></table></figure>
<p>尤其注意：跳转回调redirect_uri，应当使用https链接来确保授权code的安全性。</p>
<p><strong>参数说明</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">是否必须</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>appid</td>
<td style="text-align:right">是</td>
<td style="text-align:center">公众号的唯一标识</td>
</tr>
<tr>
<td>redirect_uri</td>
<td style="text-align:right">是</td>
<td style="text-align:center">授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理</td>
</tr>
<tr>
<td>response_type</td>
<td style="text-align:right">是</td>
<td style="text-align:center">返回类型，请填写code</td>
</tr>
<tr>
<td>scope</td>
<td style="text-align:right">是</td>
<td style="text-align:center">应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td>
</tr>
<tr>
<td>state</td>
<td style="text-align:right">否</td>
<td style="text-align:center">重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</td>
</tr>
<tr>
<td>#wechat_redirect</td>
<td style="text-align:right">是</td>
<td style="text-align:center">无论直接打开还是做页面302重定向时候，必须带此参数</td>
</tr>
</tbody>
</table>
<p>下图为scope等于snsapi_userinfo时的授权页面：<br><img src="/2018/01/27/微信公共号开发教程java版——微信网页授权-八/授权页面.jpg" alt="授权页面"></p>
<p><strong>用户同意授权后</strong><br>如果用户同意授权，页面将跳转至 redirect_uri/?code=CODE&amp;state=STATE。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">code说明 ： code作为换取access_token的票据，每次用户授权带上的code将不一样，code只能使用一次，5分钟未被使用自动过期。</div></pre></td></tr></table></figure>
<p><strong>错误返回码说明如下：</strong></p>
<table>
<thead>
<tr>
<th>返回码</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>10003</td>
<td style="text-align:center">redirect_uri域名与后台配置不一致</td>
</tr>
<tr>
<td>10004</td>
<td style="text-align:center">此公众号被封禁</td>
</tr>
<tr>
<td>10005</td>
<td style="text-align:center">此公众号并没有这些scope的权限</td>
</tr>
<tr>
<td>10006</td>
<td style="text-align:center">必须关注此测试号</td>
</tr>
<tr>
<td>10009</td>
<td style="text-align:center">操作太频繁了，请稍后重试</td>
</tr>
<tr>
<td>10010</td>
<td style="text-align:center">scope不能为空</td>
</tr>
<tr>
<td>10011</td>
<td style="text-align:center">redirect_uri不能为空</td>
</tr>
<tr>
<td>10012</td>
<td style="text-align:center">appid不能为空</td>
</tr>
<tr>
<td>10013</td>
<td style="text-align:center">state不能为空</td>
</tr>
<tr>
<td>10015</td>
<td style="text-align:center">公众号未授权第三方平台，请检查授权状态</td>
</tr>
<tr>
<td>10016</td>
<td style="text-align:center">不支持微信开放平台的Appid，请使用公众号Appid</td>
</tr>
</tbody>
</table>
<h2 id="2-通过网页授权获取的用户信息"><a href="#2-通过网页授权获取的用户信息" class="headerlink" title="2. 通过网页授权获取的用户信息"></a>2. 通过网页授权获取的用户信息</h2><p><strong>用户信息类：SNSUserInfo类</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 通过网页授权获取的用户信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月24日 下午3:09:02</div><div class="line"> */</div><div class="line">public class SNSUserInfo &#123;</div><div class="line"></div><div class="line">    // 用户标识</div><div class="line">    private String openId;</div><div class="line"></div><div class="line">    // 用户昵称</div><div class="line">    private String nickname;</div><div class="line"></div><div class="line">    // 性别（1是男性，2是女性，0是未知）</div><div class="line">    private int sex;</div><div class="line"></div><div class="line">    // 国家</div><div class="line">    private String country;</div><div class="line"></div><div class="line">    // 省份</div><div class="line">    private String province;</div><div class="line"></div><div class="line">    // 城市</div><div class="line">    private String city;</div><div class="line"></div><div class="line">    // 用户头像链接</div><div class="line">    private String headImgUrl;</div><div class="line"></div><div class="line">    // 用户特权信息</div><div class="line">    private List&lt;String&gt; privilegeList;</div><div class="line"></div><div class="line">    public String getOpenId() &#123;</div><div class="line">        return openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setOpenId(String openId) &#123;</div><div class="line">        this.openId = openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getNickname() &#123;</div><div class="line">        return nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setNickname(String nickname) &#123;</div><div class="line">        this.nickname = nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSex() &#123;</div><div class="line">        return sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSex(int sex) &#123;</div><div class="line">        this.sex = sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCountry() &#123;</div><div class="line">        return country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCountry(String country) &#123;</div><div class="line">        this.country = country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getProvince() &#123;</div><div class="line">        return province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setProvince(String province) &#123;</div><div class="line">        this.province = province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCity() &#123;</div><div class="line">        return city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCity(String city) &#123;</div><div class="line">        this.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getHeadImgUrl() &#123;</div><div class="line">        return headImgUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setHeadImgUrl(String headImgUrl) &#123;</div><div class="line">        this.headImgUrl = headImgUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;String&gt; getPrivilegeList() &#123;</div><div class="line">        return privilegeList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPrivilegeList(List&lt;String&gt; privilegeList) &#123;</div><div class="line">        this.privilegeList = privilegeList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-凭证实体类"><a href="#3-凭证实体类" class="headerlink" title="3.凭证实体类"></a>3.凭证实体类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * 凭证</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:19:14</div><div class="line"> */</div><div class="line">public class Token &#123;</div><div class="line"></div><div class="line">    // 接口访问凭证</div><div class="line">    private String accessToken;</div><div class="line"></div><div class="line">    // 凭证有效期，单位：秒</div><div class="line">    private int expiresIn;</div><div class="line"></div><div class="line">    public String getAccessToken() &#123;</div><div class="line">        return accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAccessToken(String accessToken) &#123;</div><div class="line">        this.accessToken = accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getExpiresIn() &#123;</div><div class="line">        return expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setExpiresIn(int expiresIn) &#123;</div><div class="line">        this.expiresIn = expiresIn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-网页授权信息-WeixinOauth2Token类"><a href="#4-网页授权信息-WeixinOauth2Token类" class="headerlink" title="4.网页授权信息 WeixinOauth2Token类"></a>4.网页授权信息 WeixinOauth2Token类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 网页授权信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月24日 下午3:10:03</div><div class="line"> */</div><div class="line">public class WeixinOauth2Token &#123;</div><div class="line"></div><div class="line">    // 网页授权接口调用凭证</div><div class="line">    private String accessToken;</div><div class="line"></div><div class="line">    // 凭证有效时长</div><div class="line">    private int expiresIn;</div><div class="line"></div><div class="line">    // 用于刷新凭证</div><div class="line">    private String refreshToken;</div><div class="line"></div><div class="line">    // 用户标识</div><div class="line">    private String openId;</div><div class="line"></div><div class="line">    // 用户授权作用域</div><div class="line">    private String scope;</div><div class="line"></div><div class="line">    public String getAccessToken() &#123;</div><div class="line">        return accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAccessToken(String accessToken) &#123;</div><div class="line">        this.accessToken = accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getExpiresIn() &#123;</div><div class="line">        return expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setExpiresIn(int expiresIn) &#123;</div><div class="line">        this.expiresIn = expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getRefreshToken() &#123;</div><div class="line">        return refreshToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setRefreshToken(String refreshToken) &#123;</div><div class="line">        this.refreshToken = refreshToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getOpenId() &#123;</div><div class="line">        return openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setOpenId(String openId) &#123;</div><div class="line">        this.openId = openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getScope() &#123;</div><div class="line">        return scope;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setScope(String scope) &#123;</div><div class="line">        this.scope = scope;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-微信用户的基本信息WeixinUserInfo类"><a href="#5-微信用户的基本信息WeixinUserInfo类" class="headerlink" title="5.微信用户的基本信息WeixinUserInfo类"></a>5.微信用户的基本信息WeixinUserInfo类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 微信用户的基本信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月24日 上午10:05:42</div><div class="line"> */</div><div class="line">public class WeixinUserInfo &#123;</div><div class="line"></div><div class="line">    // 用户的标识</div><div class="line">    private String openId;</div><div class="line"></div><div class="line">    // 关注状态（1是关注，0是未关注），未关注时获取不到其余信息</div><div class="line">    private int subscribe;</div><div class="line"></div><div class="line">    // 用户关注时间，为时间戳。如果用户曾多次关注，则取最后关注时间</div><div class="line">    private String subscribeTime;</div><div class="line"></div><div class="line">    // 昵称</div><div class="line">    private String nickname;</div><div class="line"></div><div class="line">    // 用户的性别（1是男性，2是女性，0是未知）</div><div class="line">    private int sex;</div><div class="line"></div><div class="line">    // 用户所在国家</div><div class="line">    private String country;</div><div class="line"></div><div class="line">    // 用户所在省份</div><div class="line">    private String province;</div><div class="line"></div><div class="line">    // 用户所在城市</div><div class="line">    private String city;</div><div class="line"></div><div class="line">    // 用户的语言，简体中文为zh_CN</div><div class="line">    private String language;</div><div class="line"></div><div class="line">    // 用户头像</div><div class="line">    private String headImgUrl;</div><div class="line"></div><div class="line">    public String getOpenId() &#123;</div><div class="line">        return openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setOpenId(String openId) &#123;</div><div class="line">        this.openId = openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSubscribe() &#123;</div><div class="line">        return subscribe;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubscribe(int subscribe) &#123;</div><div class="line">        this.subscribe = subscribe;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSubscribeTime() &#123;</div><div class="line">        return subscribeTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubscribeTime(String subscribeTime) &#123;</div><div class="line">        this.subscribeTime = subscribeTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getNickname() &#123;</div><div class="line">        return nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setNickname(String nickname) &#123;</div><div class="line">        this.nickname = nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSex() &#123;</div><div class="line">        return sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSex(int sex) &#123;</div><div class="line">        this.sex = sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCountry() &#123;</div><div class="line">        return country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCountry(String country) &#123;</div><div class="line">        this.country = country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getProvince() &#123;</div><div class="line">        return province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setProvince(String province) &#123;</div><div class="line">        this.province = province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCity() &#123;</div><div class="line">        return city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCity(String city) &#123;</div><div class="line">        this.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLanguage() &#123;</div><div class="line">        return language;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLanguage(String language) &#123;</div><div class="line">        this.language = language;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getHeadImgUrl() &#123;</div><div class="line">        return headImgUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setHeadImgUrl(String headImgUrl) &#123;</div><div class="line">        this.headImgUrl = headImgUrl;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-获取网页授权凭证及获取用户信息"><a href="#6-获取网页授权凭证及获取用户信息" class="headerlink" title="6.获取网页授权凭证及获取用户信息"></a>6.获取网页授权凭证及获取用户信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.SNSUserInfo;</div><div class="line">import com.wyj.wechart.pojo.WeixinOauth2Token;</div><div class="line"></div><div class="line">import net.sf.json.JSONArray;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line">/**</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月24日 下午3:19:44</div><div class="line"> */</div><div class="line">public class AdvancedUtil &#123;</div><div class="line"></div><div class="line">    private static Logger log = LoggerFactory.getLogger(AdvancedUtil.class);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取网页授权凭证</div><div class="line">     * </div><div class="line">     * @param appId</div><div class="line">     *            公众账号的唯一标识</div><div class="line">     * @param appSecret</div><div class="line">     *            公众账号的密钥</div><div class="line">     * @param code</div><div class="line">     * @return WeixinAouth2Token</div><div class="line">     */</div><div class="line">    public static WeixinOauth2Token getOauth2AccessToken(String appId, String appSecret, String code) &#123;</div><div class="line">        WeixinOauth2Token wat = null;</div><div class="line">        // 拼接请求地址</div><div class="line">        String requestUrl = &quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code&quot;;</div><div class="line">        requestUrl = requestUrl.replace(&quot;APPID&quot;, appId);</div><div class="line">        requestUrl = requestUrl.replace(&quot;SECRET&quot;, appSecret);</div><div class="line">        requestUrl = requestUrl.replace(&quot;CODE&quot;, code);</div><div class="line">        // 获取网页授权凭证</div><div class="line">        JSONObject jsonObject = CommonUtil.httpsRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                wat = new WeixinOauth2Token();</div><div class="line">                wat.setAccessToken(jsonObject.getString(&quot;access_token&quot;));</div><div class="line">                wat.setExpiresIn(jsonObject.getInt(&quot;expires_in&quot;));</div><div class="line">                wat.setRefreshToken(jsonObject.getString(&quot;refresh_token&quot;));</div><div class="line">                wat.setOpenId(jsonObject.getString(&quot;openid&quot;));</div><div class="line">                wat.setScope(jsonObject.getString(&quot;scope&quot;));</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                wat = null;</div><div class="line">                int errorCode = jsonObject.getInt(&quot;errcode&quot;);</div><div class="line">                String errorMsg = jsonObject.getString(&quot;errmsg&quot;);</div><div class="line">                log.error(&quot;获取网页授权凭证失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, errorCode, errorMsg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return wat;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 通过网页授权获取用户信息</div><div class="line">     * </div><div class="line">     * @param accessToken</div><div class="line">     *            网页授权接口调用凭证</div><div class="line">     * @param openId</div><div class="line">     *            用户标识</div><div class="line">     * @return SNSUserInfo</div><div class="line">     */</div><div class="line">    @SuppressWarnings(&#123; &quot;deprecation&quot;, &quot;unchecked&quot; &#125;)</div><div class="line">    public static SNSUserInfo getSNSUserInfo(String accessToken, String openId) &#123;</div><div class="line">        SNSUserInfo snsUserInfo = null;</div><div class="line">        // 拼接请求地址</div><div class="line">        String requestUrl = &quot;https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&quot;;</div><div class="line">        requestUrl = requestUrl.replace(&quot;ACCESS_TOKEN&quot;, accessToken).replace(&quot;OPENID&quot;, openId);</div><div class="line">        // 通过网页授权获取用户信息</div><div class="line">        JSONObject jsonObject = CommonUtil.httpsRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line"></div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                snsUserInfo = new SNSUserInfo();</div><div class="line">                // 用户的标识</div><div class="line">                snsUserInfo.setOpenId(jsonObject.getString(&quot;openid&quot;));</div><div class="line">                // 昵称</div><div class="line">                snsUserInfo.setNickname(jsonObject.getString(&quot;nickname&quot;));</div><div class="line">                // 性别（1是男性，2是女性，0是未知）</div><div class="line">                snsUserInfo.setSex(jsonObject.getInt(&quot;sex&quot;));</div><div class="line">                // 用户所在国家</div><div class="line">                snsUserInfo.setCountry(jsonObject.getString(&quot;country&quot;));</div><div class="line">                // 用户所在省份</div><div class="line">                snsUserInfo.setProvince(jsonObject.getString(&quot;province&quot;));</div><div class="line">                // 用户所在城市</div><div class="line">                snsUserInfo.setCity(jsonObject.getString(&quot;city&quot;));</div><div class="line">                // 用户头像</div><div class="line">                snsUserInfo.setHeadImgUrl(jsonObject.getString(&quot;headimgurl&quot;));</div><div class="line">                // 用户特权信息</div><div class="line">                snsUserInfo.setPrivilegeList(JSONArray.toList(jsonObject.getJSONArray(&quot;privilege&quot;), List.class));</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                snsUserInfo = null;</div><div class="line">                int errorCode = jsonObject.getInt(&quot;errcode&quot;);</div><div class="line">                String errorMsg = jsonObject.getString(&quot;errmsg&quot;);</div><div class="line">                log.error(&quot;获取用户信息失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, errorCode, errorMsg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return snsUserInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="7-封装https请求类-CommonUtil-类"><a href="#7-封装https请求类-CommonUtil-类" class="headerlink" title="7.封装https请求类 CommonUtil 类"></a>7.封装https请求类 CommonUtil 类</h2><p>https请求的工具</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.security.cert.CertificateException;</div><div class="line">import java.security.cert.X509Certificate;</div><div class="line"></div><div class="line">import javax.net.ssl.X509TrustManager;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 证书信任管理器（用于https请求）</div><div class="line"> * 这个证书管理器的作用就是让它信任我们指定的证书，下面的代码意味着信任所有证书，不管是否权威机构颁发。</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:22:19</div><div class="line"> */</div><div class="line">public class MyX509TrustManager implements X509TrustManager &#123;</div><div class="line"></div><div class="line">    // 检查客户端证书</div><div class="line">    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检查服务器端证书</div><div class="line">    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 返回受信任的X509证书数组</div><div class="line">    public X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 发送https请求</div><div class="line"> * </div><div class="line"> * @param requestUrl</div><div class="line"> *            请求地址</div><div class="line"> * @param requestMethod</div><div class="line"> *            请求方式（GET、POST）</div><div class="line"> * @param outputStr</div><div class="line"> *            提交的数据</div><div class="line"> * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值)</div><div class="line"> */</div><div class="line">public static JSONObject httpsRequest(String requestUrl, String requestMethod, String outputStr) &#123;</div><div class="line">    JSONObject jsonObject = null;</div><div class="line">    try &#123;</div><div class="line">        // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">        TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">        SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">        sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">        // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">        SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">        URL url = new URL(requestUrl);</div><div class="line">        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</div><div class="line">        conn.setSSLSocketFactory(ssf);</div><div class="line"></div><div class="line">        conn.setDoOutput(true);</div><div class="line">        conn.setDoInput(true);</div><div class="line">        conn.setUseCaches(false);</div><div class="line">        // 设置请求方式（GET/POST）</div><div class="line">        conn.setRequestMethod(requestMethod);</div><div class="line"></div><div class="line">        // 当outputStr不为null时向输出流写数据</div><div class="line">        if (null != outputStr) &#123;</div><div class="line">            OutputStream outputStream = conn.getOutputStream();</div><div class="line">            // 注意编码格式</div><div class="line">            outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;));</div><div class="line">            outputStream.close();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 从输入流读取返回内容</div><div class="line">        InputStream inputStream = conn.getInputStream();</div><div class="line">        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);</div><div class="line">        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line">        String str = null;</div><div class="line">        StringBuffer buffer = new StringBuffer();</div><div class="line">        while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">            buffer.append(str);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 释放资源</div><div class="line">        bufferedReader.close();</div><div class="line">        inputStreamReader.close();</div><div class="line">        inputStream.close();</div><div class="line">        inputStream = null;</div><div class="line">        conn.disconnect();</div><div class="line">        jsonObject = JSONObject.fromObject(buffer.toString());</div><div class="line">    &#125; catch (ConnectException ce) &#123;</div><div class="line">        log.error(&quot;连接超时：&#123;&#125;&quot;, ce);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        log.error(&quot;https请求异常：&#123;&#125;&quot;, e);</div><div class="line">    &#125;</div><div class="line">    return jsonObject;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-写授权类："><a href="#8-写授权类：" class="headerlink" title="8.写授权类："></a>8.写授权类：</h2><p>替换成自己的appid 和 密钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.controller;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.SNSUserInfo;</div><div class="line">import com.wyj.wechart.pojo.WeixinOauth2Token;</div><div class="line">import com.wyj.wechart.utils.AdvancedUtil;</div><div class="line">/**</div><div class="line"> * 授权后的回调请求处理</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月27日 下午5:31:09</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">@RequestMapping(&quot;/oauth&quot;)</div><div class="line">public class OAuthController &#123;</div><div class="line"></div><div class="line">    @RequestMapping</div><div class="line">    public ModelAndView index(String code,String state)&#123;</div><div class="line">        ModelAndView mv = new ModelAndView(&quot;/index&quot;);</div><div class="line">        </div><div class="line">        // 用户同意授权</div><div class="line">        if (!&quot;authdeny&quot;.equals(code)) &#123;</div><div class="line">            // 获取网页授权access_token</div><div class="line">            WeixinOauth2Token weixinOauth2Token = AdvancedUtil.getOauth2AccessToken(&quot;wx17fdedc3d6d0b68e&quot;, &quot;c3b3d919d65a781ba7db58d9d8dfb515&quot;, code);</div><div class="line">            // 网页授权接口访问凭证</div><div class="line">            String accessToken = weixinOauth2Token.getAccessToken();</div><div class="line">            // 用户标识</div><div class="line">            String openId = weixinOauth2Token.getOpenId();</div><div class="line">            // 获取用户信息</div><div class="line">            SNSUserInfo snsUserInfo = AdvancedUtil.getSNSUserInfo(accessToken, openId);</div><div class="line">            // 设置要传递的参数</div><div class="line">            mv.addObject(&quot;snsUserInfo&quot;, snsUserInfo);</div><div class="line">            mv.addObject(&quot;state&quot;, state);</div><div class="line">        &#125;</div><div class="line">        return mv;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="9-授权后，显示信息的页面"><a href="#9-授权后，显示信息的页面" class="headerlink" title="9.授权后，显示信息的页面"></a>9.授权后，显示信息的页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;OAuth2.0网页授权&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;#if snsUserInfo??&gt;</div><div class="line">    &lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</div><div class="line">        &lt;tr&gt;&lt;td width=&quot;20%&quot;&gt;属性&lt;/td&gt;&lt;td width=&quot;80%&quot;&gt;值&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;OpenID&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.openId&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;昵称&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.nickname&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;性别&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.sex&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;国家&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.country&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;省份&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.province&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;城市&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.city&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;头像&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.headImgUrl&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">&lt;!--         &lt;tr&gt;&lt;td&gt;特权&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.privilegeList&#125;&lt;/td&gt;&lt;/tr&gt; --&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;state:&lt;/td&gt;&lt;td&gt;$&#123;state&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">	</div><div class="line">	&lt;#else&gt;</div><div class="line">	&lt;p&gt;用户不同意授权,未获取到用户信息！&lt;/p&gt;</div><div class="line">&lt;/#if&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="10-application-properties配置"><a href="#10-application-properties配置" class="headerlink" title="10.application.properties配置"></a>10.application.properties配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server.port=80</div><div class="line"></div><div class="line">spring.freemarker.cache=false</div><div class="line">spring.freemarker.charset=UTF-8</div><div class="line">spring.freemarker.check-template-location=true</div><div class="line">spring.freemarker.content-type=text/html</div><div class="line">spring.freemarker.expose-request-attributes=true</div><div class="line">spring.freemarker.expose-session-attributes=true</div><div class="line">spring.freemarker.request-context-attribute=request</div><div class="line">spring.freemarker.template-loader-path=classpath:/templates</div><div class="line">spring.freemarker.suffix=.html</div><div class="line">spring.mvc.static-path-pattern=/static/**</div></pre></td></tr></table></figure>
<h2 id="11-替换官方的链接成我们的方法路径："><a href="#11-替换官方的链接成我们的方法路径：" class="headerlink" title="11.替换官方的链接成我们的方法路径："></a>11.替换官方的链接成我们的方法路径：</h2><p><strong>官方的请求链接：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</div></pre></td></tr></table></figure>
<p>需要修改的地方：</p>
<p>（1）替换自己的AppID</p>
<p>（2）将redirect_url换成自己的授权请求链接URL。注意这个连接需要经过UTF-8编码。</p>
<p>（3）需要修改scope。需要弹出页面则要修改为snsapi_userinfo 。</p>
<p>scope参数的解释：</p>
<p>1、以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）</p>
<p>2、以snsapi_userinfo为scope发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。 </p>
<p><strong>URL转码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * URL编码（utf-8）</div><div class="line"> * </div><div class="line"> * @param source</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static String urlEncodeUTF8(String source) &#123;</div><div class="line">    String result = source;</div><div class="line">    try &#123;</div><div class="line">        result = java.net.URLEncoder.encode(source, &quot;utf-8&quot;);</div><div class="line">    &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.test;</div><div class="line"></div><div class="line">import com.wyj.wechart.utils.CommonUtil;</div><div class="line">/**</div><div class="line"> * URL转码</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月27日 下午5:35:02</div><div class="line"> */</div><div class="line">public class TransCodeUrlTest &#123;</div><div class="line">    /**</div><div class="line">     * 生成URL编码</div><div class="line">     * </div><div class="line">     * @param args</div><div class="line">     */</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        String source = &quot;http://6400cc45.ngrok.io/oauth&quot;;</div><div class="line">        System.out.println(CommonUtil.urlEncodeUTF8(source));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以直接在线url编码： <a href="http://tool.chinaz.com/Tools/URLEncode.aspx" target="_blank" rel="external">http://tool.chinaz.com/Tools/URLEncode.aspx</a></p>
<h2 id="12-修改网页授权获取用户基本信息"><a href="#12-修改网页授权获取用户基本信息" class="headerlink" title="12.修改网页授权获取用户基本信息"></a>12.修改网页授权获取用户基本信息</h2><p>微信公共平台-&gt;测试号管理-&gt;体验接口权限表-&gt;网页服务-&gt;网页帐号-&gt;修改<br>修改完成后需要重新关注<br><img src="/2018/01/27/微信公共号开发教程java版——微信网页授权-八/a.png" alt="a"><br><img src="/2018/01/27/微信公共号开发教程java版——微信网页授权-八/b.png" alt="b"></p>
<h2 id="13-测试效果："><a href="#13-测试效果：" class="headerlink" title="13.测试效果："></a>13.测试效果：</h2><p>复制上面替换好的链接，然后丢进浏览器，然后用微信来扫一扫。<br><img src="/2018/01/27/微信公共号开发教程java版——微信网页授权-八/c.png" alt="c"><br><img src="/2018/01/27/微信公共号开发教程java版——微信网页授权-八/d.jpg" alt="d"></p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：微信网页授权介绍&quot;&gt;&lt;a href=&quot;#一：微信网页授权介绍&quot; class=&quot;headerlink&quot; title=&quot;一：微信网页授权介绍&quot;&gt;&lt;/a&gt;一：微信网页授权介绍&lt;/h1&gt;&lt;p&gt;官网详细介绍:&lt;a href=&quot;https://mp.weixin.qq.c
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——获取用户基本信息(UnionID机制)(七)</title>
    <link href="http://wangyuanjun.cn/2018/01/27/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF-UnionID%E6%9C%BA%E5%88%B6-%E4%B8%83/"/>
    <id>http://wangyuanjun.cn/2018/01/27/微信公共号开发教程java版——获取用户基本信息-UnionID机制-七/</id>
    <published>2018-01-27T07:14:32.000Z</published>
    <updated>2018-01-27T14:34:06.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：UnionID机制说明"><a href="#一：UnionID机制说明" class="headerlink" title="一：UnionID机制说明"></a>一：UnionID机制说明</h1><p>官网详细介绍:<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140839" target="_blank" rel="external">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140839</a></p>
<h2 id="获取用户基本信息-UnionID机制"><a href="#获取用户基本信息-UnionID机制" class="headerlink" title="获取用户基本信息(UnionID机制)"></a>获取用户基本信息(UnionID机制)</h2><p>在关注者与公众号产生消息交互后，公众号可获得关注者的OpenID（加密后的微信号，每个用户对每个公众号的OpenID是唯一的。对于不同公众号，同一用户的openid不同）。公众号可通过本接口来根据OpenID获取用户基本信息，包括昵称、头像、性别、所在城市、语言和关注时间。</p>
<p>请注意，如果开发者有在多个公众号，或在公众号、移动应用之间统一用户帐号的需求，需要前往微信开放平台（open.weixin.qq.com）绑定公众号后，才可利用UnionID机制来满足上述需求。</p>
<h2 id="UnionID机制说明："><a href="#UnionID机制说明：" class="headerlink" title="UnionID机制说明："></a>UnionID机制说明：</h2><p>开发者可通过OpenID来获取用户基本信息。特别需要注意的是，如果开发者拥有多个移动应用、网站应用和公众帐号，可通过获取用户基本信息中的unionid来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号，用户的unionid是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，unionid是相同的。</p>
<h2 id="获取用户基本信息（包括UnionID机制）"><a href="#获取用户基本信息（包括UnionID机制）" class="headerlink" title="获取用户基本信息（包括UnionID机制）"></a>获取用户基本信息（包括UnionID机制）</h2><p>开发者可通过OpenID来获取用户基本信息。请使用https协议。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">接口调用请求说明</div><div class="line">http请求方式: GET</div><div class="line">https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</div></pre></td></tr></table></figure>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">是否必须</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>access_token</td>
<td style="text-align:right">是</td>
<td style="text-align:center">调用接口凭证</td>
</tr>
<tr>
<td>openid</td>
<td style="text-align:right">是</td>
<td style="text-align:center">普通用户的标识，对当前公众号唯一</td>
</tr>
<tr>
<td>lang</td>
<td style="text-align:right">否</td>
<td style="text-align:center">返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语</td>
</tr>
</tbody>
</table>
<p>返回说明</p>
<p>正常情况下，微信会返回下述JSON数据包给公众号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;subscribe&quot;: 1, </div><div class="line">    &quot;openid&quot;: &quot;o6_bmjrPTlm6_2sgVt7hMZOPfL2M&quot;, </div><div class="line">    &quot;nickname&quot;: &quot;Band&quot;, </div><div class="line">    &quot;sex&quot;: 1, </div><div class="line">    &quot;language&quot;: &quot;zh_CN&quot;, </div><div class="line">    &quot;city&quot;: &quot;广州&quot;, </div><div class="line">    &quot;province&quot;: &quot;广东&quot;, </div><div class="line">    &quot;country&quot;: &quot;中国&quot;, </div><div class="line">    &quot;headimgurl&quot;:&quot;http://wx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/0&quot;,</div><div class="line">    &quot;subscribe_time&quot;: 1382694957,</div><div class="line">    &quot;unionid&quot;: &quot; o6_bmasdasdsad6_2sgVt7hMZOPfL&quot;</div><div class="line">    &quot;remark&quot;: &quot;&quot;,</div><div class="line">    &quot;groupid&quot;: 0,</div><div class="line">    &quot;tagid_list&quot;:[128,2]</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>subscribe</td>
<td>用户是否订阅该公众号标识，值为0时，代表此用户没有关注该公众号，拉取不到其余信息。</td>
</tr>
<tr>
<td>openid</td>
<td>用户的标识，对当前公众号唯一</td>
</tr>
<tr>
<td>nickname</td>
<td>用户的昵称</td>
</tr>
<tr>
<td>sex</td>
<td>用户的性别，值为1时是男性，值为2时是女性，值为0时是未知</td>
</tr>
<tr>
<td>city</td>
<td>用户所在城市</td>
</tr>
<tr>
<td>country</td>
<td>用户所在国家</td>
</tr>
<tr>
<td>province</td>
<td>用户所在省份</td>
</tr>
<tr>
<td>language</td>
<td>用户的语言，简体中文为zh_CN</td>
</tr>
<tr>
<td>headimgurl</td>
<td>用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。</td>
</tr>
<tr>
<td>subscribe_time</td>
<td>用户关注时间，为时间戳。如果用户曾多次关注，则取最后关注时间</td>
</tr>
<tr>
<td>unionid</td>
<td>只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。</td>
</tr>
<tr>
<td>remark</td>
<td>公众号运营者对粉丝的备注，公众号运营者可在微信公众平台用户管理界面对粉丝添加备注</td>
</tr>
<tr>
<td>groupid</td>
<td>用户所在的分组ID（兼容旧的用户分组接口）</td>
</tr>
<tr>
<td>tagid_list</td>
<td>用户被打上的标签ID列表</td>
</tr>
</tbody>
</table>
<p>错误时微信会返回错误码等信息，JSON数据包示例如下（该示例为AppID无效错误）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;errcode&quot;:40013,&quot;errmsg&quot;:&quot;invalid appid&quot;&#125;</div></pre></td></tr></table></figure>
<h1 id="二：封装用户信息"><a href="#二：封装用户信息" class="headerlink" title="二：封装用户信息"></a>二：封装用户信息</h1><h2 id="1-用户的基本信息类"><a href="#1-用户的基本信息类" class="headerlink" title="1.用户的基本信息类"></a>1.用户的基本信息类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 微信用户的基本信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月24日 上午10:05:42</div><div class="line"> */</div><div class="line">public class WeixinUserInfo &#123;</div><div class="line"></div><div class="line">    // 用户的标识</div><div class="line">    private String openId;</div><div class="line"></div><div class="line">    // 关注状态（1是关注，0是未关注），未关注时获取不到其余信息</div><div class="line">    private int subscribe;</div><div class="line"></div><div class="line">    // 用户关注时间，为时间戳。如果用户曾多次关注，则取最后关注时间</div><div class="line">    private String subscribeTime;</div><div class="line"></div><div class="line">    // 昵称</div><div class="line">    private String nickname;</div><div class="line"></div><div class="line">    // 用户的性别（1是男性，2是女性，0是未知）</div><div class="line">    private int sex;</div><div class="line"></div><div class="line">    // 用户所在国家</div><div class="line">    private String country;</div><div class="line"></div><div class="line">    // 用户所在省份</div><div class="line">    private String province;</div><div class="line"></div><div class="line">    // 用户所在城市</div><div class="line">    private String city;</div><div class="line"></div><div class="line">    // 用户的语言，简体中文为zh_CN</div><div class="line">    private String language;</div><div class="line"></div><div class="line">    // 用户头像</div><div class="line">    private String headImgUrl;</div><div class="line"></div><div class="line">    public String getOpenId() &#123;</div><div class="line">        return openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setOpenId(String openId) &#123;</div><div class="line">        this.openId = openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSubscribe() &#123;</div><div class="line">        return subscribe;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubscribe(int subscribe) &#123;</div><div class="line">        this.subscribe = subscribe;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSubscribeTime() &#123;</div><div class="line">        return subscribeTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubscribeTime(String subscribeTime) &#123;</div><div class="line">        this.subscribeTime = subscribeTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getNickname() &#123;</div><div class="line">        return nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setNickname(String nickname) &#123;</div><div class="line">        this.nickname = nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSex() &#123;</div><div class="line">        return sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSex(int sex) &#123;</div><div class="line">        this.sex = sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCountry() &#123;</div><div class="line">        return country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCountry(String country) &#123;</div><div class="line">        this.country = country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getProvince() &#123;</div><div class="line">        return province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setProvince(String province) &#123;</div><div class="line">        this.province = province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCity() &#123;</div><div class="line">        return city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCity(String city) &#123;</div><div class="line">        this.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLanguage() &#123;</div><div class="line">        return language;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLanguage(String language) &#123;</div><div class="line">        this.language = language;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getHeadImgUrl() &#123;</div><div class="line">        return headImgUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setHeadImgUrl(String headImgUrl) &#123;</div><div class="line">        this.headImgUrl = headImgUrl;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们先来看看获取用户信息的接口：<br><a href="https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN" target="_blank" rel="external">https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</a><br>根据分析，获取用户的基本信息需要一个token。</p>
<h2 id="创建token类"><a href="#创建token类" class="headerlink" title="创建token类"></a>创建token类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * 凭证</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:19:14</div><div class="line"> */</div><div class="line">public class Token &#123;</div><div class="line"></div><div class="line">    // 接口访问凭证</div><div class="line">    private String accessToken;</div><div class="line"></div><div class="line">    // 凭证有效期，单位：秒</div><div class="line">    private int expiresIn;</div><div class="line"></div><div class="line">    public String getAccessToken() &#123;</div><div class="line">        return accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAccessToken(String accessToken) &#123;</div><div class="line">        this.accessToken = accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getExpiresIn() &#123;</div><div class="line">        return expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setExpiresIn(int expiresIn) &#123;</div><div class="line">        this.expiresIn = expiresIn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建信任管理器"><a href="#创建信任管理器" class="headerlink" title="创建信任管理器"></a>创建信任管理器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.security.cert.CertificateException;</div><div class="line">import java.security.cert.X509Certificate;</div><div class="line"></div><div class="line">import javax.net.ssl.X509TrustManager;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 证书信任管理器（用于https请求）</div><div class="line"> * 这个证书管理器的作用就是让它信任我们指定的证书，下面的代码意味着信任所有证书，不管是否权威机构颁发。</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:22:19</div><div class="line"> */</div><div class="line">public class MyX509TrustManager implements X509TrustManager &#123;</div><div class="line"></div><div class="line">    // 检查客户端证书</div><div class="line">    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检查服务器端证书</div><div class="line">    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 返回受信任的X509证书数组</div><div class="line">    public X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="封装了一个公共类："><a href="#封装了一个公共类：" class="headerlink" title="封装了一个公共类："></a>封装了一个公共类：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStream;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.net.ConnectException;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">import javax.net.ssl.HttpsURLConnection;</div><div class="line">import javax.net.ssl.SSLContext;</div><div class="line">import javax.net.ssl.SSLSocketFactory;</div><div class="line">import javax.net.ssl.TrustManager;</div><div class="line"></div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.Token;</div><div class="line">import com.wyj.wechart.pojo.WeixinUserInfo;</div><div class="line"></div><div class="line">import net.sf.json.JSONException;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 通用工具类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:36:50</div><div class="line"> */</div><div class="line">public class CommonUtil &#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(CommonUtil.class);</div><div class="line"></div><div class="line">    // 凭证获取（GET）</div><div class="line">    public final static String token_url = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 发送https请求</div><div class="line">     * </div><div class="line">     * @param requestUrl</div><div class="line">     *            请求地址</div><div class="line">     * @param requestMethod</div><div class="line">     *            请求方式（GET、POST）</div><div class="line">     * @param outputStr</div><div class="line">     *            提交的数据</div><div class="line">     * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值)</div><div class="line">     */</div><div class="line">    public static JSONObject httpsRequest(String requestUrl, String requestMethod, String outputStr) &#123;</div><div class="line">        JSONObject jsonObject = null;</div><div class="line">        try &#123;</div><div class="line">            // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">            TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">            SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">            sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">            // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">            SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">            URL url = new URL(requestUrl);</div><div class="line">            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</div><div class="line">            conn.setSSLSocketFactory(ssf);</div><div class="line"></div><div class="line">            conn.setDoOutput(true);</div><div class="line">            conn.setDoInput(true);</div><div class="line">            conn.setUseCaches(false);</div><div class="line">            // 设置请求方式（GET/POST）</div><div class="line">            conn.setRequestMethod(requestMethod);</div><div class="line"></div><div class="line">            // 当outputStr不为null时向输出流写数据</div><div class="line">            if (null != outputStr) &#123;</div><div class="line">                OutputStream outputStream = conn.getOutputStream();</div><div class="line">                // 注意编码格式</div><div class="line">                outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;));</div><div class="line">                outputStream.close();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 从输入流读取返回内容</div><div class="line">            InputStream inputStream = conn.getInputStream();</div><div class="line">            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);</div><div class="line">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line">            String str = null;</div><div class="line">            StringBuffer buffer = new StringBuffer();</div><div class="line">            while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">                buffer.append(str);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 释放资源</div><div class="line">            bufferedReader.close();</div><div class="line">            inputStreamReader.close();</div><div class="line">            inputStream.close();</div><div class="line">            inputStream = null;</div><div class="line">            conn.disconnect();</div><div class="line">            jsonObject = JSONObject.fromObject(buffer.toString());</div><div class="line">        &#125; catch (ConnectException ce) &#123;</div><div class="line">            log.error(&quot;连接超时：&#123;&#125;&quot;, ce);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(&quot;https请求异常：&#123;&#125;&quot;, e);</div><div class="line">        &#125;</div><div class="line">        return jsonObject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取接口访问凭证</div><div class="line">     * </div><div class="line">     * @param appid</div><div class="line">     *            凭证</div><div class="line">     * @param appsecret</div><div class="line">     *            密钥</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static Token getToken(String appid, String appsecret) &#123;</div><div class="line">        Token token = null;</div><div class="line">        String requestUrl = token_url.replace(&quot;APPID&quot;, appid).replace(&quot;APPSECRET&quot;, appsecret);</div><div class="line">        // 发起GET请求获取凭证</div><div class="line">        JSONObject jsonObject = httpsRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line"></div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                token = new Token();</div><div class="line">                token.setAccessToken(jsonObject.getString(&quot;access_token&quot;));</div><div class="line">                token.setExpiresIn(jsonObject.getInt(&quot;expires_in&quot;));</div><div class="line">            &#125; catch (JSONException e) &#123;</div><div class="line">                token = null;</div><div class="line">                // 获取token失败</div><div class="line">                log.error(&quot;获取token失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, jsonObject.getInt(&quot;errcode&quot;), jsonObject.getString(&quot;errmsg&quot;));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * URL编码（utf-8）</div><div class="line">     * </div><div class="line">     * @param source</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static String urlEncodeUTF8(String source) &#123;</div><div class="line">        String result = source;</div><div class="line">        try &#123;</div><div class="line">            result = java.net.URLEncoder.encode(source, &quot;utf-8&quot;);</div><div class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据内容类型判断文件扩展名</div><div class="line">     * </div><div class="line">     * @param contentType</div><div class="line">     *            内容类型</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static String getFileExt(String contentType) &#123;</div><div class="line">        String fileExt = &quot;&quot;;</div><div class="line">        if (&quot;image/jpeg&quot;.equals(contentType))</div><div class="line">            fileExt = &quot;.jpg&quot;;</div><div class="line">        else if (&quot;audio/mpeg&quot;.equals(contentType))</div><div class="line">            fileExt = &quot;.mp3&quot;;</div><div class="line">        else if (&quot;audio/amr&quot;.equals(contentType))</div><div class="line">            fileExt = &quot;.amr&quot;;</div><div class="line">        else if (&quot;video/mp4&quot;.equals(contentType))</div><div class="line">            fileExt = &quot;.mp4&quot;;</div><div class="line">        else if (&quot;video/mpeg4&quot;.equals(contentType))</div><div class="line">            fileExt = &quot;.mp4&quot;;</div><div class="line">        return fileExt;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取用户信息</div><div class="line">     * </div><div class="line">     * @param accessToken 接口访问凭证</div><div class="line">     * @param openId 用户标识</div><div class="line">     * @return WeixinUserInfo</div><div class="line">     */</div><div class="line">    public static WeixinUserInfo getUserInfo(String accessToken, String openId) &#123;</div><div class="line">        WeixinUserInfo weixinUserInfo = null;</div><div class="line">        // 拼接请求地址</div><div class="line">        String requestUrl = &quot;https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&amp;openid=OPENID&quot;;</div><div class="line">        requestUrl = requestUrl.replace(&quot;ACCESS_TOKEN&quot;, accessToken).replace(&quot;OPENID&quot;, openId);</div><div class="line">        // 获取用户信息</div><div class="line">        JSONObject jsonObject = CommonUtil.httpsRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line"></div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                weixinUserInfo = new WeixinUserInfo();</div><div class="line">                // 用户的标识</div><div class="line">                weixinUserInfo.setOpenId(jsonObject.getString(&quot;openid&quot;));</div><div class="line">                // 关注状态（1是关注，0是未关注），未关注时获取不到其余信息</div><div class="line">                weixinUserInfo.setSubscribe(jsonObject.getInt(&quot;subscribe&quot;));</div><div class="line">                // 用户关注时间</div><div class="line">                weixinUserInfo.setSubscribeTime(jsonObject.getString(&quot;subscribe_time&quot;));</div><div class="line">                // 昵称</div><div class="line">                weixinUserInfo.setNickname(jsonObject.getString(&quot;nickname&quot;));</div><div class="line">                // 用户的性别（1是男性，2是女性，0是未知）</div><div class="line">                weixinUserInfo.setSex(jsonObject.getInt(&quot;sex&quot;));</div><div class="line">                // 用户所在国家</div><div class="line">                weixinUserInfo.setCountry(jsonObject.getString(&quot;country&quot;));</div><div class="line">                // 用户所在省份</div><div class="line">                weixinUserInfo.setProvince(jsonObject.getString(&quot;province&quot;));</div><div class="line">                // 用户所在城市</div><div class="line">                weixinUserInfo.setCity(jsonObject.getString(&quot;city&quot;));</div><div class="line">                // 用户的语言，简体中文为zh_CN</div><div class="line">                weixinUserInfo.setLanguage(jsonObject.getString(&quot;language&quot;));</div><div class="line">                // 用户头像</div><div class="line">                weixinUserInfo.setHeadImgUrl(jsonObject.getString(&quot;headimgurl&quot;));</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                if (0 == weixinUserInfo.getSubscribe()) &#123;</div><div class="line">                    log.error(&quot;用户&#123;&#125;已取消关注&quot;, weixinUserInfo.getOpenId());</div><div class="line">                &#125; else &#123;</div><div class="line">                    int errorCode = jsonObject.getInt(&quot;errcode&quot;);</div><div class="line">                    String errorMsg = jsonObject.getString(&quot;errmsg&quot;);</div><div class="line">                    log.error(&quot;获取用户信息失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, errorCode, errorMsg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return weixinUserInfo;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p>替换为自己的appid和秘钥。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.test;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.WeixinUserInfo;</div><div class="line">import com.wyj.wechart.utils.CommonUtil;</div><div class="line"></div><div class="line">public class WeixinUserInfoTest &#123;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testWeixinUserInfo() &#123;</div><div class="line"></div><div class="line">        // 获取接口访问凭证(替换为自己的appid和秘钥。)</div><div class="line">        String accessToken = CommonUtil.getToken(&quot;xxxx&quot;, &quot;xxxx&quot;).getAccessToken();</div><div class="line">        /**</div><div class="line">         * 获取用户信息</div><div class="line">         */</div><div class="line">        WeixinUserInfo user = CommonUtil.getUserInfo(accessToken, &quot;OpenID&quot;);</div><div class="line">        System.out.println(&quot;OpenID：&quot; + user.getOpenId());</div><div class="line">        System.out.println(&quot;关注状态：&quot; + user.getSubscribe());</div><div class="line">        System.out.println(&quot;关注时间：&quot; + user.getSubscribeTime());</div><div class="line">        System.out.println(&quot;昵称：&quot; + user.getNickname());</div><div class="line">        System.out.println(&quot;性别：&quot; + user.getSex());</div><div class="line">        System.out.println(&quot;国家：&quot; + user.getCountry());</div><div class="line">        System.out.println(&quot;省份：&quot; + user.getProvince());</div><div class="line">        System.out.println(&quot;城市：&quot; + user.getCity());</div><div class="line">        System.out.println(&quot;语言：&quot; + user.getLanguage());</div><div class="line">        System.out.println(&quot;头像：&quot; + user.getHeadImgUrl());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下： </p>
<p><img src="/2018/01/27/微信公共号开发教程java版——获取用户基本信息-UnionID机制-七/userInfo.png" alt="userInfo"></p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：UnionID机制说明&quot;&gt;&lt;a href=&quot;#一：UnionID机制说明&quot; class=&quot;headerlink&quot; title=&quot;一：UnionID机制说明&quot;&gt;&lt;/a&gt;一：UnionID机制说明&lt;/h1&gt;&lt;p&gt;官网详细介绍:&lt;a href=&quot;https://mp
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——实现自定义菜单(六)</title>
    <link href="http://wangyuanjun.cn/2018/01/26/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8F%9C%E5%8D%95-%E5%85%AD/"/>
    <id>http://wangyuanjun.cn/2018/01/26/微信公共号开发教程java版——实现自定义菜单-六/</id>
    <published>2018-01-26T09:22:56.000Z</published>
    <updated>2018-01-27T14:33:56.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：自定义菜单文档说明"><a href="#一：自定义菜单文档说明" class="headerlink" title="一：自定义菜单文档说明"></a>一：自定义菜单文档说明</h1><p>自定义菜单能够帮助公众号丰富界面，让用户更好更快地理解公众号的功能。开启自定义菜单后，公众号界面如图所示：<br>官网详细介绍:<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141013" target="_blank" rel="external">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141013</a><br><strong>请注意：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、自定义菜单最多包括3个一级菜单，每个一级菜单最多包含5个二级菜单。</div><div class="line">2、一级菜单最多4个汉字，二级菜单最多7个汉字，多出来的部分将会以“...”代替。</div><div class="line">3、创建自定义菜单后，菜单的刷新策略是，在用户进入公众号会话页或公众号profile页时，如果发现上一次拉取菜单的请求在5分钟以前，就会拉取一下菜单，如果菜单有更新，就会刷新客户端的菜单。测试时可以尝试取消关注公众账号后再次关注，则可以看到创建后的效果。</div></pre></td></tr></table></figure>
<p><strong>自定义菜单接口可实现多种类型按钮，如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1、click：点击推事件用户点击click类型按钮后，微信服务器会通过消息接口推送消息类型为event的结构给开发者（参考消息接口指南），并且带上按钮中开发者填写的key值，开发者可以通过自定义的key值与用户进行交互；</div><div class="line">2、view：跳转URL用户点击view类型按钮后，微信客户端将会打开开发者在按钮中填写的网页URL，可与网页授权获取用户基本信息接口结合，获得用户基本信息。</div><div class="line">3、scancode_push：扫码推事件用户点击按钮后，微信客户端将调起扫一扫工具，完成扫码操作后显示扫描结果（如果是URL，将进入URL），且会将扫码的结果传给开发者，开发者可以下发消息。</div><div class="line">4、scancode_waitmsg：扫码推事件且弹出“消息接收中”提示框用户点击按钮后，微信客户端将调起扫一扫工具，完成扫码操作后，将扫码的结果传给开发者，同时收起扫一扫工具，然后弹出“消息接收中”提示框，随后可能会收到开发者下发的消息。</div><div class="line">5、pic_sysphoto：弹出系统拍照发图用户点击按钮后，微信客户端将调起系统相机，完成拍照操作后，会将拍摄的相片发送给开发者，并推送事件给开发者，同时收起系统相机，随后可能会收到开发者下发的消息。</div><div class="line">6、pic_photo_or_album：弹出拍照或者相册发图用户点击按钮后，微信客户端将弹出选择器供用户选择“拍照”或者“从手机相册选择”。用户选择后即走其他两种流程。</div><div class="line">7、pic_weixin：弹出微信相册发图器用户点击按钮后，微信客户端将调起微信相册，完成选择操作后，将选择的相片发送给开发者的服务器，并推送事件给开发者，同时收起相册，随后可能会收到开发者下发的消息。</div><div class="line">8、location_select：弹出地理位置选择器用户点击按钮后，微信客户端将调起地理位置选择工具，完成选择操作后，将选择的地理位置发送给开发者的服务器，同时收起位置选择工具，随后可能会收到开发者下发的消息。</div><div class="line">9、media_id：下发消息（除文本消息）用户点击media_id类型按钮后，微信服务器会将开发者填写的永久素材id对应的素材下发给用户，永久素材类型可以是图片、音频、视频、图文消息。请注意：永久素材id必须是在“素材管理/新增永久素材”接口上传后获得的合法id。</div><div class="line">10、view_limited：跳转图文消息URL用户点击view_limited类型按钮后，微信客户端将打开开发者在按钮中填写的永久素材id对应的图文消息URL，永久素材类型只支持图文消息。请注意：永久素材id必须是在“素材管理/新增永久素材”接口上传后获得的合法id。</div></pre></td></tr></table></figure>
<p><strong>请注意，3到8的所有事件，仅支持微信iPhone5.4.1以上版本，和Android5.4以上版本的微信用户，旧版本微信用户点击后将没有回应，开发者也不能正常接收到事件推送。9和10，是专门给第三方平台旗下未微信认证（具体而言，是资质认证未通过）的订阅号准备的事件类型，它们是没有事件推送的，能力相对受限，其他类型的公众号不必使用。</strong></p>
<h2 id="接口调用请求说明"><a href="#接口调用请求说明" class="headerlink" title="接口调用请求说明"></a>接口调用请求说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http请求方式：POST（请使用https协议） https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN</div></pre></td></tr></table></figure>
<h2 id="click和view的请求示例"><a href="#click和view的请求示例" class="headerlink" title="click和view的请求示例"></a>click和view的请求示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;button&quot;:[</div><div class="line">    &#123;    </div><div class="line">         &quot;type&quot;:&quot;click&quot;,</div><div class="line">         &quot;name&quot;:&quot;今日歌曲&quot;,</div><div class="line">         &quot;key&quot;:&quot;V1001_TODAY_MUSIC&quot;</div><div class="line">     &#125;,</div><div class="line">     &#123;</div><div class="line">          &quot;name&quot;:&quot;菜单&quot;,</div><div class="line">          &quot;sub_button&quot;:[</div><div class="line">          &#123;    </div><div class="line">              &quot;type&quot;:&quot;view&quot;,</div><div class="line">              &quot;name&quot;:&quot;搜索&quot;,</div><div class="line">              &quot;url&quot;:&quot;http://www.soso.com/&quot;</div><div class="line">           &#125;,</div><div class="line">           &#123;</div><div class="line">                &quot;type&quot;:&quot;miniprogram&quot;,</div><div class="line">                &quot;name&quot;:&quot;wxa&quot;,</div><div class="line">                &quot;url&quot;:&quot;http://mp.weixin.qq.com&quot;,</div><div class="line">                &quot;appid&quot;:&quot;wx286b93c14bbf93aa&quot;,</div><div class="line">                &quot;pagepath&quot;:&quot;pages/lunar/index&quot;</div><div class="line">            &#125;,</div><div class="line">           &#123;</div><div class="line">              &quot;type&quot;:&quot;click&quot;,</div><div class="line">              &quot;name&quot;:&quot;赞一下我们&quot;,</div><div class="line">              &quot;key&quot;:&quot;V1001_GOOD&quot;</div><div class="line">           &#125;]</div><div class="line">      &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;button&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;name&quot;: &quot;扫码&quot;, </div><div class="line">            &quot;sub_button&quot;: [</div><div class="line">                &#123;</div><div class="line">                    &quot;type&quot;: &quot;scancode_waitmsg&quot;, </div><div class="line">                    &quot;name&quot;: &quot;扫码带提示&quot;, </div><div class="line">                    &quot;key&quot;: &quot;rselfmenu_0_0&quot;, </div><div class="line">                    &quot;sub_button&quot;: [ ]</div><div class="line">                &#125;, </div><div class="line">                &#123;</div><div class="line">                    &quot;type&quot;: &quot;scancode_push&quot;, </div><div class="line">                    &quot;name&quot;: &quot;扫码推事件&quot;, </div><div class="line">                    &quot;key&quot;: &quot;rselfmenu_0_1&quot;, </div><div class="line">                    &quot;sub_button&quot;: [ ]</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;, </div><div class="line">        &#123;</div><div class="line">            &quot;name&quot;: &quot;发图&quot;, </div><div class="line">            &quot;sub_button&quot;: [</div><div class="line">                &#123;</div><div class="line">                    &quot;type&quot;: &quot;pic_sysphoto&quot;, </div><div class="line">                    &quot;name&quot;: &quot;系统拍照发图&quot;, </div><div class="line">                    &quot;key&quot;: &quot;rselfmenu_1_0&quot;, </div><div class="line">                   &quot;sub_button&quot;: [ ]</div><div class="line">                 &#125;, </div><div class="line">                &#123;</div><div class="line">                    &quot;type&quot;: &quot;pic_photo_or_album&quot;, </div><div class="line">                    &quot;name&quot;: &quot;拍照或者相册发图&quot;, </div><div class="line">                    &quot;key&quot;: &quot;rselfmenu_1_1&quot;, </div><div class="line">                    &quot;sub_button&quot;: [ ]</div><div class="line">                &#125;, </div><div class="line">                &#123;</div><div class="line">                    &quot;type&quot;: &quot;pic_weixin&quot;, </div><div class="line">                    &quot;name&quot;: &quot;微信相册发图&quot;, </div><div class="line">                    &quot;key&quot;: &quot;rselfmenu_1_2&quot;, </div><div class="line">                    &quot;sub_button&quot;: [ ]</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;, </div><div class="line">        &#123;</div><div class="line">            &quot;name&quot;: &quot;发送位置&quot;, </div><div class="line">            &quot;type&quot;: &quot;location_select&quot;, </div><div class="line">            &quot;key&quot;: &quot;rselfmenu_2_0&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">           &quot;type&quot;: &quot;media_id&quot;, </div><div class="line">           &quot;name&quot;: &quot;图片&quot;, </div><div class="line">           &quot;media_id&quot;: &quot;MEDIA_ID1&quot;</div><div class="line">        &#125;, </div><div class="line">        &#123;</div><div class="line">           &quot;type&quot;: &quot;view_limited&quot;, </div><div class="line">           &quot;name&quot;: &quot;图文消息&quot;, </div><div class="line">           &quot;media_id&quot;: &quot;MEDIA_ID2&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">是否必须</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>button</td>
<td style="text-align:right">是</td>
<td style="text-align:center">一级菜单数组，个数应为1~3个</td>
</tr>
<tr>
<td>sub_button</td>
<td style="text-align:right">否</td>
<td style="text-align:center">二级菜单数组，个数应为1~5个</td>
</tr>
<tr>
<td>type</td>
<td style="text-align:right">是</td>
<td style="text-align:center">菜单的响应动作类型，view表示网页类型，click表示点击类型，miniprogram表示小程序类型</td>
</tr>
<tr>
<td>name</td>
<td style="text-align:right">是</td>
<td style="text-align:center">菜单标题，不超过16个字节，子菜单不超过60个字节</td>
</tr>
<tr>
<td>key</td>
<td style="text-align:right">click等点击类型必须</td>
<td style="text-align:center">菜单KEY值，用于消息接口推送，不超过128字节</td>
</tr>
<tr>
<td>url</td>
<td style="text-align:right">view、miniprogram类型必须</td>
<td style="text-align:center">网页 链接，用户点击菜单可打开链接，不超过1024字节。 type为miniprogram时，不支持小程序的老版本客户端将打开本url</td>
</tr>
<tr>
<td>media_id</td>
<td style="text-align:right">media_id类型和view_limited类型必须</td>
<td style="text-align:center">调用新增永久素材接口返回的合法media_id</td>
</tr>
<tr>
<td>appid</td>
<td style="text-align:right">miniprogram类型必须</td>
<td style="text-align:center">小程序的appid（仅认证公众号可配置）</td>
</tr>
<tr>
<td>pagepath</td>
<td style="text-align:right">miniprogram类型必须</td>
<td style="text-align:center">小程序的页面路径</td>
</tr>
</tbody>
</table>
<p>返回结果</p>
<p>正确时的返回JSON数据包如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;errcode&quot;:0,&quot;errmsg&quot;:&quot;ok&quot;&#125;</div></pre></td></tr></table></figure>
<p>错误时的返回JSON数据包如下（示例为无效菜单名长度）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;errcode&quot;:40018,&quot;errmsg&quot;:&quot;invalid button name size&quot;&#125;</div></pre></td></tr></table></figure>
<p>使用网页调试工具调试该接口：<a href="https://mp.weixin.qq.com/debug/cgi-bin/apiinfo?t=index&amp;type=%E5%9F%BA%E7%A1%80%E6%94%AF%E6%8C%81&amp;form=%E8%8E%B7%E5%8F%96access_token%E6%8E%A5%E5%8F%A3%20/token" target="_blank" rel="external">网页调试工具</a></p>
<h1 id="二：菜单的封装"><a href="#二：菜单的封装" class="headerlink" title="二：菜单的封装"></a>二：菜单的封装</h1><p>接下来是对菜单结构的封装。<font color="red">因为我们是采用面向对象的编程方式，最终提交的json格式菜单数据就应该是由对象直接转换得到，而不是在程序代码中拼一大堆json数据。菜单结构封装的依据是公众平台API文档中给出的那一段json格式的菜单结构，如下所示：</font></p>
<h2 id="1-菜单项的基类"><a href="#1-菜单项的基类" class="headerlink" title="1.菜单项的基类"></a>1.菜单项的基类</h2><p>首先是 菜单项的基类，所有一级菜单、二级菜单都共有一个相同的属性，那就是name。菜单项基类的封装代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.menu;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 菜单项的基类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:52:28</div><div class="line"> */</div><div class="line">public class Button &#123;</div><div class="line"></div><div class="line">    private String name;// 所有一级菜单、二级菜单都共有一个相同的属性，那就是name</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-子菜单项的封装"><a href="#2-子菜单项的封装" class="headerlink" title="2.子菜单项的封装"></a>2.子菜单项的封装</h2><p>接着是子菜单项的封装。这里对子菜单是这样定义的：没有子菜单的菜单项，有可能是二级菜单项，也有可能是不含二级菜单的一级菜单。这类子菜单项一定会包含三个属性：type、name和key，封装的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.menu;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 子菜单项 :没有子菜单的菜单项，有可能是二级菜单项，也有可能是不含二级菜单的一级菜单。</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:54:53</div><div class="line"> */</div><div class="line">public class CommonButton extends Button &#123;</div><div class="line"></div><div class="line">    // 菜单的响应动作类型，view表示网页类型，click表示点击类型，miniprogram表示小程序类型</div><div class="line">    private String type;</div><div class="line"></div><div class="line">    // 菜单KEY值，用于消息接口推送，不超过128字节</div><div class="line">    private String key;</div><div class="line"></div><div class="line">    private String url;</div><div class="line"></div><div class="line">    public String getType() &#123;</div><div class="line">        return type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setType(String type) &#123;</div><div class="line">        this.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getKey() &#123;</div><div class="line">        return key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setKey(String key) &#123;</div><div class="line">        this.key = key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUrl() &#123;</div><div class="line">        return url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUrl(String url) &#123;</div><div class="line">        this.url = url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-父菜单项的封装"><a href="#3-父菜单项的封装" class="headerlink" title="3.父菜单项的封装"></a>3.父菜单项的封装</h2><p> 再往下是父菜单项的封装。对父菜单项的定义：包含有二级菜单项的一级菜单。这类菜单项包含有二个属性：name和sub_button，而sub_button以是一个子菜单项数组。父菜单项的封装代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.menu;</div><div class="line">/**</div><div class="line"> * 父菜单项 :包含有二级菜单项的一级菜单。这类菜单项包含有二个属性：name和sub_button，而sub_button以是一个子菜单项数组</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:59:04</div><div class="line"> */</div><div class="line">public class ComplexButton extends Button &#123;</div><div class="line">    </div><div class="line">    private Button[] sub_button;</div><div class="line"></div><div class="line">    public Button[] getSub_button() &#123;</div><div class="line">        return sub_button;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSub_button(Button[] sub_button) &#123;</div><div class="line">        this.sub_button = sub_button;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-菜单对象的封装"><a href="#4-菜单对象的封装" class="headerlink" title="4.菜单对象的封装"></a>4.菜单对象的封装</h2><p>最后是整个菜单对象的封装，菜单对象包含多个菜单项（最多只能有3个），这些菜单项即可以是子菜单项（不含二级菜单的一级菜单），也可以是父菜单项（包含二级菜单的菜单项），如果能明白上面所讲的，再来看封装后的代码就很容易理解了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.menu;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 整个菜单对象的封装</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:59:46</div><div class="line"> */</div><div class="line">public class Menu &#123;</div><div class="line"></div><div class="line">    private Button[] button;</div><div class="line"></div><div class="line">    public Button[] getButton() &#123;</div><div class="line">        return button;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setButton(Button[] button) &#123;</div><div class="line">        this.button = button;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于菜单的POJO类的封装就介绍完了。</p>
<h2 id="5-接口凭证的封装"><a href="#5-接口凭证的封装" class="headerlink" title="5.接口凭证的封装"></a>5.接口凭证的封装</h2><p>AccessToken 的POJO的封装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 微信通用接口凭证</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午4:01:12</div><div class="line"> */</div><div class="line">public class AccessToken &#123;</div><div class="line"></div><div class="line">    // 获取到的凭证</div><div class="line">    private String token;</div><div class="line"></div><div class="line">    // 凭证有效时间，单位：秒</div><div class="line">    private int expiresIn;</div><div class="line"></div><div class="line">    public String getToken() &#123;</div><div class="line">        return token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setToken(String token) &#123;</div><div class="line">        this.token = token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getExpiresIn() &#123;</div><div class="line">        return expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setExpiresIn(int expiresIn) &#123;</div><div class="line">        this.expiresIn = expiresIn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>封装通用的请求方法</p>
<p>读到这里，就默认大家已经掌握了上面讲到的所有关于自定义菜单的理论知识，下面就进入代码实战讲解的部分。</p>
<p>先前我们了解到，创建菜单需要调用二个接口，并且都是https请求，而非http。如果要封装一个通用的请求方法，该方法至少需要具备以下能力：</p>
<p>1）支持HTTPS请求；</p>
<p>2）支持GET、POST两种方式；</p>
<p>3）支持参数提交，也支持无参数的情况；</p>
<h2 id="6-创建证书信任管理器"><a href="#6-创建证书信任管理器" class="headerlink" title="6.创建证书信任管理器"></a>6.创建证书信任管理器</h2><p>对于https请求，我们需要一个证书信任管理器，这个管理器类需要自己定义，但需要实现X509TrustManager接口，代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.security.cert.CertificateException;</div><div class="line">import java.security.cert.X509Certificate;</div><div class="line"></div><div class="line">import javax.net.ssl.X509TrustManager;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 证书信任管理器（用于https请求）</div><div class="line"> * 这个证书管理器的作用就是让它信任我们指定的证书，下面的代码意味着信任所有证书，不管是否权威机构颁发。</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:22:19</div><div class="line"> */</div><div class="line">public class MyX509TrustManager implements X509TrustManager &#123;</div><div class="line"></div><div class="line">    // 检查客户端证书</div><div class="line">    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检查服务器端证书</div><div class="line">    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 返回受信任的X509证书数组</div><div class="line">    public X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个证书管理器的作用就是让它信任我们指定的证书，上面的代码意味着信任所有证书，不管是否权威机构颁发。</p>
<h2 id="7-https请求方法实现"><a href="#7-https请求方法实现" class="headerlink" title="7.https请求方法实现"></a>7.https请求方法实现</h2><p>证书有了，通用的https请求方法就不难实现了，实现代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStream;</div><div class="line">import java.net.ConnectException;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">import javax.net.ssl.HttpsURLConnection;</div><div class="line">import javax.net.ssl.SSLContext;</div><div class="line">import javax.net.ssl.SSLSocketFactory;</div><div class="line">import javax.net.ssl.TrustManager;</div><div class="line"></div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.wyj.wechart.menu.Menu;</div><div class="line">import com.wyj.wechart.pojo.AccessToken;</div><div class="line"></div><div class="line">import net.sf.json.JSONException;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 公众平台通用接口工具类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午4:06:13</div><div class="line"> */</div><div class="line">public class WeixinUtil &#123;</div><div class="line"></div><div class="line">    private static Logger log = LoggerFactory.getLogger(WeixinUtil.class);</div><div class="line"></div><div class="line">    // 获取access_token的接口地址（GET） 限200（次/天）</div><div class="line">    public final static String access_token_url = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&quot;;</div><div class="line"></div><div class="line">    // 菜单创建（POST） 限100（次/天）</div><div class="line">    public static String menu_create_url = &quot;https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 创建菜单</div><div class="line">     * </div><div class="line">     * @param menu</div><div class="line">     *            菜单实例</div><div class="line">     * @param accessToken</div><div class="line">     *            有效的access_token</div><div class="line">     * @return 0表示成功，其他值表示失败</div><div class="line">     */</div><div class="line">    public static int createMenu(Menu menu, String accessToken) &#123;</div><div class="line">        int result = 0;</div><div class="line">        // 拼装创建菜单的url</div><div class="line">        String url = menu_create_url.replace(&quot;ACCESS_TOKEN&quot;, accessToken);</div><div class="line">        // 将菜单对象转换成json字符串</div><div class="line">        String jsonMenu = JSONObject.fromObject(menu).toString();</div><div class="line">        // 调用接口创建菜单</div><div class="line">        JSONObject jsonObject = httpRequest(url, &quot;POST&quot;, jsonMenu);</div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            if (0 != jsonObject.getInt(&quot;errcode&quot;)) &#123;</div><div class="line">                result = jsonObject.getInt(&quot;errcode&quot;);</div><div class="line">                log.error(&quot;创建菜单失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, jsonObject.getInt(&quot;errcode&quot;), jsonObject.getString(&quot;errmsg&quot;));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取access_token</div><div class="line">     * </div><div class="line">     * @param appid</div><div class="line">     *            凭证</div><div class="line">     * @param appsecret</div><div class="line">     *            密钥</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static AccessToken getAccessToken(String appid, String appsecret) &#123;</div><div class="line">        AccessToken accessToken = null;</div><div class="line"></div><div class="line">        String requestUrl = access_token_url.replace(&quot;APPID&quot;, appid).replace(&quot;APPSECRET&quot;, appsecret);</div><div class="line">        JSONObject jsonObject = httpRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line">        // 如果请求成功</div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                accessToken = new AccessToken();</div><div class="line">                accessToken.setToken(jsonObject.getString(&quot;access_token&quot;));</div><div class="line">                accessToken.setExpiresIn(jsonObject.getInt(&quot;expires_in&quot;));</div><div class="line">            &#125; catch (JSONException e) &#123;</div><div class="line">                accessToken = null;</div><div class="line">                // 获取token失败</div><div class="line">                log.error(&quot;获取token失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, jsonObject.getInt(&quot;errcode&quot;), jsonObject.getString(&quot;errmsg&quot;));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 描述: 发起https请求并获取结果</div><div class="line">     * </div><div class="line">     * @param requestUrl</div><div class="line">     *            请求地址</div><div class="line">     * @param requestMethod</div><div class="line">     *            请求方式（GET、POST）</div><div class="line">     * @param outputStr</div><div class="line">     *            提交的数据</div><div class="line">     * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值)</div><div class="line">     */</div><div class="line">    public static JSONObject httpRequest(String requestUrl, String requestMethod, String outputStr) &#123;</div><div class="line">        JSONObject jsonObject = null;</div><div class="line">        StringBuffer buffer = new StringBuffer();</div><div class="line">        try &#123;</div><div class="line">            // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">            TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">            SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">            sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">            // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">            SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">            URL url = new URL(requestUrl);</div><div class="line">            HttpsURLConnection httpUrlConn = (HttpsURLConnection) url.openConnection();</div><div class="line">            httpUrlConn.setSSLSocketFactory(ssf);</div><div class="line"></div><div class="line">            httpUrlConn.setDoOutput(true);</div><div class="line">            httpUrlConn.setDoInput(true);</div><div class="line">            httpUrlConn.setUseCaches(false);</div><div class="line"></div><div class="line">            // 设置请求方式（GET/POST）</div><div class="line">            httpUrlConn.setRequestMethod(requestMethod);</div><div class="line"></div><div class="line">            if (&quot;GET&quot;.equalsIgnoreCase(requestMethod))</div><div class="line">                httpUrlConn.connect();</div><div class="line"></div><div class="line">            // 当有数据需要提交时</div><div class="line">            if (null != outputStr) &#123;</div><div class="line">                OutputStream outputStream = httpUrlConn.getOutputStream();</div><div class="line">                // 注意编码格式，防止中文乱码</div><div class="line">                outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;));</div><div class="line">                outputStream.close();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 将返回的输入流转换成字符串</div><div class="line">            InputStream inputStream = httpUrlConn.getInputStream();</div><div class="line">            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);</div><div class="line">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line"></div><div class="line">            String str = null;</div><div class="line">            while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">                buffer.append(str);</div><div class="line">            &#125;</div><div class="line">            bufferedReader.close();</div><div class="line">            inputStreamReader.close();</div><div class="line">            // 释放资源</div><div class="line">            inputStream.close();</div><div class="line">            inputStream = null;</div><div class="line">            httpUrlConn.disconnect();</div><div class="line">            jsonObject = JSONObject.fromObject(buffer.toString());</div><div class="line">        &#125; catch (ConnectException ce) &#123;</div><div class="line">            log.error(&quot;Weixin server connection timed out.&quot;);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(&quot;https request error:&#123;&#125;&quot;, e);</div><div class="line">        &#125;</div><div class="line">        return jsonObject;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-添加菜单管理器："><a href="#8-添加菜单管理器：" class="headerlink" title="8.添加菜单管理器："></a>8.添加菜单管理器：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.main;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.wyj.wechart.menu.Button;</div><div class="line">import com.wyj.wechart.menu.CommonButton;</div><div class="line">import com.wyj.wechart.menu.ComplexButton;</div><div class="line">import com.wyj.wechart.menu.Menu;</div><div class="line">import com.wyj.wechart.pojo.AccessToken;</div><div class="line">import com.wyj.wechart.utils.WeixinUtil;</div><div class="line">/**</div><div class="line"> * 菜单管理器类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午4:12:08</div><div class="line"> */</div><div class="line">public class MenuManager &#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(MenuManager.class);</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 第三方用户唯一凭证</div><div class="line">        String appId = &quot;wx17fdedc3d6d0b68e&quot;;</div><div class="line">        // 第三方用户唯一凭证密钥</div><div class="line">        String appSecret = &quot;c3b3d919d65a781ba7db58d9d8dfb515&quot;;</div><div class="line"></div><div class="line">        // 调用接口获取access_token</div><div class="line">        AccessToken at = WeixinUtil.getAccessToken(appId, appSecret);</div><div class="line"></div><div class="line">        if (null != at) &#123;</div><div class="line">            // 调用接口创建菜单</div><div class="line">            int result = WeixinUtil.createMenu(getMenu(), at.getToken());</div><div class="line"></div><div class="line">            // 判断菜单创建结果</div><div class="line">            if (0 == result)</div><div class="line">                log.info(&quot;菜单创建成功！&quot;);</div><div class="line">            else</div><div class="line">                log.info(&quot;菜单创建失败，错误码：&quot; + result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 组装菜单数据</div><div class="line">     * </div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    private static Menu getMenu() &#123;</div><div class="line">        CommonButton btn11 = new CommonButton();</div><div class="line">        btn11.setName(&quot;天气预报&quot;);</div><div class="line">        btn11.setType(&quot;view&quot;);</div><div class="line">        btn11.setKey(&quot;11&quot;);</div><div class="line">        btn11.setUrl(&quot;http://www.weather.com.cn/weather/101190101.shtml&quot;);</div><div class="line"></div><div class="line">        CommonButton btn12 = new CommonButton();</div><div class="line">        btn12.setName(&quot;公交查询&quot;);</div><div class="line">        btn12.setType(&quot;view&quot;);</div><div class="line">        btn12.setKey(&quot;12&quot;);</div><div class="line">        btn12.setUrl(&quot;http://www.gongjiao.com/&quot;);</div><div class="line">        </div><div class="line">        CommonButton btn13 = new CommonButton();</div><div class="line">        btn13.setName(&quot;百度地图&quot;);</div><div class="line">        btn13.setType(&quot;view&quot;);</div><div class="line">        btn13.setKey(&quot;13&quot;);</div><div class="line">        btn13.setUrl(&quot;https://map.baidu.com/&quot;);</div><div class="line">        </div><div class="line">        CommonButton btn14 = new CommonButton();</div><div class="line">        btn14.setName(&quot;滴滴出行&quot;);</div><div class="line">        btn14.setType(&quot;click&quot;);</div><div class="line">        btn14.setKey(&quot;14&quot;);</div><div class="line"></div><div class="line">        CommonButton btn21 = new CommonButton();</div><div class="line">        btn21.setName(&quot;csdn&quot;);</div><div class="line">        btn21.setType(&quot;click&quot;);</div><div class="line">        btn21.setKey(&quot;21&quot;);</div><div class="line"></div><div class="line">        CommonButton btn22 = new CommonButton();</div><div class="line">        btn22.setName(&quot;博客园&quot;);</div><div class="line">        btn22.setType(&quot;click&quot;);</div><div class="line">        btn22.setKey(&quot;22&quot;);</div><div class="line"></div><div class="line">        CommonButton btn23 = new CommonButton();</div><div class="line">        btn23.setName(&quot;开发头条&quot;);</div><div class="line">        btn23.setType(&quot;click&quot;);</div><div class="line">        btn23.setKey(&quot;23&quot;);</div><div class="line"></div><div class="line">        CommonButton btn24 = new CommonButton();</div><div class="line">        btn24.setName(&quot;云栖社区&quot;);</div><div class="line">        btn24.setType(&quot;click&quot;);</div><div class="line">        btn24.setKey(&quot;24&quot;);</div><div class="line"></div><div class="line">        CommonButton btn25 = new CommonButton();</div><div class="line">        btn25.setName(&quot;github&quot;);</div><div class="line">        btn25.setType(&quot;click&quot;);</div><div class="line">        btn25.setKey(&quot;25&quot;);</div><div class="line"></div><div class="line">        CommonButton btn31 = new CommonButton();</div><div class="line">        btn31.setName(&quot;淘宝网&quot;);</div><div class="line">        btn31.setType(&quot;click&quot;);</div><div class="line">        btn31.setKey(&quot;31&quot;);</div><div class="line"></div><div class="line">        CommonButton btn32 = new CommonButton();</div><div class="line">        btn32.setName(&quot;电影天堂&quot;);</div><div class="line">        btn32.setType(&quot;click&quot;);</div><div class="line">        btn32.setKey(&quot;32&quot;);</div><div class="line"></div><div class="line">        CommonButton btn33 = new CommonButton();</div><div class="line">        btn33.setName(&quot;小游戏&quot;);</div><div class="line">        btn33.setType(&quot;click&quot;);</div><div class="line">        btn33.setKey(&quot;33&quot;);</div><div class="line"></div><div class="line">        </div><div class="line">        /**</div><div class="line">         * 微信：  mainBtn1,mainBtn2,mainBtn3底部的三个一级菜单。</div><div class="line">         */</div><div class="line">        </div><div class="line">        ComplexButton mainBtn1 = new ComplexButton();</div><div class="line">        mainBtn1.setName(&quot;生活便利&quot;);</div><div class="line">        //一级下有4个子菜单</div><div class="line">        mainBtn1.setSub_button(new CommonButton[] &#123; btn11, btn12, btn13, btn14 &#125;);</div><div class="line">        </div><div class="line">        ComplexButton mainBtn2 = new ComplexButton();</div><div class="line">        mainBtn2.setName(&quot;学习社区&quot;);</div><div class="line">        mainBtn2.setSub_button(new CommonButton[] &#123; btn21, btn22, btn23, btn24, btn25 &#125;);</div><div class="line"></div><div class="line">        </div><div class="line">        ComplexButton mainBtn3 = new ComplexButton();</div><div class="line">        mainBtn3.setName(&quot;娱乐一下&quot;);</div><div class="line">        mainBtn3.setSub_button(new CommonButton[] &#123; btn31, btn32, btn33 &#125;);</div><div class="line"></div><div class="line">        </div><div class="line">        /**</div><div class="line">         * 封装整个菜单</div><div class="line">         */</div><div class="line">        Menu menu = new Menu();</div><div class="line">        menu.setButton(new Button[] &#123; mainBtn1, mainBtn2, mainBtn3 &#125;);</div><div class="line"></div><div class="line">        return menu;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意替换称自己的appId和appSecret。</p>
<p>直接执行MenuManager 的main 方法即可。</p>
<p>效果如下：</p>
<p><img src="/2018/01/26/微信公共号开发教程java版——实现自定义菜单-六/muens.png" alt="muens"></p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：自定义菜单文档说明&quot;&gt;&lt;a href=&quot;#一：自定义菜单文档说明&quot; class=&quot;headerlink&quot; title=&quot;一：自定义菜单文档说明&quot;&gt;&lt;/a&gt;一：自定义菜单文档说明&lt;/h1&gt;&lt;p&gt;自定义菜单能够帮助公众号丰富界面，让用户更好更快地理解公众号的功能。
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——公共号access_token的获取(五)</title>
    <link href="http://wangyuanjun.cn/2018/01/26/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%85%AC%E5%85%B1%E5%8F%B7access-token%E7%9A%84%E8%8E%B7%E5%8F%96-%E4%BA%94/"/>
    <id>http://wangyuanjun.cn/2018/01/26/微信公共号开发教程java版——公共号access-token的获取-五/</id>
    <published>2018-01-26T08:13:15.000Z</published>
    <updated>2018-01-27T14:33:44.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：access-token简介"><a href="#一：access-token简介" class="headerlink" title="一：access_token简介"></a>一：access_token简介</h1><p>为了使第三方开发者能够为用户提供更多更有价值的个性化服务，微信公众平台 开放了许多接口，包括自定义菜单接口、客服接口、获取用户信息接口、用户分组接口、群发接口等，</p>
<p>access_token是公众号的全局唯一接口调用凭据，公众号调用各接口时都需使用access_token。开发者需要进行妥善保存。access_token的存储至少要保留512个字符空间。access_token的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的access_token失效。</p>
<p>公众平台的API调用所需的access_token的使用及生成方式说明：</p>
<p>1、建议公众号开发者使用中控服务器统一获取和刷新Access_token，其他业务逻辑服务器所使用的access_token均来自于该中控服务器，不应该各自去刷新，否则容易造成冲突，导致access_token覆盖而影响业务；</p>
<p>2、目前Access_token的有效期通过返回的expire_in来传达，目前是7200秒之内的值。中控服务器需要根据这个有效时间提前去刷新新access_token。在刷新过程中，中控服务器可对外继续输出的老access_token，此时公众平台后台会保证在5分钟内，新老access_token都可用，这保证了第三方业务的平滑过渡；</p>
<p>3、Access_token的有效时间可能会在未来有调整，所以中控服务器不仅需要内部定时主动刷新，还需要提供被动刷新access_token的接口，这样便于业务服务器在API调用获知access_token已超时的情况下，可以触发access_token的刷新流程。</p>
<p>公众号可以使用AppID和AppSecret调用本接口来获取access_token。AppID和AppSecret可在“微信公众平台-开发-基本配置”页中获得（需要已经成为开发者，且帐号没有异常状态）。<font color="red">调用接口时，请登录“微信公众平台-开发-基本配置”提前将服务器IP地址添加到IP白名单中，点击查看设置方法，否则将无法调用成功。</font></p>
<p>目前，获取access_token接口的调用频率限制为2000次/天，如果每次发送客服消息、获取用户信息、群发消息之前都要先调用获取 access_token接口得到接口访问凭证，这显然是不合理的，一方面会更耗时（多了一次接口调用操作），另一方面2000次/天的调用限制恐怕也不 够用。因此，在实际应用中，我们需要将获取到的access_token存储起来，然后定期调用access_token接口更新它，以保证随时取出的 access_token都是有效的。</p>
<p><font face="黑体" size="5">官网详细介绍：</font><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140183" target="_blank" rel="external">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140183</a></p>
<h2 id="接口调用请求说明"><a href="#接口调用请求说明" class="headerlink" title="接口调用请求说明"></a>接口调用请求说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https请求方式: GEThttps://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</div></pre></td></tr></table></figure>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">是否必须</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>grant_type</td>
<td style="text-align:right">是</td>
<td style="text-align:center">获取access_token填写client_credential</td>
</tr>
<tr>
<td>appid</td>
<td style="text-align:right">是</td>
<td style="text-align:center">第三方用户唯一凭证</td>
</tr>
<tr>
<td>secret</td>
<td style="text-align:right">是</td>
<td style="text-align:center">第三方用户唯一凭证密钥，即appsecret</td>
</tr>
</tbody>
</table>
<h2 id="返回说明"><a href="#返回说明" class="headerlink" title="返回说明"></a>返回说明</h2><p>正常情况下，微信会返回下述JSON数据包给公众号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200&#125;</div></pre></td></tr></table></figure>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>access_token</td>
<td style="text-align:center">获取到的凭证</td>
</tr>
<tr>
<td>expires_in</td>
<td style="text-align:center">凭证有效时间，单位：秒</td>
</tr>
</tbody>
</table>
<p>错误时微信会返回错误码等信息，JSON数据包示例如下（该示例为AppID无效错误）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;errcode&quot;:40013,&quot;errmsg&quot;:&quot;invalid appid&quot;&#125;</div></pre></td></tr></table></figure>
<h2 id="返回码说明"><a href="#返回码说明" class="headerlink" title="返回码说明"></a>返回码说明</h2><table>
<thead>
<tr>
<th>返回码</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-1</td>
<td style="text-align:center">系统繁忙，此时请开发者稍候再试</td>
</tr>
<tr>
<td>0</td>
<td style="text-align:center">请求成功</td>
</tr>
<tr>
<td>40001</td>
<td style="text-align:center">AppSecret错误或者AppSecret不属于这个公众号，请开发者确认AppSecret的正确性</td>
</tr>
<tr>
<td>40002</td>
<td style="text-align:center">请确保grant_type字段值为client_credential</td>
</tr>
<tr>
<td>40164</td>
<td style="text-align:center">调用接口的IP地址不在白名单中，请在接口IP白名单中进行设置</td>
</tr>
</tbody>
</table>
<h1 id="二：封装基本类"><a href="#二：封装基本类" class="headerlink" title="二：封装基本类"></a>二：封装基本类</h1><p>封装一下token类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * 凭证</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:19:14</div><div class="line"> */</div><div class="line">public class Token &#123;</div><div class="line"></div><div class="line">    // 接口访问凭证</div><div class="line">    private String accessToken;</div><div class="line"></div><div class="line">    // 凭证有效期，单位：秒</div><div class="line">    private int expiresIn;</div><div class="line"></div><div class="line">    public String getAccessToken() &#123;</div><div class="line">        return accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAccessToken(String accessToken) &#123;</div><div class="line">        this.accessToken = accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getExpiresIn() &#123;</div><div class="line">        return expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setExpiresIn(int expiresIn) &#123;</div><div class="line">        this.expiresIn = expiresIn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="三：获取token"><a href="#三：获取token" class="headerlink" title="三：获取token"></a>三：获取token</h1><ol>
<li><p>使用网页调试工具调试该接口：<a href="https://mp.weixin.qq.com/debug/cgi-bin/apiinfo?t=index&amp;type=%E5%9F%BA%E7%A1%80%E6%94%AF%E6%8C%81&amp;form=%E8%8E%B7%E5%8F%96access_token%E6%8E%A5%E5%8F%A3%20/token" target="_blank" rel="external">网页调试工具</a></p>
</li>
<li><p>直接通过浏览器访问：<a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET" target="_blank" rel="external">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</a> ，然后把APPID和APPSECRET替换成自己的appID和appsecret，在浏览器即可获得token。</p>
</li>
<li><p>编写程序，模拟https连接，获得token：<br>对于https请求，我们需要一个证书信任管理器，这个管理器类需要自己定义，但需要实现X509TrustManager接口，　</p>
</li>
</ol>
<p>首先定义一个MyX509TrustManager 类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.security.cert.CertificateException;</div><div class="line">import java.security.cert.X509Certificate;</div><div class="line"></div><div class="line">import javax.net.ssl.X509TrustManager;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 证书信任管理器（用于https请求）</div><div class="line"> * 这个证书管理器的作用就是让它信任我们指定的证书，下面的代码意味着信任所有证书，不管是否权威机构颁发。</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:22:19</div><div class="line"> */</div><div class="line">public class MyX509TrustManager implements X509TrustManager &#123;</div><div class="line"></div><div class="line">    // 检查客户端证书</div><div class="line">    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检查服务器端证书</div><div class="line">    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 返回受信任的X509证书数组</div><div class="line">    public X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>建立一个token测试类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.test;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">import javax.net.ssl.HttpsURLConnection;</div><div class="line">import javax.net.ssl.SSLContext;</div><div class="line">import javax.net.ssl.SSLSocketFactory;</div><div class="line">import javax.net.ssl.TrustManager;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.Token;</div><div class="line">import com.wyj.wechart.utils.CommonUtil;</div><div class="line">import com.wyj.wechart.utils.MyX509TrustManager;</div><div class="line"></div><div class="line">public class TokenTest &#123;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testGetToken1() throws Exception &#123;</div><div class="line">        String tokenUrl = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=appID&amp;secret=appsecret&quot;;</div><div class="line">        // 建立连接</div><div class="line">        URL url = new URL(tokenUrl);</div><div class="line">        HttpsURLConnection httpUrlConn = (HttpsURLConnection) url.openConnection();</div><div class="line"></div><div class="line">        // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">        TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">        SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">        sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">        // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">        SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">        httpUrlConn.setSSLSocketFactory(ssf);</div><div class="line">        httpUrlConn.setDoOutput(true);</div><div class="line">        httpUrlConn.setDoInput(true);</div><div class="line"></div><div class="line">        // 设置请求方式（GET/POST）</div><div class="line">        httpUrlConn.setRequestMethod(&quot;GET&quot;);</div><div class="line"></div><div class="line">        // 取得输入流</div><div class="line">        InputStream inputStream = httpUrlConn.getInputStream();</div><div class="line">        InputStreamReader inputStreamReader = new InputStreamReader(</div><div class="line">                inputStream, &quot;utf-8&quot;);</div><div class="line">        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line">        // 读取响应内容</div><div class="line">        StringBuffer buffer = new StringBuffer();</div><div class="line">        String str = null;</div><div class="line">        while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">            buffer.append(str);</div><div class="line">        &#125;</div><div class="line">        bufferedReader.close();</div><div class="line">        inputStreamReader.close();</div><div class="line">        // 释放资源</div><div class="line">        inputStream.close();</div><div class="line">        httpUrlConn.disconnect();</div><div class="line">        // 输出返回结果</div><div class="line">        System.out.println(buffer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 微信服务器返回的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;access_token&quot;:&quot;E3kRcQTati3QBPz97ou7zG0NXFrZFbA5No_hs5FNUZ62ROT0jr0txWr-gG1w-t06kk0zBW0kFmJiicJAydFyHNZhIh2uqIw4B5t85huRLs4&quot;,&quot;expires_in&quot;:7200&#125;</div></pre></td></tr></table></figure>
<p>代码优化：微信服务器返回的是json数据，如何从json里面解析出来的值</p>
<p>通过一款开源的json开发工具包json-lib，将他转换为java对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;json-lib&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.4&lt;/version&gt;</div><div class="line">	&lt;classifier&gt;jdk15&lt;/classifier&gt;&lt;!--指定jdk版本 --&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>封装一个通用的工具类 CommonUtil ，用于专门获取token：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStream;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.net.ConnectException;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">import javax.net.ssl.HttpsURLConnection;</div><div class="line">import javax.net.ssl.SSLContext;</div><div class="line">import javax.net.ssl.SSLSocketFactory;</div><div class="line">import javax.net.ssl.TrustManager;</div><div class="line"></div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.Token;</div><div class="line">import com.wyj.wechart.pojo.WeixinUserInfo;</div><div class="line"></div><div class="line">import net.sf.json.JSONException;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 通用工具类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:36:50</div><div class="line"> */</div><div class="line">public class CommonUtil &#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(CommonUtil.class);</div><div class="line"></div><div class="line">    // 凭证获取（GET）</div><div class="line">    public final static String token_url = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 发送https请求</div><div class="line">     * </div><div class="line">     * @param requestUrl</div><div class="line">     *            请求地址</div><div class="line">     * @param requestMethod</div><div class="line">     *            请求方式（GET、POST）</div><div class="line">     * @param outputStr</div><div class="line">     *            提交的数据</div><div class="line">     * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值)</div><div class="line">     */</div><div class="line">    public static JSONObject httpsRequest(String requestUrl, String requestMethod, String outputStr) &#123;</div><div class="line">        JSONObject jsonObject = null;</div><div class="line">        try &#123;</div><div class="line">            // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">            TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">            SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">            sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">            // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">            SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">            URL url = new URL(requestUrl);</div><div class="line">            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</div><div class="line">            conn.setSSLSocketFactory(ssf);</div><div class="line"></div><div class="line">            conn.setDoOutput(true);</div><div class="line">            conn.setDoInput(true);</div><div class="line">            conn.setUseCaches(false);</div><div class="line">            // 设置请求方式（GET/POST）</div><div class="line">            conn.setRequestMethod(requestMethod);</div><div class="line"></div><div class="line">            // 当outputStr不为null时向输出流写数据</div><div class="line">            if (null != outputStr) &#123;</div><div class="line">                OutputStream outputStream = conn.getOutputStream();</div><div class="line">                // 注意编码格式</div><div class="line">                outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;));</div><div class="line">                outputStream.close();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 从输入流读取返回内容</div><div class="line">            InputStream inputStream = conn.getInputStream();</div><div class="line">            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);</div><div class="line">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line">            String str = null;</div><div class="line">            StringBuffer buffer = new StringBuffer();</div><div class="line">            while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">                buffer.append(str);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 释放资源</div><div class="line">            bufferedReader.close();</div><div class="line">            inputStreamReader.close();</div><div class="line">            inputStream.close();</div><div class="line">            inputStream = null;</div><div class="line">            conn.disconnect();</div><div class="line">            jsonObject = JSONObject.fromObject(buffer.toString());</div><div class="line">        &#125; catch (ConnectException ce) &#123;</div><div class="line">            log.error(&quot;连接超时：&#123;&#125;&quot;, ce);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(&quot;https请求异常：&#123;&#125;&quot;, e);</div><div class="line">        &#125;</div><div class="line">        return jsonObject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取接口访问凭证</div><div class="line">     * </div><div class="line">     * @param appid</div><div class="line">     *            凭证</div><div class="line">     * @param appsecret</div><div class="line">     *            密钥</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static Token getToken(String appid, String appsecret) &#123;</div><div class="line">        Token token = null;</div><div class="line">        String requestUrl = token_url.replace(&quot;APPID&quot;, appid).replace(&quot;APPSECRET&quot;, appsecret);</div><div class="line">        // 发起GET请求获取凭证</div><div class="line">        JSONObject jsonObject = httpsRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line"></div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                token = new Token();</div><div class="line">                token.setAccessToken(jsonObject.getString(&quot;access_token&quot;));</div><div class="line">                token.setExpiresIn(jsonObject.getInt(&quot;expires_in&quot;));</div><div class="line">            &#125; catch (JSONException e) &#123;</div><div class="line">                token = null;</div><div class="line">                // 获取token失败</div><div class="line">                log.error(&quot;获取token失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, jsonObject.getInt(&quot;errcode&quot;), jsonObject.getString(&quot;errmsg&quot;));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return token;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改Token测试类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.test;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">import javax.net.ssl.HttpsURLConnection;</div><div class="line">import javax.net.ssl.SSLContext;</div><div class="line">import javax.net.ssl.SSLSocketFactory;</div><div class="line">import javax.net.ssl.TrustManager;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.Token;</div><div class="line">import com.wyj.wechart.utils.CommonUtil;</div><div class="line">import com.wyj.wechart.utils.MyX509TrustManager;</div><div class="line"></div><div class="line">public class TokenTest &#123;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testGetToken1() throws Exception &#123;</div><div class="line">        String tokenUrl = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=appID&amp;secret=appsecret&quot;;</div><div class="line">        // 建立连接</div><div class="line">        URL url = new URL(tokenUrl);</div><div class="line">        HttpsURLConnection httpUrlConn = (HttpsURLConnection) url.openConnection();</div><div class="line"></div><div class="line">        // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">        TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">        SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">        sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">        // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">        SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">        httpUrlConn.setSSLSocketFactory(ssf);</div><div class="line">        httpUrlConn.setDoOutput(true);</div><div class="line">        httpUrlConn.setDoInput(true);</div><div class="line"></div><div class="line">        // 设置请求方式（GET/POST）</div><div class="line">        httpUrlConn.setRequestMethod(&quot;GET&quot;);</div><div class="line"></div><div class="line">        // 取得输入流</div><div class="line">        InputStream inputStream = httpUrlConn.getInputStream();</div><div class="line">        InputStreamReader inputStreamReader = new InputStreamReader(</div><div class="line">                inputStream, &quot;utf-8&quot;);</div><div class="line">        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line">        // 读取响应内容</div><div class="line">        StringBuffer buffer = new StringBuffer();</div><div class="line">        String str = null;</div><div class="line">        while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">            buffer.append(str);</div><div class="line">        &#125;</div><div class="line">        bufferedReader.close();</div><div class="line">        inputStreamReader.close();</div><div class="line">        // 释放资源</div><div class="line">        inputStream.close();</div><div class="line">        httpUrlConn.disconnect();</div><div class="line">        // 输出返回结果</div><div class="line">        System.out.println(buffer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testGetToken2() &#123;</div><div class="line">        Token token = CommonUtil.getToken(&quot;appID&quot;,&quot;appsecret&quot;);</div><div class="line">        System.out.println(&quot;access_token:&quot;+token.getAccessToken());</div><div class="line">        System.out.println(&quot;expires_in:&quot;+token.getExpiresIn());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台输出效果如下，说明我们获取到了access_token和expires_in：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">access_token:2amR6pr1eN-BuSBgho-nzo5tofxJ6BdEnRJQ87Zs5bj4ny4CGB8w-1D3YtjG2PzmEvVm1INrsVg-5BjyHCkWmBKsLPDSF3r_bdaPxMpKtbw</div><div class="line">expires_in:7200</div></pre></td></tr></table></figure>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：access-token简介&quot;&gt;&lt;a href=&quot;#一：access-token简介&quot; class=&quot;headerlink&quot; title=&quot;一：access_token简介&quot;&gt;&lt;/a&gt;一：access_token简介&lt;/h1&gt;&lt;p&gt;为了使第三方开发者能够为用户
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——发送消息和处理消息(四)</title>
    <link href="http://wangyuanjun.cn/2018/01/26/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%92%8C%E5%A4%84%E7%90%86%E6%B6%88%E6%81%AF-%E5%9B%9B/"/>
    <id>http://wangyuanjun.cn/2018/01/26/微信公共号开发教程java版——发送消息和处理消息-四/</id>
    <published>2018-01-26T06:13:13.000Z</published>
    <updated>2018-01-27T14:33:32.801Z</updated>
    
    <content type="html"><![CDATA[<p>消息的发送和处理是在doPost方法中完成的<br><img src="/2018/01/26/微信公共号开发教程java版——发送消息和处理消息-四/消息发送处理.png" alt="消息发送处理"></p>
<h1 id="一：微信公众平台的通讯过程"><a href="#一：微信公众平台的通讯过程" class="headerlink" title="一：微信公众平台的通讯过程"></a>一：微信公众平台的通讯过程</h1><p>当微信用户向你的公众平台发送一条消息，实际上这条消息首先发送到微信服务器，由微信服务器向网站服务器发起另外一个请求，网站服务器返回这个请求的结果，再由微信服务器发送到微信客户端。</p>
<p>整个消息通讯流程如下图：<br><img src="/2018/01/26/微信公共号开发教程java版——发送消息和处理消息-四/通讯过程.png" alt="通讯过程"><br>    上述5个步骤中，作为开发者我们主要精力都集中在步骤3上，这个步骤主实际上要有3项任务：</p>
<p>接收来自2的XML信息<br>服务器内部逻辑执行<br>组织并返回用于4的XML信息<br>    上述三项任务我会在后面做详细说明，并提供一整套简单、高效的处理方法。</p>
<h1 id="二：解析微信服务器传来的消息"><a href="#二：解析微信服务器传来的消息" class="headerlink" title="二：解析微信服务器传来的消息"></a>二：解析微信服务器传来的消息</h1><p>因为微信服务器发送过来的是xml格式的消息，所以我们可以采用 开源框架dom4j去解析xml 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;dom4j&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;dom4j&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.6.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h1 id="三：将响应消息转换成xml返回给微信服务器"><a href="#三：将响应消息转换成xml返回给微信服务器" class="headerlink" title="三：将响应消息转换成xml返回给微信服务器"></a>三：将响应消息转换成xml返回给微信服务器</h1><p>如何将响应消息转换成xml返回的问题，这里我们将  采用开源框架xstream来实现Java类到xml的转换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 采用开源框架xstream来实现Java类到xml的转换 --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;com.thoughtworks.xstream&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;xstream&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4.10&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h2 id="1-封装消息处理工具："><a href="#1-封装消息处理工具：" class="headerlink" title="1.封装消息处理工具："></a>1.封装消息处理工具：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.Writer;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line">import org.dom4j.Document;</div><div class="line">import org.dom4j.Element;</div><div class="line">import org.dom4j.io.SAXReader;</div><div class="line"></div><div class="line">import com.thoughtworks.xstream.XStream;</div><div class="line">import com.thoughtworks.xstream.core.util.QuickWriter;</div><div class="line">import com.thoughtworks.xstream.io.HierarchicalStreamWriter;</div><div class="line">import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;</div><div class="line">import com.thoughtworks.xstream.io.xml.XppDriver;</div><div class="line">import com.wyj.wechart.message.resp.Article;</div><div class="line">import com.wyj.wechart.message.resp.ImageMessage;</div><div class="line">import com.wyj.wechart.message.resp.MusicMessage;</div><div class="line">import com.wyj.wechart.message.resp.NewsMessage;</div><div class="line">import com.wyj.wechart.message.resp.TextMessage;</div><div class="line">import com.wyj.wechart.message.resp.VideoMessage;</div><div class="line">import com.wyj.wechart.message.resp.VoiceMessage;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 消息处理工具类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午2:09:54</div><div class="line"> */</div><div class="line">public class MessageUtil &#123;</div><div class="line"></div><div class="line">    // 请求消息类型：文本</div><div class="line">    public static final String REQ_MESSAGE_TYPE_TEXT = &quot;text&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：图片</div><div class="line">    public static final String REQ_MESSAGE_TYPE_IMAGE = &quot;image&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：语音</div><div class="line">    public static final String REQ_MESSAGE_TYPE_VOICE = &quot;voice&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：视频</div><div class="line">    public static final String REQ_MESSAGE_TYPE_VIDEO = &quot;video&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：小视频</div><div class="line">    public static final String REQ_MESSAGE_TYPE_SHORTVIDEO = &quot;shortvideo&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：地理位置</div><div class="line">    public static final String REQ_MESSAGE_TYPE_LOCATION = &quot;location&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：链接</div><div class="line">    public static final String REQ_MESSAGE_TYPE_LINK = &quot;link&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：事件推送</div><div class="line">    public static final String REQ_MESSAGE_TYPE_EVENT = &quot;event&quot;;</div><div class="line"></div><div class="line">    // 事件类型：subscribe(订阅)</div><div class="line">    public static final String EVENT_TYPE_SUBSCRIBE = &quot;subscribe&quot;;</div><div class="line"></div><div class="line">    // 事件类型：unsubscribe(取消订阅)</div><div class="line">    public static final String EVENT_TYPE_UNSUBSCRIBE = &quot;unsubscribe&quot;;</div><div class="line"></div><div class="line">    // 事件类型：scan(用户已关注时的扫描带参数二维码)</div><div class="line">    public static final String EVENT_TYPE_SCAN = &quot;scan&quot;;</div><div class="line"></div><div class="line">    // 事件类型：LOCATION(上报地理位置)</div><div class="line">    public static final String EVENT_TYPE_LOCATION = &quot;LOCATION&quot;;</div><div class="line"></div><div class="line">    // 事件类型：CLICK(自定义菜单)</div><div class="line">    public static final String EVENT_TYPE_CLICK = &quot;CLICK&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：文本</div><div class="line">    public static final String RESP_MESSAGE_TYPE_TEXT = &quot;text&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：图片</div><div class="line">    public static final String RESP_MESSAGE_TYPE_IMAGE = &quot;image&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：语音</div><div class="line">    public static final String RESP_MESSAGE_TYPE_VOICE = &quot;voice&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：视频</div><div class="line">    public static final String RESP_MESSAGE_TYPE_VIDEO = &quot;video&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：音乐</div><div class="line">    public static final String RESP_MESSAGE_TYPE_MUSIC = &quot;music&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：图文</div><div class="line">    public static final String RESP_MESSAGE_TYPE_NEWS = &quot;news&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 解析微信发来的请求（XML）</div><div class="line">     * </div><div class="line">     * @param request</div><div class="line">     * @return Map&lt;String, String&gt;</div><div class="line">     * @throws Exception</div><div class="line">     */</div><div class="line">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">    public static Map&lt;String, String&gt; parseXml(HttpServletRequest request) throws Exception &#123;</div><div class="line">        // 将解析结果存储在HashMap中</div><div class="line">        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</div><div class="line"></div><div class="line">        // 从request中取得输入流</div><div class="line">        InputStream inputStream = request.getInputStream();</div><div class="line">        // 读取输入流</div><div class="line">        SAXReader reader = new SAXReader();</div><div class="line">        Document document = reader.read(inputStream);</div><div class="line">        // 得到xml根元素</div><div class="line">        Element root = document.getRootElement();</div><div class="line">        // 得到根元素的所有子节点</div><div class="line">        List&lt;Element&gt; elementList = root.elements();</div><div class="line"></div><div class="line">        // 遍历所有子节点</div><div class="line">        for (Element e : elementList)</div><div class="line">            map.put(e.getName(), e.getText());</div><div class="line"></div><div class="line">        // 释放资源</div><div class="line">        inputStream.close();</div><div class="line">        inputStream = null;</div><div class="line"></div><div class="line">        return map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 扩展xstream使其支持CDATA</div><div class="line">     */</div><div class="line">    private static XStream xstream = new XStream(new XppDriver() &#123;</div><div class="line">        public HierarchicalStreamWriter createWriter(Writer out) &#123;</div><div class="line">            return new PrettyPrintWriter(out) &#123;</div><div class="line">                // 对所有xml节点的转换都增加CDATA标记</div><div class="line">                boolean cdata = true;</div><div class="line"></div><div class="line">                @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">                public void startNode(String name, Class clazz) &#123;</div><div class="line">                    super.startNode(name, clazz);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                protected void writeText(QuickWriter writer, String text) &#123;</div><div class="line">                    if (cdata) &#123;</div><div class="line">                        writer.write(&quot;&lt;![CDATA[&quot;);</div><div class="line">                        writer.write(text);</div><div class="line">                        writer.write(&quot;]]&gt;&quot;);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        writer.write(text);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 文本消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param textMessage</div><div class="line">     *            文本消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(TextMessage textMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, textMessage.getClass());</div><div class="line">        return xstream.toXML(textMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 图片消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param imageMessage</div><div class="line">     *            图片消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(ImageMessage imageMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, imageMessage.getClass());</div><div class="line">        return xstream.toXML(imageMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 语音消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param voiceMessage</div><div class="line">     *            语音消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(VoiceMessage voiceMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, voiceMessage.getClass());</div><div class="line">        return xstream.toXML(voiceMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 视频消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param videoMessage</div><div class="line">     *            视频消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(VideoMessage videoMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, videoMessage.getClass());</div><div class="line">        return xstream.toXML(videoMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 音乐消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param musicMessage</div><div class="line">     *            音乐消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(MusicMessage musicMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, musicMessage.getClass());</div><div class="line">        return xstream.toXML(musicMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 图文消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param newsMessage</div><div class="line">     *            图文消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(NewsMessage newsMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, newsMessage.getClass());</div><div class="line">        xstream.alias(&quot;item&quot;, new Article().getClass());</div><div class="line">        return xstream.toXML(newsMessage);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-使用CoreServlet-类完成消息的接受与响应："><a href="#2-使用CoreServlet-类完成消息的接受与响应：" class="headerlink" title="2.使用CoreServlet 类完成消息的接受与响应："></a>2.使用CoreServlet 类完成消息的接受与响应：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.servlet;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.io.PrintWriter;</div><div class="line"></div><div class="line">import javax.servlet.ServletException;</div><div class="line">import javax.servlet.annotation.WebServlet;</div><div class="line">import javax.servlet.http.HttpServlet;</div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import com.wyj.wechart.service.CoreService;</div><div class="line">import com.wyj.wechart.utils.SignUtil;</div><div class="line">/**</div><div class="line"> * 来接收微信服务器传来信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午2:17:39</div><div class="line"> */</div><div class="line">@WebServlet(urlPatterns = &quot;/wechat&quot;, description = &quot;wechat&quot;)</div><div class="line">public class CoreServlet extends HttpServlet &#123;</div><div class="line">    private static final long serialVersionUID = -8685285401859800066L;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 确认请求来自微信服务器</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</div><div class="line">        System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;doGet()&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);</div><div class="line">        // 微信加密签名  </div><div class="line">        String signature = req.getParameter(&quot;signature&quot;);  </div><div class="line">        // 时间戳  </div><div class="line">        String timestamp = req.getParameter(&quot;timestamp&quot;);  </div><div class="line">        // 随机数  </div><div class="line">        String nonce = req.getParameter(&quot;nonce&quot;);  </div><div class="line">        // 随机字符串  </div><div class="line">        String echostr = req.getParameter(&quot;echostr&quot;);  </div><div class="line">  </div><div class="line">        PrintWriter out = resp.getWriter();  </div><div class="line">        // 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败  </div><div class="line">        if (SignUtil.checkSignature(signature, timestamp, nonce)) &#123;  </div><div class="line">            out.print(echostr);  </div><div class="line">        &#125;  </div><div class="line">        out.close();  </div><div class="line">        out = null;  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 处理微信服务器发来的消息</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</div><div class="line">        System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;doPost()&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);</div><div class="line">        // 消息的接收、处理、响应</div><div class="line">        // 将请求、响应的编码均设置为UTF-8（防止中文乱码）</div><div class="line">        req.setCharacterEncoding(&quot;UTF-8&quot;);</div><div class="line">        resp.setCharacterEncoding(&quot;UTF-8&quot;);</div><div class="line"></div><div class="line">        // 调用核心业务类接收消息、处理消息</div><div class="line">        String respXml = CoreService.processRequest(req);</div><div class="line"></div><div class="line">        // 响应消息</div><div class="line">        PrintWriter out = resp.getWriter();</div><div class="line">        out.print(respXml);</div><div class="line">        out.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-使用CoreService类完成消息的处理："><a href="#3-使用CoreService类完成消息的处理：" class="headerlink" title="3.使用CoreService类完成消息的处理："></a>3.使用CoreService类完成消息的处理：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.service;</div><div class="line"></div><div class="line">import java.util.Date;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line">import com.wyj.wechart.message.resp.TextMessage;</div><div class="line">import com.wyj.wechart.utils.MessageUtil;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * 核心服务类</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午2:21:24</div><div class="line"> */</div><div class="line">public class CoreService &#123;</div><div class="line">    /**</div><div class="line">     * 处理微信发来的请求</div><div class="line">     * @param request</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String processRequest(HttpServletRequest request) &#123;</div><div class="line">        // xml格式的消息数据</div><div class="line">        String respXml = null;</div><div class="line">        // 默认返回的文本消息内容</div><div class="line">        String respContent = &quot;未知的消息类型！&quot;;</div><div class="line">        try &#123;</div><div class="line">            // 调用parseXml方法解析请求消息</div><div class="line">            Map&lt;String, String&gt; requestMap = MessageUtil.parseXml(request);</div><div class="line">            // 发送方帐号</div><div class="line">            String fromUserName = requestMap.get(&quot;FromUserName&quot;);</div><div class="line">            // 开发者微信号</div><div class="line">            String toUserName = requestMap.get(&quot;ToUserName&quot;);</div><div class="line">            // 消息类型</div><div class="line">            String msgType = requestMap.get(&quot;MsgType&quot;);</div><div class="line"></div><div class="line">            // 回复文本消息</div><div class="line">            TextMessage textMessage = new TextMessage();</div><div class="line">            textMessage.setToUserName(fromUserName);</div><div class="line">            textMessage.setFromUserName(toUserName);</div><div class="line">            textMessage.setCreateTime(new Date().getTime());</div><div class="line">            textMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_TEXT);</div><div class="line"></div><div class="line">            // 文本消息</div><div class="line">            if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_TEXT)) &#123;</div><div class="line">                respContent = &quot;您发送的是文本消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 图片消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_IMAGE)) &#123;</div><div class="line">                respContent = &quot;您发送的是图片消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 语音消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_VOICE)) &#123;</div><div class="line">                respContent = &quot;您发送的是语音消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 视频消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_VIDEO)) &#123;</div><div class="line">                respContent = &quot;您发送的是视频消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 视频消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_SHORTVIDEO)) &#123;</div><div class="line">                respContent = &quot;您发送的是小视频消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 地理位置消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_LOCATION)) &#123;</div><div class="line">                respContent = &quot;您发送的是地理位置消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 链接消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_LINK)) &#123;</div><div class="line">                respContent = &quot;您发送的是链接消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 事件推送</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_EVENT)) &#123;</div><div class="line">                // 事件类型</div><div class="line">                String eventType = requestMap.get(&quot;Event&quot;);</div><div class="line">                // 关注</div><div class="line">                if (eventType.equals(MessageUtil.EVENT_TYPE_SUBSCRIBE)) &#123;</div><div class="line">                    respContent = &quot;谢谢您的关注！&quot;;</div><div class="line">                &#125;</div><div class="line">                // 取消关注</div><div class="line">                else if (eventType.equals(MessageUtil.EVENT_TYPE_UNSUBSCRIBE)) &#123;</div><div class="line">                    // TODO 取消订阅后用户不会再收到公众账号发送的消息，因此不需要回复</div><div class="line">                &#125;</div><div class="line">                // 扫描带参数二维码</div><div class="line">                else if (eventType.equals(MessageUtil.EVENT_TYPE_SCAN)) &#123;</div><div class="line">                    // TODO 处理扫描带参数二维码事件</div><div class="line">                &#125;</div><div class="line">                // 上报地理位置</div><div class="line">                else if (eventType.equals(MessageUtil.EVENT_TYPE_LOCATION)) &#123;</div><div class="line">                    // TODO 处理上报地理位置事件</div><div class="line">                &#125;</div><div class="line">                // 自定义菜单</div><div class="line">                else if (eventType.equals(MessageUtil.EVENT_TYPE_CLICK)) &#123;</div><div class="line">                    // TODO 处理菜单点击事件</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // 设置文本消息的内容</div><div class="line">            textMessage.setContent(respContent);</div><div class="line">            // 将文本消息对象转换成xml</div><div class="line">            respXml = MessageUtil.messageToXml(textMessage);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return respXml;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本地测试效果如下<br><img src="/2018/01/26/微信公共号开发教程java版——发送消息和处理消息-四/message.png" alt="message"></p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;消息的发送和处理是在doPost方法中完成的&lt;br&gt;&lt;img src=&quot;/2018/01/26/微信公共号开发教程java版——发送消息和处理消息-四/消息发送处理.png&quot; alt=&quot;消息发送处理&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一：微信公众平台的通讯过程&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装(三)</title>
    <link href="http://wangyuanjun.cn/2018/01/25/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF%EF%BC%8C%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF%E5%8F%8A%E4%BA%8B%E4%BB%B6%E6%B6%88%E6%81%AF%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85-%E4%B8%89/"/>
    <id>http://wangyuanjun.cn/2018/01/25/微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装-三/</id>
    <published>2018-01-25T14:55:20.000Z</published>
    <updated>2018-01-27T14:33:22.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：封装请求信息"><a href="#一：封装请求信息" class="headerlink" title="一：封装请求信息"></a>一：封装请求信息</h1><p><img src="/2018/01/25/微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装-三/接收普通消息.png" alt="接收普通消息"></p>
<p>当普通微信用户向公众账号发消息时，微信服务器将POST消息的XML数据包到开发者填写的URL上。<br>各消息类型的推送XML数据包结构如下：<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140453" target="_blank" rel="external">查看官网详细介绍</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line">文本消息</div><div class="line"></div><div class="line"> &lt;xml&gt;</div><div class="line"> &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line"> &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt; </div><div class="line"> &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;</div><div class="line"> &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</div><div class="line"> &lt;Content&gt;&lt;![CDATA[this is a test]]&gt;&lt;/Content&gt;</div><div class="line"> &lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line"> &lt;/xml&gt;</div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	text</div><div class="line">Content    	文本消息内容</div><div class="line">MsgId    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line">图片消息</div><div class="line"></div><div class="line"> &lt;xml&gt;</div><div class="line"> &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line"> &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line"> &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;</div><div class="line"> &lt;MsgType&gt;&lt;![CDATA[image]]&gt;&lt;/MsgType&gt;</div><div class="line"> &lt;PicUrl&gt;&lt;![CDATA[this is a url]]&gt;&lt;/PicUrl&gt;</div><div class="line"> &lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line"> &lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line"> &lt;/xml&gt;</div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	image</div><div class="line">PicUrl    	图片链接</div><div class="line">MediaId    	图片消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">MsgId    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line">语音消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1357290913&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[voice]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;Format&gt;&lt;![CDATA[Format]]&gt;&lt;/Format&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	语音为voice</div><div class="line">MediaId    	语音消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">Format    	语音格式，如amr，speex等</div><div class="line">MsgID    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">请注意，开通语音识别后，用户每次发送语音给公众号时，微信会在推送的语音消息XML数据包中，增加一个Recongnition字段 （注：由于客户端缓存，开发者开启或者关闭语音识别功能，对新关注者立刻生效，对已关注用户需要24小时生效。开发者可以重新关注此帐号进行测试）。开启 语音识别后的语音XML数据包如下：</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1357290913&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[voice]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;Format&gt;&lt;![CDATA[Format]]&gt;&lt;/Format&gt;</div><div class="line">&lt;Recognition&gt;&lt;![CDATA[腾讯微信团队]]&gt;&lt;/Recognition&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">多出的字段中，Format为语音格式，一般为amr，Recognition为语音识别结果，使用UTF8编码。</div><div class="line">视频消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1357290913&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[video]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;ThumbMediaId&gt;&lt;![CDATA[thumb_media_id]]&gt;&lt;/ThumbMediaId&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	视频为video</div><div class="line">MediaId    	视频消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">ThumbMediaId    视频消息缩略图的媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">MsgId    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line">小视频消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1357290913&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[shortvideo]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;ThumbMediaId&gt;&lt;![CDATA[thumb_media_id]]&gt;&lt;/ThumbMediaId&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	小视频为shortvideo</div><div class="line">MediaId    	视频消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">ThumbMediaId    视频消息缩略图的媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">MsgId    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line">地理位置消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1351776360&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[location]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Location_X&gt;23.134521&lt;/Location_X&gt;</div><div class="line">&lt;Location_Y&gt;113.358803&lt;/Location_Y&gt;</div><div class="line">&lt;Scale&gt;20&lt;/Scale&gt;</div><div class="line">&lt;Label&gt;&lt;![CDATA[位置信息]]&gt;&lt;/Label&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt; </div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	location</div><div class="line">Location_X    	地理位置维度</div><div class="line">Location_Y    	地理位置经度</div><div class="line">Scale    	地图缩放大小</div><div class="line">Label    	地理位置信息</div><div class="line">MsgId    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line">链接消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1351776360&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[link]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Title&gt;&lt;![CDATA[公众平台官网链接]]&gt;&lt;/Title&gt;</div><div class="line">&lt;Description&gt;&lt;![CDATA[公众平台官网链接]]&gt;&lt;/Description&gt;</div><div class="line">&lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt; </div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	接收方微信号</div><div class="line">FromUserName    发送方微信号，若为普通用户，则是一个OpenID</div><div class="line">CreateTime    	消息创建时间</div><div class="line">MsgType    	消息类型，link</div><div class="line">Title    	消息标题</div><div class="line">Description    	消息描述</div><div class="line">Url    		消息链接</div><div class="line">MsgId    	消息id，64位整型</div></pre></td></tr></table></figure></p>
<p>其中用户可以向微信服务器发送的消息类型大概可以分为：文本消息，图片消息，语音消息，视频消息，小视频消息，地理位置消息，链接消息。</p>
<p>根据观察可以知道这些消息中，都会传回来这些公共的字段如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ToUserName（开发者微信号）;</div><div class="line"></div><div class="line">FromUserName（发送方帐 号，OPEN_ID）;</div><div class="line"></div><div class="line">CreateTime（消息的创建时间）;</div><div class="line"></div><div class="line">MsgType（消息类型）;</div><div class="line"></div><div class="line">MsgId（消息ID）;</div></pre></td></tr></table></figure></p>
<p>我们把这些封装成一个基类，然后 不同的部分，分别封装为各自的类，这样提高代码的重用性。</p>
<p>这个请求消息的基类BaseMessage ，主要是封装了一些共同的字段。</p>
<h2 id="请求消息的基类BaseMessage"><a href="#请求消息的基类BaseMessage" class="headerlink" title="请求消息的基类BaseMessage"></a>请求消息的基类BaseMessage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line">/**</div><div class="line"> * 请求消息的基类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:30:00</div><div class="line"> */</div><div class="line">public class BaseMessage &#123;</div><div class="line">    </div><div class="line">    // 开发者微信号</div><div class="line">    private String ToUserName;</div><div class="line">    </div><div class="line">    // 发送方帐号（一个OpenID）</div><div class="line">    private String FromUserName;</div><div class="line">    </div><div class="line">    // 消息创建时间 （整型）</div><div class="line">    private long CreateTime;</div><div class="line">    </div><div class="line">    // 消息类型（text/image/location/link）</div><div class="line">    private String MsgType;</div><div class="line">    </div><div class="line">    // 消息id，64位整型</div><div class="line">    private long MsgId;</div><div class="line"></div><div class="line">    public String getToUserName() &#123;</div><div class="line">        return ToUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setToUserName(String toUserName) &#123;</div><div class="line">        ToUserName = toUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getFromUserName() &#123;</div><div class="line">        return FromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFromUserName(String fromUserName) &#123;</div><div class="line">        FromUserName = fromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getCreateTime() &#123;</div><div class="line">        return CreateTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCreateTime(long createTime) &#123;</div><div class="line">        CreateTime = createTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMsgType() &#123;</div><div class="line">        return MsgType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMsgType(String msgType) &#123;</div><div class="line">        MsgType = msgType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getMsgId() &#123;</div><div class="line">        return MsgId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMsgId(long msgId) &#123;</div><div class="line">        MsgId = msgId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-文本消息类Content-，主要是文本消息内容"><a href="#1-文本消息类Content-，主要是文本消息内容" class="headerlink" title="1.文本消息类Content ，主要是文本消息内容:"></a>1.文本消息类Content ，主要是文本消息内容:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line">/**</div><div class="line"> * 请求消息之文本消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:31:49</div><div class="line"> */</div><div class="line">public class TextMessage extends BaseMessage&#123;</div><div class="line">    // 消息内容</div><div class="line">    private String Content;</div><div class="line"></div><div class="line">    public String getContent() &#123;</div><div class="line">        return Content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setContent(String content) &#123;</div><div class="line">        Content = content;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-图片消息："><a href="#2-图片消息：" class="headerlink" title="2.图片消息："></a>2.图片消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line">/**</div><div class="line"> * 请求消息之图片消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:40:47</div><div class="line"> */</div><div class="line">public class ImageMessage extends BaseMessage &#123;</div><div class="line">    </div><div class="line">    // 图片链接</div><div class="line">    private String PicUrl;</div><div class="line">    </div><div class="line">    //图片消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">    private String MediaId;</div><div class="line"></div><div class="line">    public String getPicUrl() &#123;</div><div class="line">        return PicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPicUrl(String picUrl) &#123;</div><div class="line">        PicUrl = picUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-语音消息："><a href="#3-语音消息：" class="headerlink" title="3.语音消息："></a>3.语音消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line">/**</div><div class="line"> * 请求消息之语音消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:41:45</div><div class="line"> */</div><div class="line">public class VoiceMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 语音消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">    private String MediaId;</div><div class="line">    </div><div class="line">    //  语音格式，如amr，speex等</div><div class="line">    private String Format;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getFormat() &#123;</div><div class="line">        return Format;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFormat(String format) &#123;</div><div class="line">        Format = format;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-视频消息："><a href="#4-视频消息：" class="headerlink" title="4.视频消息："></a>4.视频消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 请求消息之视频消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:43:10</div><div class="line"> */</div><div class="line">public class VideoMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 视频消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">    private String MediaId;</div><div class="line"></div><div class="line">    // 视频消息缩略图的媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">    private String ThumbMediaId;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getThumbMediaId() &#123;</div><div class="line">        return ThumbMediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setThumbMediaId(String thumbMediaId) &#123;</div><div class="line">        ThumbMediaId = thumbMediaId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-地理位置消息"><a href="#5-地理位置消息" class="headerlink" title="5.地理位置消息:"></a>5.地理位置消息:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 请求消息之地理位置消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:44:56</div><div class="line"> */</div><div class="line">public class LocationMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 地理位置维度</div><div class="line">    private String Location_X;</div><div class="line"></div><div class="line">    // 地理位置经度</div><div class="line">    private String Location_Y;</div><div class="line"></div><div class="line">    // 地图缩放大小</div><div class="line">    private String Scale;</div><div class="line"></div><div class="line">    // 地理位置信息</div><div class="line">    private String Label;</div><div class="line"></div><div class="line">    public String getLocation_X() &#123;</div><div class="line">        return Location_X;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLocation_X(String location_X) &#123;</div><div class="line">        Location_X = location_X;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLocation_Y() &#123;</div><div class="line">        return Location_Y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLocation_Y(String location_Y) &#123;</div><div class="line">        Location_Y = location_Y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getScale() &#123;</div><div class="line">        return Scale;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setScale(String scale) &#123;</div><div class="line">        Scale = scale;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLabel() &#123;</div><div class="line">        return Label;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLabel(String label) &#123;</div><div class="line">        Label = label;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-链接消息："><a href="#6-链接消息：" class="headerlink" title="6.链接消息："></a>6.链接消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 请求消息之链接消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:45:29</div><div class="line"> */</div><div class="line">public class LinkMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 消息标题</div><div class="line">    private String Title;</div><div class="line"></div><div class="line">    // 消息描述</div><div class="line">    private String Description;</div><div class="line"></div><div class="line">    // 消息链接</div><div class="line">    private String Url;</div><div class="line"></div><div class="line">    public String getTitle() &#123;</div><div class="line">        return Title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTitle(String title) &#123;</div><div class="line">        Title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDescription() &#123;</div><div class="line">        return Description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDescription(String description) &#123;</div><div class="line">        Description = description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUrl() &#123;</div><div class="line">        return Url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUrl(String url) &#123;</div><div class="line">        Url = url;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="二：封装事件"><a href="#二：封装事件" class="headerlink" title="二：封装事件"></a>二：封装事件</h1><p><img src="/2018/01/25/微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装-三/接收事件推送.png" alt="接收事件推送"><br>在微信用户和公众号产生交互的过程中，用户的某些操作会使得微信服务器通过事件推送的形式通知到开发者在开发者中心处设置的服务器地址，从而开发者可以获取到该信息。其中，某些事件推送在发生后，是允许开发者回复用户的，某些则不允许，详细内容如下：<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140454" target="_blank" rel="external">查看官网详细介绍</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line">关注/取消关注事件</div><div class="line"></div><div class="line">用户在关注与取消关注公众号时，微信会把这个事件推送到开发者填写的URL。方便开发者给用户下发欢迎消息或者做帐号的解绑。 </div><div class="line"></div><div class="line">微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次 </div><div class="line"></div><div class="line">关于重试的消息排重，推荐使用FromUserName + CreateTime 排重。 </div><div class="line"></div><div class="line">假如服务器无法保证在五秒内处理并回复，可以直接回复空串，微信服务器不会对此作任何处理，并且不会发起重试。 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[subscribe]]&gt;&lt;/Event&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line">参数  		描述 </div><div class="line"></div><div class="line">ToUserName  	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，subscribe(订阅)、unsubscribe(取消订阅)  </div><div class="line"></div><div class="line">扫描带参数二维码事件</div><div class="line"></div><div class="line">用户扫描带场景值二维码时，可能推送以下两种事件： </div><div class="line">1. 如果用户还未关注公众号，则用户可以关注公众号，关注后微信会将带场景值关注事件推送给开发者。 </div><div class="line">2. 如果用户已经关注公众号，则微信会将带场景值扫描事件推送给开发者。 </div><div class="line"></div><div class="line">1. 用户未关注时，进行关注后的事件推送 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[subscribe]]&gt;&lt;/Event&gt;</div><div class="line">&lt;EventKey&gt;&lt;![CDATA[qrscene_123123]]&gt;&lt;/EventKey&gt;</div><div class="line">&lt;Ticket&gt;&lt;![CDATA[TICKET]]&gt;&lt;/Ticket&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line">参数  		描述 </div><div class="line"></div><div class="line">ToUserName  	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，subscribe  </div><div class="line">EventKey  	事件KEY值，qrscene_为前缀，后面为二维码的参数值  </div><div class="line">Ticket  	二维码的ticket，可用来换取二维码图片  </div><div class="line"></div><div class="line">2. 用户已关注时的事件推送 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[SCAN]]&gt;&lt;/Event&gt;</div><div class="line">&lt;EventKey&gt;&lt;![CDATA[SCENE_VALUE]]&gt;&lt;/EventKey&gt;</div><div class="line">&lt;Ticket&gt;&lt;![CDATA[TICKET]]&gt;&lt;/Ticket&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line">参数  		描述 </div><div class="line"></div><div class="line">ToUserName  	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，SCAN  </div><div class="line">EventKey  	事件KEY值，是一个32位无符号整数，即创建二维码时的二维码scene_id  </div><div class="line">Ticket  	二维码的ticket，可用来换取二维码图片  </div><div class="line"></div><div class="line">上报地理位置事件</div><div class="line"></div><div class="line">用户同意上报地理位置后，每次进入公众号会话时，都会在进入时上报地理位置，或在进入会话后每5秒上报一次地理位置，公众号可以在公众平台网站中修改以上设置。上报地理位置时，微信会将上报地理位置事件推送到开发者填写的URL。 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[LOCATION]]&gt;&lt;/Event&gt;</div><div class="line">&lt;Latitude&gt;23.137466&lt;/Latitude&gt;</div><div class="line">&lt;Longitude&gt;113.352425&lt;/Longitude&gt;</div><div class="line">&lt;Precision&gt;119.385040&lt;/Precision&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line"></div><div class="line">参数  		描述 </div><div class="line"></div><div class="line">ToUserName  	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，LOCATION  </div><div class="line">Latitude  	地理位置纬度  </div><div class="line">Longitude  	地理位置经度  </div><div class="line">Precision  	地理位置精度  </div><div class="line"></div><div class="line">自定义菜单事件</div><div class="line"></div><div class="line">用户点击自定义菜单后，微信会把点击事件推送给开发者，请注意，点击菜单弹出子菜单，不会产生上报。 </div><div class="line"></div><div class="line"> 点击菜单拉取消息时的事件推送 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[CLICK]]&gt;&lt;/Event&gt;</div><div class="line">&lt;EventKey&gt;&lt;![CDATA[EVENTKEY]]&gt;&lt;/EventKey&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line">参数    	描述 </div><div class="line"></div><div class="line">ToUserName  	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，CLICK  </div><div class="line">EventKey  	事件KEY值，与自定义菜单接口中KEY值对应  </div><div class="line"></div><div class="line"></div><div class="line"> 点击菜单跳转链接时的事件推送 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[VIEW]]&gt;&lt;/Event&gt;</div><div class="line">&lt;EventKey&gt;&lt;![CDATA[www.qq.com]]&gt;&lt;/EventKey&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line">参数  		描述 </div><div class="line"></div><div class="line">ToUserName   	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，VIEW  </div><div class="line">EventKey  	事件KEY值，设置的跳转URL</div></pre></td></tr></table></figure>
<p>其中用户可以向微信服务器发送的消息类型大概可以分为：文本消息，图片消息，语音消息，视频消息，小视频消息，地理位置消息，链接消息。</p>
<p>根据观察可以知道这些消息中，都会传回来这些公共的字段如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ToUserName（开发者微信号）;</div><div class="line"></div><div class="line">FromUserName（发送方帐 号，OPEN_ID）;</div><div class="line"></div><div class="line">CreateTime（消息的创建时间）;</div><div class="line"></div><div class="line">MsgType（消息类型）;</div><div class="line"></div><div class="line">MsgId（消息ID）;</div></pre></td></tr></table></figure></p>
<p>我们把这些封装成一个基类，然后 不同的部分，分别封装为各自的类，这样提高代码的重用性。</p>
<h2 id="事件的基类BaseEvent"><a href="#事件的基类BaseEvent" class="headerlink" title="事件的基类BaseEvent"></a>事件的基类BaseEvent</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.event;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 事件基类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:35:47</div><div class="line"> */</div><div class="line">public class BaseEvent &#123;</div><div class="line">    </div><div class="line">    // 开发者微信号</div><div class="line">    private String ToUserName;</div><div class="line">    </div><div class="line">    // 发送方帐号（一个OpenID）</div><div class="line">    private String FromUserName;</div><div class="line">    </div><div class="line">    // 消息创建时间 （整型）</div><div class="line">    private long CreateTime;</div><div class="line">    </div><div class="line">    // 消息类型</div><div class="line">    private String MsgType;</div><div class="line">    </div><div class="line">    // 事件类型</div><div class="line">    private String Event;</div><div class="line"></div><div class="line">    public String getToUserName() &#123;</div><div class="line">        return ToUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setToUserName(String toUserName) &#123;</div><div class="line">        ToUserName = toUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getFromUserName() &#123;</div><div class="line">        return FromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFromUserName(String fromUserName) &#123;</div><div class="line">        FromUserName = fromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getCreateTime() &#123;</div><div class="line">        return CreateTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCreateTime(long createTime) &#123;</div><div class="line">        CreateTime = createTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMsgType() &#123;</div><div class="line">        return MsgType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMsgType(String msgType) &#123;</div><div class="line">        MsgType = msgType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getEvent() &#123;</div><div class="line">        return Event;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setEvent(String event) &#123;</div><div class="line">        Event = event;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-关注-取消关注事件"><a href="#1-关注-取消关注事件" class="headerlink" title="1.关注/取消关注事件"></a>1.关注/取消关注事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.event;</div><div class="line">/**</div><div class="line"> * 关注/取消关注事件</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:36:48</div><div class="line"> */</div><div class="line">public class SubscribeEvent extends BaseEvent&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-扫描带参数二维码事件"><a href="#2-扫描带参数二维码事件" class="headerlink" title="2.扫描带参数二维码事件"></a>2.扫描带参数二维码事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.event;</div><div class="line">/**</div><div class="line"> * 扫描带参数二维码事件</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:37:41</div><div class="line"> */</div><div class="line">public class QRCodeEvent extends BaseEvent&#123;</div><div class="line">    </div><div class="line">    // 事件KEY值</div><div class="line">    private String EventKey;</div><div class="line">    </div><div class="line">    // 用于换取二维码图片</div><div class="line">    private String Ticket;</div><div class="line"></div><div class="line">    public String getEventKey() &#123;</div><div class="line">        return EventKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setEventKey(String eventKey) &#123;</div><div class="line">        EventKey = eventKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getTicket() &#123;</div><div class="line">        return Ticket;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTicket(String ticket) &#123;</div><div class="line">        Ticket = ticket;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-上报地理位置事件"><a href="#3-上报地理位置事件" class="headerlink" title="3.上报地理位置事件"></a>3.上报地理位置事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.event;</div><div class="line">/**</div><div class="line"> * 上报地理位置事件</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:38:36</div><div class="line"> */</div><div class="line">public class LocationEvent extends BaseEvent&#123;</div><div class="line">    </div><div class="line">    // 地理位置纬度</div><div class="line">    private String Latitude;</div><div class="line">    </div><div class="line">    // 地理位置经度</div><div class="line">    private String Longitude;</div><div class="line">    </div><div class="line">    // 地理位置精度</div><div class="line">    private String Precision;</div><div class="line"></div><div class="line">    public String getLatitude() &#123;</div><div class="line">        return Latitude;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLatitude(String latitude) &#123;</div><div class="line">        Latitude = latitude;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLongitude() &#123;</div><div class="line">        return Longitude;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLongitude(String longitude) &#123;</div><div class="line">        Longitude = longitude;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getPrecision() &#123;</div><div class="line">        return Precision;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPrecision(String precision) &#123;</div><div class="line">        Precision = precision;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-自定义菜单事件"><a href="#4-自定义菜单事件" class="headerlink" title="4.自定义菜单事件"></a>4.自定义菜单事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.event;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 自定义菜单事件</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:39:34</div><div class="line"> */</div><div class="line">public class MenuEvent extends BaseEvent &#123;</div><div class="line"></div><div class="line">    // 事件KEY值，与自定义菜单接口中KEY值对应</div><div class="line">    private String EventKey;</div><div class="line"></div><div class="line">    public String getEventKey() &#123;</div><div class="line">        return EventKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setEventKey(String eventKey) &#123;</div><div class="line">        EventKey = eventKey;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="三：封装响应消息"><a href="#三：封装响应消息" class="headerlink" title="三：封装响应消息"></a>三：封装响应消息</h1><p><img src="/2018/01/25/微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装-三/被动回复用户消息.png" alt="被动回复用户消息"><br>当用户发送消息给公众号时（或某些特定的用户操作引发的事件推送时），会产生一个POST请求，开发者可以在响应包（Get）中返回特定XML结构，来对该消息进行响应（现支持回复文本、图片、图文、语音、视频、音乐）。严格来说，发送被动响应消息其实并不是一种接口，而是对微信服务器发过来消息的一次回复。<br>各消息类型需要的XML数据包结构如下：<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140543" target="_blank" rel="external">查看官网详细介绍</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line">回复文本消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Content&gt;&lt;![CDATA[你好]]&gt;&lt;/Content&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数     	是否必须     	描述</div><div class="line">ToUserName    	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间 （整型）</div><div class="line">MsgType     	是     		text</div><div class="line">Content     	是     		回复的消息内容（换行：在content中能够换行，微信客户端就支持换行显示）</div><div class="line"></div><div class="line">回复图片消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[image]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Image&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;/Image&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数     	是否必须    	说明</div><div class="line">ToUserName     	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间 （整型）</div><div class="line">MsgType     	是     		image</div><div class="line">MediaId     	是     		通过素材管理接口上传多媒体文件，得到的id。</div><div class="line"></div><div class="line"></div><div class="line">回复语音消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[voice]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Voice&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;/Voice&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数     	是否必须     	说明</div><div class="line">ToUserName     	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间戳 （整型）</div><div class="line">MsgType     	是     		语音，voice</div><div class="line">MediaId     	是     		通过素材管理接口上传多媒体文件，得到的id</div><div class="line"></div><div class="line"></div><div class="line">回复视频消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[video]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Video&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;Title&gt;&lt;![CDATA[title]]&gt;&lt;/Title&gt;</div><div class="line">&lt;Description&gt;&lt;![CDATA[description]]&gt;&lt;/Description&gt;</div><div class="line">&lt;/Video&gt; </div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数     	是否必须     	说明</div><div class="line">ToUserName     	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间 （整型）</div><div class="line">MsgType     	是     		video</div><div class="line">MediaId     	是     		通过素材管理接口上传多媒体文件，得到的id</div><div class="line">Title     	否     		视频消息的标题</div><div class="line">Description     否     		视频消息的描述</div><div class="line"></div><div class="line">回复音乐消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[music]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Music&gt;</div><div class="line">&lt;Title&gt;&lt;![CDATA[TITLE]]&gt;&lt;/Title&gt;</div><div class="line">&lt;Description&gt;&lt;![CDATA[DESCRIPTION]]&gt;&lt;/Description&gt;</div><div class="line">&lt;MusicUrl&gt;&lt;![CDATA[MUSIC_Url]]&gt;&lt;/MusicUrl&gt;</div><div class="line">&lt;HQMusicUrl&gt;&lt;![CDATA[HQ_MUSIC_Url]]&gt;&lt;/HQMusicUrl&gt;</div><div class="line">&lt;ThumbMediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/ThumbMediaId&gt;</div><div class="line">&lt;/Music&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数     	是否必须    	说明</div><div class="line">ToUserName     	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间 （整型）</div><div class="line">MsgType     	是     		music</div><div class="line">Title     	否     		音乐标题</div><div class="line">Description     否     		音乐描述</div><div class="line">MusicURL     	否     		音乐链接</div><div class="line">HQMusicUrl     	否     		高质量音乐链接，WIFI环境优先使用该链接播放音乐</div><div class="line">ThumbMediaId    否     		缩略图的媒体id，通过素材管理接口上传多媒体文件，得到的id</div><div class="line"></div><div class="line">回复图文消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;ArticleCount&gt;2&lt;/ArticleCount&gt;</div><div class="line">&lt;Articles&gt;</div><div class="line">&lt;item&gt;</div><div class="line">&lt;Title&gt;&lt;![CDATA[title1]]&gt;&lt;/Title&gt; </div><div class="line">&lt;Description&gt;&lt;![CDATA[description1]]&gt;&lt;/Description&gt;</div><div class="line">&lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;</div><div class="line">&lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;</div><div class="line">&lt;/item&gt;</div><div class="line">&lt;item&gt;</div><div class="line">&lt;Title&gt;&lt;![CDATA[title]]&gt;&lt;/Title&gt;</div><div class="line">&lt;Description&gt;&lt;![CDATA[description]]&gt;&lt;/Description&gt;</div><div class="line">&lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;</div><div class="line">&lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;</div><div class="line">&lt;/item&gt;</div><div class="line">&lt;/Articles&gt;</div><div class="line">&lt;/xml&gt; </div><div class="line"></div><div class="line">参数     	是否必须    	说明</div><div class="line">ToUserName     	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间 （整型）</div><div class="line">MsgType     	是     		news</div><div class="line">ArticleCount    是     		图文消息个数，限制为10条以内</div><div class="line">Articles     	是     		多条图文消息信息，默认第一个item为大图,注意，如果图文数超过10，则将会无响应</div><div class="line">Title     	否     		图文消息标题</div><div class="line">Description     否     		图文消息描述</div><div class="line">PicUrl     	否     		图片链接，支持JPG、PNG格式，较好的效果为大图360*200，小图200*200</div><div class="line">Url     	否     		点击图文消息跳转链接</div></pre></td></tr></table></figure>
<p>同样，把消息回复中定义的所有消息都有的字段提取出来，封装成一个基类，</p>
<p>这些公有的字段包括：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ToUserName（接收方帐号，用户的OPEN_ID）;</div><div class="line"></div><div class="line">FromUserName（开发者的微信号）;</div><div class="line"></div><div class="line">CreateTime（消 息的创建时间）;</div><div class="line"></div><div class="line">MsgType（消息类型）;</div><div class="line"></div><div class="line">FuncFlag（消息的星标标识）;</div></pre></td></tr></table></figure>
<h2 id="响应消息的基类BaseMessage："><a href="#响应消息的基类BaseMessage：" class="headerlink" title="响应消息的基类BaseMessage："></a>响应消息的基类BaseMessage：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 消息基类（公众帐号 -&gt; 普通用户）</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:33:50</div><div class="line"> */</div><div class="line">public class BaseMessage &#123;</div><div class="line"></div><div class="line">    // 接收方帐号（收到的OpenID）</div><div class="line">    private String ToUserName;</div><div class="line">    </div><div class="line">    // 开发者微信号</div><div class="line">    private String FromUserName;</div><div class="line">    </div><div class="line">    // 消息创建时间 （整型）</div><div class="line">    private long CreateTime;</div><div class="line">    </div><div class="line">    // 消息类型</div><div class="line">    private String MsgType;</div><div class="line"></div><div class="line">    public String getToUserName() &#123;</div><div class="line">        return ToUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setToUserName(String toUserName) &#123;</div><div class="line">        ToUserName = toUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getFromUserName() &#123;</div><div class="line">        return FromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFromUserName(String fromUserName) &#123;</div><div class="line">        FromUserName = fromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getCreateTime() &#123;</div><div class="line">        return CreateTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCreateTime(long createTime) &#123;</div><div class="line">        CreateTime = createTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMsgType() &#123;</div><div class="line">        return MsgType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMsgType(String msgType) &#123;</div><div class="line">        MsgType = msgType;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-回复文本消息："><a href="#1-回复文本消息：" class="headerlink" title="1.回复文本消息："></a>1.回复文本消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 文本消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:34:43</div><div class="line"> */</div><div class="line">public class TextMessage extends BaseMessage&#123;</div><div class="line"></div><div class="line">    // 回复的消息内容</div><div class="line">    private String Content;</div><div class="line"></div><div class="line">    public String getContent() &#123;</div><div class="line">        return Content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setContent(String content) &#123;</div><div class="line">        Content = content;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-回复图片消息："><a href="#2-回复图片消息：" class="headerlink" title="2.回复图片消息："></a>2.回复图片消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line">/**</div><div class="line"> *  图片</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:46:36</div><div class="line"> */</div><div class="line">public class Image &#123;</div><div class="line">    private String MediaId;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line">/**</div><div class="line"> * 图片消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:51:36</div><div class="line"> */</div><div class="line">public class ImageMessage extends BaseMessage &#123;</div><div class="line">    </div><div class="line">    private Image Image;</div><div class="line"></div><div class="line">    public Image getImage() &#123;</div><div class="line">        return Image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setImage(Image image) &#123;</div><div class="line">        Image = image;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-回复语音消息："><a href="#3-回复语音消息：" class="headerlink" title="3.回复语音消息："></a>3.回复语音消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 语音model</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:52:02</div><div class="line"> */</div><div class="line">public class Voice &#123;</div><div class="line"></div><div class="line">    // 媒体文件id</div><div class="line">    private String MediaId;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 语音消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:52:49</div><div class="line"> */</div><div class="line">public class VoiceMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 语音</div><div class="line">    private Voice Voice;</div><div class="line"></div><div class="line">    public Voice getVoice() &#123;</div><div class="line">        return Voice;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setVoice(Voice voice) &#123;</div><div class="line">        Voice = voice;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-回复视频消息："><a href="#4-回复视频消息：" class="headerlink" title="4.回复视频消息："></a>4.回复视频消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 视频model</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:53:28</div><div class="line"> */</div><div class="line">public class Video &#123;</div><div class="line"></div><div class="line">    // 媒体文件id</div><div class="line">    private String MediaId;</div><div class="line"></div><div class="line">    // 缩略图的媒体id</div><div class="line">    private String ThumbMediaId;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getThumbMediaId() &#123;</div><div class="line">        return ThumbMediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setThumbMediaId(String thumbMediaId) &#123;</div><div class="line">        ThumbMediaId = thumbMediaId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 视频消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:54:03</div><div class="line"> */</div><div class="line">public class VideoMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 视频</div><div class="line">    private Video Video;</div><div class="line"></div><div class="line">    public Video getVideo() &#123;</div><div class="line">        return Video;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setVideo(Video video) &#123;</div><div class="line">        Video = video;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-回复音乐消息："><a href="#5-回复音乐消息：" class="headerlink" title="5.回复音乐消息："></a>5.回复音乐消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 音乐model</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:54:50</div><div class="line"> */</div><div class="line">public class Music &#123;</div><div class="line"></div><div class="line">    // 音乐标题</div><div class="line">    private String Title;</div><div class="line"></div><div class="line">    // 音乐描述</div><div class="line">    private String Description;</div><div class="line"></div><div class="line">    // 音乐链接</div><div class="line">    private String MusicUrl;</div><div class="line"></div><div class="line">    // 高质量音乐链接，WIFI环境优先使用该链接播放音乐</div><div class="line">    private String HQMusicUrl;</div><div class="line"></div><div class="line">    // 缩略图的媒体id，通过上传多媒体文件得到的id</div><div class="line">    private String ThumbMediaId;</div><div class="line"></div><div class="line">    public String getTitle() &#123;</div><div class="line">        return Title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTitle(String title) &#123;</div><div class="line">        Title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDescription() &#123;</div><div class="line">        return Description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDescription(String description) &#123;</div><div class="line">        Description = description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMusicUrl() &#123;</div><div class="line">        return MusicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMusicUrl(String musicUrl) &#123;</div><div class="line">        MusicUrl = musicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getHQMusicUrl() &#123;</div><div class="line">        return HQMusicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setHQMusicUrl(String musicUrl) &#123;</div><div class="line">        HQMusicUrl = musicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getThumbMediaId() &#123;</div><div class="line">        return ThumbMediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setThumbMediaId(String thumbMediaId) &#123;</div><div class="line">        ThumbMediaId = thumbMediaId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 音乐消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:55:28</div><div class="line"> */</div><div class="line">public class MusicMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 音乐</div><div class="line">    private Music Music;</div><div class="line"></div><div class="line">    public Music getMusic() &#123;</div><div class="line">        return Music;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMusic(Music music) &#123;</div><div class="line">        Music = music;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-回复图文消息："><a href="#6-回复图文消息：" class="headerlink" title="6.回复图文消息："></a>6.回复图文消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 图文model</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:55:56</div><div class="line"> */</div><div class="line">public class Article &#123;</div><div class="line"></div><div class="line">    // 图文消息名称</div><div class="line">    private String Title;</div><div class="line"></div><div class="line">    // 图文消息描述</div><div class="line">    private String Description;</div><div class="line"></div><div class="line">    // 图片链接，支持JPG、PNG格式，较好的效果为大图640*320，小图80*80</div><div class="line">    private String PicUrl;</div><div class="line"></div><div class="line">    // 点击图文消息跳转链接</div><div class="line">    private String Url;</div><div class="line"></div><div class="line">    public String getTitle() &#123;</div><div class="line">        return Title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTitle(String title) &#123;</div><div class="line">        Title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDescription() &#123;</div><div class="line">        return null == Description ? &quot;&quot; : Description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDescription(String description) &#123;</div><div class="line">        Description = description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getPicUrl() &#123;</div><div class="line">        return null == PicUrl ? &quot;&quot; : PicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPicUrl(String picUrl) &#123;</div><div class="line">        PicUrl = picUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUrl() &#123;</div><div class="line">        return null == Url ? &quot;&quot; : Url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUrl(String url) &#123;</div><div class="line">        Url = url;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 文本消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:56:32</div><div class="line"> */</div><div class="line">public class NewsMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 图文消息个数，限制为10条以内</div><div class="line">    private int ArticleCount;</div><div class="line"></div><div class="line">    // 多条图文消息信息，默认第一个item为大图</div><div class="line">    private List&lt;Article&gt; Articles;</div><div class="line"></div><div class="line">    public int getArticleCount() &#123;</div><div class="line">        return ArticleCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setArticleCount(int articleCount) &#123;</div><div class="line">        ArticleCount = articleCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;Article&gt; getArticles() &#123;</div><div class="line">        return Articles;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setArticles(List&lt;Article&gt; articles) &#123;</div><div class="line">        Articles = articles;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/2018/01/25/微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装-三/代码.png" alt="代码"></p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：封装请求信息&quot;&gt;&lt;a href=&quot;#一：封装请求信息&quot; class=&quot;headerlink&quot; title=&quot;一：封装请求信息&quot;&gt;&lt;/a&gt;一：封装请求信息&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/01/25/微信公共号开发教程java版——请求消息，响应消
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/25/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%90%AF%E7%94%A8%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%8C%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/25/微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发-二/</id>
    <published>2018-01-25T08:45:30.000Z</published>
    <updated>2018-02-01T12:41:44.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：微信公众号对接的基本介绍"><a href="#一：微信公众号对接的基本介绍" class="headerlink" title="一：微信公众号对接的基本介绍"></a>一：微信公众号对接的基本介绍</h1><h2 id="填写服务器配置信息的介绍"><a href="#填写服务器配置信息的介绍" class="headerlink" title="填写服务器配置信息的介绍"></a>填写服务器配置信息的介绍</h2><p>在微信公众平台认证之前，我们可以先申请一个测试的公众号来进行测试，这对开发人员来说还是有很大好处的！<br>为什么要申请测试账号？</p>
<p>主要是因为测试账号比我们没有认证的微信账号权限大一点。足够测试我们的接口了，点击<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p>
<h1 id="二：微信服务器对接的实现代码部分"><a href="#二：微信服务器对接的实现代码部分" class="headerlink" title="二：微信服务器对接的实现代码部分"></a>二：微信服务器对接的实现代码部分</h1><h2 id="创建java项目"><a href="#创建java项目" class="headerlink" title="创建java项目"></a>创建java项目</h2><ol>
<li><p>新建一个名SpringBoot项目,名为wyj-wechat-demo。<br><img src="/2018/01/25/微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发-二/newproject.png" alt="newproject"></p>
</li>
<li><p>新建一个servlet类，来接收微信服务器传来信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.servlet;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.io.PrintWriter;</div><div class="line"></div><div class="line">import javax.servlet.ServletException;</div><div class="line">import javax.servlet.annotation.WebServlet;</div><div class="line">import javax.servlet.http.HttpServlet;</div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import com.wyj.wechart.service.CoreService;</div><div class="line">import com.wyj.wechart.utils.SignUtil;</div><div class="line">/**</div><div class="line"> * 来接收微信服务器传来信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午2:17:39</div><div class="line"> */</div><div class="line">@WebServlet(urlPatterns = &quot;/wechart&quot;, description = &quot;wechart&quot;)</div><div class="line">public class CoreServlet extends HttpServlet &#123;</div><div class="line">    private static final long serialVersionUID = -8685285401859800066L;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 确认请求来自微信服务器</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</div><div class="line">        System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;doGet()&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);</div><div class="line">        // 微信加密签名  </div><div class="line">        String signature = req.getParameter(&quot;signature&quot;);  </div><div class="line">        // 时间戳  </div><div class="line">        String timestamp = req.getParameter(&quot;timestamp&quot;);  </div><div class="line">        // 随机数  </div><div class="line">        String nonce = req.getParameter(&quot;nonce&quot;);  </div><div class="line">        // 随机字符串  </div><div class="line">        String echostr = req.getParameter(&quot;echostr&quot;);  </div><div class="line">  </div><div class="line">        PrintWriter out = resp.getWriter();  </div><div class="line">        // 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败  </div><div class="line">        if (SignUtil.checkSignature(signature, timestamp, nonce)) &#123;  </div><div class="line">            out.print(echostr);  </div><div class="line">        &#125;  </div><div class="line">        out.close();  </div><div class="line">        out = null;  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 处理微信服务器发来的消息</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</div><div class="line">        System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;doPost()&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);</div><div class="line">		// TODO 消息的接收、处理、响应</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>加密校验程序的工具类。<br>这个校验的方法，可以通过分析官方文档的demo，然后通过java语言来写出。<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319" target="_blank" rel="external">官方php校验代码一览</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line">import java.util.Arrays;</div><div class="line">/**</div><div class="line"> * 请求校验工具类 </div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月22日 下午3:45:15</div><div class="line"> */</div><div class="line">public class SignUtil &#123;</div><div class="line">    // 与接口配置信息中的Token要一致  </div><div class="line">    private static String token = &quot;wechart&quot;;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 验证签名 </div><div class="line">     *  </div><div class="line">     * @param signature </div><div class="line">     * @param timestamp </div><div class="line">     * @param nonce </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static boolean checkSignature(String signature, String timestamp, String nonce) &#123;  </div><div class="line">        String[] arr = new String[] &#123; token, timestamp, nonce &#125;;  </div><div class="line">        // 将token、timestamp、nonce三个参数进行字典序排序  </div><div class="line">        Arrays.sort(arr);  </div><div class="line">        StringBuilder content = new StringBuilder();  </div><div class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;  </div><div class="line">            content.append(arr[i]);  </div><div class="line">        &#125;  </div><div class="line">        MessageDigest md = null;  </div><div class="line">        String tmpStr = null;  </div><div class="line">  </div><div class="line">        try &#123;  </div><div class="line">            md = MessageDigest.getInstance(&quot;SHA-1&quot;);  </div><div class="line">            // 将三个参数字符串拼接成一个字符串进行sha1加密  </div><div class="line">            byte[] digest = md.digest(content.toString().getBytes());  </div><div class="line">            tmpStr = byteToStr(digest);  </div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        content = null;  </div><div class="line">        // 将sha1加密后的字符串可与signature对比，标识该请求来源于微信  </div><div class="line">        return tmpStr != null ? tmpStr.equals(signature.toUpperCase()) : false;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 将字节数组转换为十六进制字符串 </div><div class="line">     *  </div><div class="line">     * @param byteArray </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    private static String byteToStr(byte[] byteArray) &#123;  </div><div class="line">        String strDigest = &quot;&quot;;  </div><div class="line">        for (int i = 0; i &lt; byteArray.length; i++) &#123;  </div><div class="line">            strDigest += byteToHexStr(byteArray[i]);  </div><div class="line">        &#125;  </div><div class="line">        return strDigest;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 将字节转换为十六进制字符串 </div><div class="line">     *  </div><div class="line">     * @param mByte </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    private static String byteToHexStr(byte mByte) &#123;  </div><div class="line">        char[] Digit = &#123; &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos; &#125;;  </div><div class="line">        char[] tempArr = new char[2];  </div><div class="line">        tempArr[0] = Digit[(mByte &gt;&gt;&gt; 4) &amp; 0X0F];  </div><div class="line">        tempArr[1] = Digit[mByte &amp; 0X0F];  </div><div class="line">  </div><div class="line">        String s = new String(tempArr);  </div><div class="line">        return s;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改服务器端口为80端口<br>SpringBoot application.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server.port=80</div><div class="line"></div><div class="line">spring.freemarker.cache=false</div><div class="line">spring.freemarker.charset=UTF-8</div><div class="line">spring.freemarker.check-template-location=true</div><div class="line">spring.freemarker.content-type=text/html</div><div class="line">spring.freemarker.expose-request-attributes=true</div><div class="line">spring.freemarker.expose-session-attributes=true</div><div class="line">spring.freemarker.request-context-attribute=request</div><div class="line">spring.freemarker.template-loader-path=classpath:/templates</div><div class="line">spring.freemarker.suffix=.html</div><div class="line">spring.mvc.static-path-pattern=/static/**</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="三：填写服务器配置"><a href="#三：填写服务器配置" class="headerlink" title="三：填写服务器配置"></a>三：填写服务器配置</h1><p>微信公众号测试环境接入示例：<br><img src="/2018/01/25/微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发-二/测试号管理.png" alt="测试号管理"></p>
<p>服务器配置：</p>
<p>　　URL：是开发者用来接收微信消息和事件 的接口URL。（必须以<a href="http://开头，目前支持80端口）" target="_blank" rel="external">http://开头，目前支持80端口）</a></p>
<p>　　Token：可由开发者可以任意填写，用作生成签名（该Token会和接口URL中包含的Token进行比对，从而验证安全性）。注意必须为英文或数字，长度为3-32字符。</p>
<p>说明：如果提示“token验证失败”，可以先重次几次，微信服务器有时候不稳定，也有可能映射不稳定。URL改成自己的URL，Token要对应自己在SignUtil里面填写的Token值。</p>
<h2 id="验证服务器地址的有效性"><a href="#验证服务器地址的有效性" class="headerlink" title="验证服务器地址的有效性"></a>验证服务器地址的有效性</h2><p>开发者提交信息后，微信服务器将发送GET请求到填写的服务器地址URL上，GET请求携带四个参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>signature</td>
<td style="text-align:center">微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数</td>
</tr>
<tr>
<td>timestamp</td>
<td style="text-align:center">时间戳</td>
</tr>
<tr>
<td>nonce</td>
<td style="text-align:center">随机数</td>
</tr>
<tr>
<td>echostr</td>
<td style="text-align:center">随机字符串</td>
</tr>
</tbody>
</table>
<p>开发者通过检验signature对请求进行校验（下面有校验方式）。若确认此次GET请求来自微信服务器，请原样返回echostr参数内容，则接入生效，成为开发者成功，否则接入失败。</p>
<p>加密/校验流程如下：</p>
<ol>
<li><p>将token、timestamp、nonce三个参数进行字典序排序</p>
</li>
<li><p>将三个参数字符串拼接成一个字符串进行sha1加密</p>
</li>
<li><p>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</p>
</li>
</ol>
<h2 id="Token校验是否成功"><a href="#Token校验是否成功" class="headerlink" title="Token校验是否成功"></a>Token校验是否成功</h2><p>成功启用后如图：<br><img src="/2018/01/25/微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发-二/a.png" alt="a"><br>恭喜，你成功启用开发模式。</p>
<p>启用并设置服务器配置后，用户发给公众号的消息以及开发者需要的事件推送，将被微信转发到该URL中。</p>
<p>成为开发者后，用户每次向公众号发送消息、或者产生自定义菜单、或产生微信支付订单等情况时，开发者填写的服务器配置URL将得到微信服务器推送过来的消息和事件，开发者可以依据自身业务逻辑进行响应，如回复消息。</p>
<p>这些配置可以参照我的其他博客文章进行配置，这里就不多说了。<br>以上介绍也可以参考  <a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="external">微信开发文档</a>。</p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：微信公众号对接的基本介绍&quot;&gt;&lt;a href=&quot;#一：微信公众号对接的基本介绍&quot; class=&quot;headerlink&quot; title=&quot;一：微信公众号对接的基本介绍&quot;&gt;&lt;/a&gt;一：微信公众号对接的基本介绍&lt;/h1&gt;&lt;h2 id=&quot;填写服务器配置信息的介绍&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——基础知识和环境搭建(一)</title>
    <link href="http://wangyuanjun.cn/2018/01/23/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E4%B8%80/"/>
    <id>http://wangyuanjun.cn/2018/01/23/微信公共号开发教程java版——基础知识和环境搭建-一/</id>
    <published>2018-01-23T08:46:07.000Z</published>
    <updated>2018-02-01T12:27:42.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：微信公共号基础知识"><a href="#一：微信公共号基础知识" class="headerlink" title="一：微信公共号基础知识"></a>一：微信公共号基础知识</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>微信公众号是开发者或商家在微信公众平台上申请的应用账号，该帐号与QQ账号互通，通过公众号，商家可在微信平台上实现和特定群体的文字、图片、语音、视频的全方位沟通、互动 。形成了一种主流的线上线下微信互动营销方式。</p>
<h2 id="分类及区别"><a href="#分类及区别" class="headerlink" title="分类及区别"></a>分类及区别</h2><p>微信公众号分为订阅号和服务号。<br>1、订阅号，任何组织和个人都可以申请，每天群发一条信息，认证后有自定义菜单。没有高级接口，不能用开发模式。<br>2、选择服务号，只面向企业或组织机构申请注册，申请后自带自定义菜单。认证后可以有高级接口，每周群发一条信息。均不可主动添加微信好友。</p>
<h2 id="通讯机制"><a href="#通讯机制" class="headerlink" title="通讯机制"></a>通讯机制</h2><p>作为开发者，我们需要面对的主要有两个对象：微信服务器和应用程序（网站）服务器。<br>当微信用户向你的公众平台发送一条消息，实际上这条消息首先发送到微信服务器，由微信服务器向网站服务器发起另外一个请求，网站服务器返回这个请求的结果，再由微信服务器发送到微信客户端。</p>
<p>整个消息通讯流程如下图：<br><img src="/2018/01/23/微信公共号开发教程java版——基础知识和环境搭建-一/通讯机制.png" alt="通讯机制"></p>
<h1 id="二：微信公共号环境搭建"><a href="#二：微信公共号环境搭建" class="headerlink" title="二：微信公共号环境搭建"></a>二：微信公共号环境搭建</h1><h2 id="服务器准备"><a href="#服务器准备" class="headerlink" title="服务器准备"></a>服务器准备</h2><ol>
<li><p>方式一：买的云主机。</p>
</li>
<li><p>方式二：BAE（注册百度账号，然后登录 <a href="https://login.bce.baidu.com/" target="_blank" rel="external">百度云开发平台</a> ）。</p>
</li>
<li><p>方式三：SAE（注册新浪微博，然后登录 <a href="http://www.sinacloud.com/sae.html" target="_blank" rel="external">新浪云SAE</a> ）。</p>
</li>
<li><p>方式五：可以通过免费映射工具。比如：ngrok ，natapp ，花生壳 ，nginx 等;</p>
</li>
</ol>
<p>由于前面三种方式都是发布到公网的的，出现问题不能在本地调试，需要在本地搭建测试环境，我将使用ngrop工具，使本地搭建的服务器能够外网能够访问，将运行在内网的服务器映射到外网去给微信访问。</p>
<h2 id="ngrop工具使用"><a href="#ngrop工具使用" class="headerlink" title="ngrop工具使用"></a>ngrop工具使用</h2><p>首先到官网<a href="https://ngrok.com" target="_blank" rel="external">https://ngrok.com</a>注册并下载ngrok，得到一串授权码<br>在windows环境下，运行 ngrok -authtoken 你的授权码80，80是你本地Web服务的端口，而之后ngrok会记住你的授权码，直接 http ngrok 80就OK了<br>每次重启ngrop，ip地址都会变<br><img src="/2018/01/23/微信公共号开发教程java版——基础知识和环境搭建-一/ngrop.png" alt="ngrop"><br><img src="/2018/01/23/微信公共号开发教程java版——基础知识和环境搭建-一/a.png" alt="a"><br><img src="/2018/01/23/微信公共号开发教程java版——基础知识和环境搭建-一/b.png" alt="b"></p>
<font color="red">标红的地方是外网地址映射80端口，本地服务端口必须是80端口</font>


<h1 id="三：微信公共号相关资料"><a href="#三：微信公共号相关资料" class="headerlink" title="三：微信公共号相关资料"></a>三：微信公共号相关资料</h1><ol>
<li><p>申请一个微信号（下载微信客户端，手机注册，或是qq注册）</p>
</li>
<li><p>申请一个<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">微信公众平台接口测试帐号</a></p>
</li>
<li><p>申请一个<a href="https://mp.weixin.qq.com/" target="_blank" rel="external">微信公众号</a></p>
</li>
</ol>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：微信公共号基础知识&quot;&gt;&lt;a href=&quot;#一：微信公共号基础知识&quot; class=&quot;headerlink&quot; title=&quot;一：微信公共号基础知识&quot;&gt;&lt;/a&gt;一：微信公共号基础知识&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>nginx中修改server_name无效，修改为www.wecharttest.com无法访问，通过localhost可以访问</title>
    <link href="http://wangyuanjun.cn/2018/01/22/nginx%E4%B8%AD%E4%BF%AE%E6%94%B9server-name%E6%97%A0%E6%95%88%EF%BC%8C%E4%BF%AE%E6%94%B9%E4%B8%BAwww-wecharttest-com%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%EF%BC%8C%E9%80%9A%E8%BF%87localhost%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE/"/>
    <id>http://wangyuanjun.cn/2018/01/22/nginx中修改server-name无效，修改为www-wecharttest-com无法访问，通过localhost可以访问/</id>
    <published>2018-01-22T06:00:00.000Z</published>
    <updated>2018-02-01T12:24:09.227Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看微信公共号，需要通过软件Nginx，直接使用自己的内网作为电脑的服务器来进行一系列的操作以及调试(实现内网穿透，将内网的服务器映射到外网给别人访问)<br>但是在Nginx中，把server_name配置成自己的域名www.wecharttest.com无效。<br>解决方法：</p>
<p>linux下：</p>
<ol>
<li>sudo vi /etc/host</li>
</ol>
<p>增加 www.wecharttest.com 127.0.0.1</p>
<ol>
<li>sudo vi /etc/hosts</li>
</ol>
<p>增加 127.0.0.1 www.wecharttest.com</p>
<p>然后esc、:wq保存退出即可。</p>
<p>windows下：</p>
<p>修改C:\Windows\System32\drivers\etc下hosts文件即可，内容如linux下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看微信公共号，需要通过软件Nginx，直接使用自己的内网作为电脑的服务器来进行一系列的操作以及调试(实现内网穿透，将内网的服务器映射到外网给别人访问)&lt;br&gt;但是在Nginx中，把server_name配置成自己的域名www.wecharttest.com无效。&lt;br
    
    </summary>
    
      <category term="nginx" scheme="http://wangyuanjun.cn/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://wangyuanjun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习——session共享(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/16/Nginx%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94session%E5%85%B1%E4%BA%AB-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/16/Nginx学习——session共享-二/</id>
    <published>2018-01-16T08:04:58.000Z</published>
    <updated>2018-01-22T01:53:42.113Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博文说到了nginx session共享问题。由于 nginx 是随机分配请求，假设一个用户登录时访问网站登录时被分配到 192.168.43.3:8080 上，然后进行了登录操作，此时该服务器上就会有该用户登录的 session 信息，然后登陆后重定向到网站首页或个人中心时，此时如果被分配到 192.168.43.3:8081 上，那么这台服务器上没有该用户 session 信息，于是又会变成未登录状态，所以由于 nginx 的负载均衡会导致 session 共享的问题。</p>
<ol>
<li><p>不使用session，换用cookie<br>session是存放在服务器端的，cookie是存放在客户端的，我们可以把用户访问页面产生的session放到cookie里面，就是以cookie为中转站。你访问web服务器A，产生了session然后把它放到cookie里面，当你的请求被分配到B服务器时，服务器B先判断服务器有没有这个session，如果没有，再去看看客户端的cookie里面有没有这个session，如果也没有，说明session真的不存，如果cookie里面有，就把cookie里面的sessoin同步到服务器B，这样就可以实现session的同步了。<br>说明：这种方法实现起来简单，方便，也不会加大数据库的负担，但是如果客户端把cookie禁掉了的话，那么session就无从同步了，这样会给网站带来损失；cookie的安全性不高，虽然它已经加了密，但是还是可以伪造的。</p>
</li>
<li><p>session存在数据库（MySQL等）中<br>java可以配置将session保存在数据库中，这种方法是把存放session的表和其他数据库表放在一起，如果mysql也做了集群了话，每个mysql节点都要有这张表，并且这张session表的数据表要实时同步。<br>说明：用数据库来同步session，会加大数据库的IO，增加数据库的负担。而且数据库读写速度较慢，不利于session的适时同步。</p>
</li>
<li><p>ip_hash 策略<br>nginx 提供了 ip_hash 策略，可以保持用户 ip 进行 hash 值计算固定分配到某台服务器上，然后只要是该 ip 则会保持分配到该服务器上，保证用户访问的是同一台服务器，那么 session 问题就不存在了。这也是解决 session 共享的一种方式，也称为黏性 session。但是假设一台 tomcat 服务器挂了的话，那么 session 也会丢失。所以比较好的方案是抽取 session。</p>
</li>
<li><p>upstream_hash<br>为了解决ip_hash的一些问题，可以使用upstream_hash这个第三方模块，这个模块多数情况下是用作url_hash的，但是并不妨碍将它用来做session共享。没试过真心的不明白</p>
</li>
<li><p>session存在memcache或者redis中<br>此种方式将将用户的登录信息存储到redis中，因为是基于内存的读取，因此效率不会是响应效率的瓶颈，cookie中存储着jsessionid，不需要加密或处理，只需要存储redis中的key保存统一客户通过cookie中的key可以准确的登录信息或是其他有效的信息，此种方式，cookie的存储不需要加密计算成本，其次redis将信息存储到缓存中，存取效率高，后面会详细介绍此种方式实现过程。</p>
</li>
<li><p>基于tomcat容器session<br>此种方式在根本上实现共享session，他的实际情况是通过tomcat管理配置将一个tomct下的session复制到其他的tomcat的session池中，实现真实上的session共享；此种方式需要兼容tomcat配置及需要对其进行扩展，依赖性太强。</p>
</li>
</ol>
<h1 id="一：Redis-环境搭建"><a href="#一：Redis-环境搭建" class="headerlink" title="一：Redis 环境搭建"></a>一：Redis 环境搭建</h1><p>redis 依赖 gcc，先安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc-c++</div></pre></td></tr></table></figure></p>
<p>下载 redis，我使用的是 redis-3.2.11.tar.gz，上传至 linux /usr/local/redis-src / 中，解压</p>
<p>进入解压后目录 redis-3.2.11，执行 make 命令进行编译</p>
<p>安装到目录 /usr/local/redis</p>
<p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make PREFIX=/usr/local/redis install</div></pre></td></tr></table></figure></p>
<p>安装完成之后将 redis 配置文件拷贝到安装目录下，redis.conf 是 redis 的配置文件，redis.conf 在 redis 源码目录, port 默认 6379。<br>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /root/wyj/tools/redis/redis-3.2.11/redis.conf /usr/local/redis/</div></pre></td></tr></table></figure></p>
<p>在 redis 安装目录启动和关闭 redis：</p>
<p>启动：<br><img src="/2018/01/16/Nginx学习——session共享-二/redis.png" alt="redis"><br>这种启动方式叫做前端启动，必须保持在当前窗口，如果 ctrl + c 退出，那么 redis 也就退出了，不建议使用</p>
<p>那么后端启动：</p>
<p>首先修改 redis.conf 中 daemonize 的值，打开可以看到默认是 no，修改为 daemonize yes，启动即可。也可以在该配置文件中修改 redis 默认端口 6379 为其他值。<br><img src="/2018/01/16/Nginx学习——session共享-二/redis启动.png" alt="redis启动"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/redis-cli shutdown</div></pre></td></tr></table></figure></p>
<p>至此，redis 服务器搭建完成。</p>
<h1 id="二：下载相关jar"><a href="#二：下载相关jar" class="headerlink" title="二：下载相关jar"></a>二：下载相关jar</h1><ul>
<li><p>环境为 tomcat7 + jdk1.6 ：<br>  在所有需要共享 session 的服务器的 tomcat 中目录下：</p>
<p>  lib 目录中添加以下五个 jar 包，注意版本最好一致，不然极容易出现错误，下边的测试是可用的：</p>
<ul>
<li>下载<a href="https://github.com/jcoleman/tomcat-redis-session-manager/downloads" target="_blank" rel="external">tomcat-redis-session-manager</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/commons-pool/commons-pool/1.6" target="_blank" rel="external">commons-pool 1.6</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/redis.clients/jedis/2.2.0" target="_blank" rel="external">jedis 2.2</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat.extras/tomcat-extras-juli-adapters/7.0.82" target="_blank" rel="external">tomcat-juli-adapters.jar</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-juli/7.0.82" target="_blank" rel="external">tomcat-juli.jar</a><br><img src="/2018/01/16/Nginx学习——session共享-二/tomcat7jdk1.6.png" alt="tomcat7jdk1.6"><br>conf 目录中 content.xml 中加入：配置 redis 服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Valve className=&quot;com.radiadesign.catalina.session.RedisSessionHandlerValve&quot;/&gt; </div><div class="line">&lt;Manager className=&quot;com.radiadesign.catalina.session.RedisSessionManager&quot;</div><div class="line">host=&quot;localhost&quot;</div><div class="line">port=&quot;6379&quot;</div><div class="line">database=&quot;0&quot;  </div><div class="line">maxInactiveInterval=&quot;60&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>环境为 tomcat7 + jdk1.7 或 1.8 ：<br>  在所有需要共享 session 的服务器的 tomcat 中目录下：</p>
<p>  lib 目录中添加以下五个 jar 包，其中<font color="red">tomcat-redis-session-manager.jar需要重新下载编译打包，不然会报错</font>。</p>
<ul>
<li>下载<a href="https://github.com/jcoleman/tomcat-redis-session-manager/downloads" target="_blank" rel="external">tomcat-redis-session-manager</a>,我用的jdk8所以用的是-7-java.jar</li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.commons/commons-pool2/2.4.1" target="_blank" rel="external">commons-pool 2.4.1</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/redis.clients/jedis/2.6.2" target="_blank" rel="external">jedis 2.6.2</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat.extras/tomcat-extras-juli-adapters/7.0.82" target="_blank" rel="external">tomcat-juli-adapters.jar</a></li>
<li><p>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-juli/7.0.82" target="_blank" rel="external">tomcat-juli.jar</a><br><img src="/2018/01/16/Nginx学习——session共享-二/tomcat7jdk1.71.8.png" alt="tomcat7jdk1.71.8"></p>
<p>conf 目录中 content.xml 中加入：配置 redis 服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;       </div><div class="line">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</div><div class="line">host=&quot;localhost&quot;  </div><div class="line">port=&quot;6379&quot;  </div><div class="line">database=&quot;0&quot;              </div><div class="line">maxInactiveInterval=&quot;60&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="三：配置Tomcat"><a href="#三：配置Tomcat" class="headerlink" title="三：配置Tomcat"></a>三：配置Tomcat</h1><p>根据我这测试，是 jkd1.8+tomcat7，在 137 和 139 两台 tomcat 中加入 jar 包且进行如上配置：</p>
<p>上传 jar 包<br><img src="/2018/01/16/Nginx学习——session共享-二/加jar包1.png" alt="加jar包1"><br><img src="/2018/01/16/Nginx学习——session共享-二/加jar包2.png" alt="加jar包2"><br>修改 content.xml<br><img src="/2018/01/16/Nginx学习——session共享-二/tomcatcontent.png" alt="tomcatcontent"><br>启动 redis 服务，重新启动所有 tomcat，启动 nginx，刷新 nginx 页面, 两台 tomcat 页面可以看到 sessionid 值不变，关闭某台 tomcat，nginx 中 sessionid 不变，说明 session 是共享的。</p>
<p>请注意！！！！</p>
<p>context.xml 配置说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;      </div><div class="line">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</div><div class="line">//这里是redis服务器地址</div><div class="line">host=&quot;localhost&quot;</div><div class="line">//这里是redis端口，redis默认端口是6379</div><div class="line">port=&quot;6379&quot;</div><div class="line">//这里是redis数据库中的标识，标识第0个，默认使用0即可</div><div class="line">database=&quot;0&quot;            </div><div class="line">//需要注意的是这里由于redis过期时间默认设置为60，单位是秒，session过期时间为30分钟，所以需要设置为1800对应30分钟</div><div class="line">maxInactiveInterval=&quot;1800&quot;/&gt;</div></pre></td></tr></table></figure>
<h1 id="四：项目搭建中遇到的问题"><a href="#四：项目搭建中遇到的问题" class="headerlink" title="四：项目搭建中遇到的问题"></a>四：项目搭建中遇到的问题</h1><p>将相关commons-pool2-2.4.1.jar，tomcat-redis-session-manager-1.2-tomcat-7-java-7.jar，jedis-2.6.2.jar，放到comcat的lib目录下，启动后报错：<br><img src="/2018/01/16/Nginx学习——session共享-二/报错1.png" alt="报错1"></p>
<p>查看下载的包tomcat-redis-session-manager-1.2-tomcat-7-java-7.jar或tomcat-redis-session-manager-1.2-tomcat-7.jar相关包的里面并没有类:com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve。<br>从 <a href="https://github.com/jcoleman/tomcat-redis-session-manager" target="_blank" rel="external">https://github.com/jcoleman/tomcat-redis-session-manager</a> 直接下载源码，发现源码里面存在相应的类。同时源码（tomcat-redis-session-manager）依赖了tomcat其他的包：tomcat-juli.jar，而tomcat默认是没有这些包的，从 <a href="https://mirrors.cnnic.cn/apache/tomcat/tomcat-7/v7.0.82/bin/extras/" target="_blank" rel="external">https://mirrors.cnnic.cn/apache/tomcat/tomcat-7/v7.0.82/bin/extras/</a> 下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat.extras/tomcat-extras-juli-adapters/7.0.82" target="_blank" rel="external">tomcat-juli-adapters.jar</a>和<a href="http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-juli/7.0.82" target="_blank" rel="external">tomcat-juli.jar</a>两个包，放在apache-tomcat-7.0.82\lib目录下，同时将tomcat-juli.jar放在apache-tomcat-7.0.82\bin目录下同时将编译tomcat-redis-session-manager的源码，通过相应的依赖包common-pool2.2，jedis以及tomcat-juli.jar编译，并打成自己的jar包。<br>打包详情如下：<br><img src="/2018/01/16/Nginx学习——session共享-二/导出jar包.png" alt="导出jar包"><br>点击 <a href="http://download.csdn.net/download/wangyuanjun008/10214996" target="_blank" rel="external">http://download.csdn.net/download/wangyuanjun008/10214996</a> 下载<br>总结<br>这篇文章写下来可真是费了些力气，中间出了好多错，不过一个一个有耐心的解决掉，最后出来的结果还是令人挺有成就感的。毕竟心里的一块大石算是落了。以后有空再尝试一下其他几种方法。</p>
<p>PS : 修改配置文件的时候，一定要先备份再修改，不然出了问题都不能恢复。</p>
<p>参考:<br><a href="https://www.jianshu.com/p/1d035ca278e3" target="_blank" rel="external">Nginx 反向代理，负载均衡，redis session 共享，keepalived 高可用</a><br><a href="https://www.cnblogs.com/zhengbin/p/5488415.html#autoid-0-3-0" target="_blank" rel="external">搭建Nginx（负载均衡）+Redis（Session共享）+Tomcat集群</a><br><a href="http://blog.csdn.net/wkwanglei/article/details/47776871" target="_blank" rel="external">tomcat7和redis的sessoin共享问题处理</a><br><a href="http://blog.csdn.net/onlysunnyboy/article/details/50513305" target="_blank" rel="external">tomcat集群基于redis共享session解决方案</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博文说到了nginx session共享问题。由于 nginx 是随机分配请求，假设一个用户登录时访问网站登录时被分配到 192.168.43.3:8080 上，然后进行了登录操作，此时该服务器上就会有该用户登录的 session 信息，然后登陆后重定向到网站首页或个
    
    </summary>
    
      <category term="nginx" scheme="http://wangyuanjun.cn/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://wangyuanjun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习——反向代理与负载均衡(一)</title>
    <link href="http://wangyuanjun.cn/2018/01/16/Nginx%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E4%B8%80/"/>
    <id>http://wangyuanjun.cn/2018/01/16/Nginx学习——反向代理与负载均衡-一/</id>
    <published>2018-01-16T08:04:25.000Z</published>
    <updated>2018-01-21T11:32:48.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：环境配置"><a href="#一：环境配置" class="headerlink" title="一：环境配置"></a>一：环境配置</h1><p>我本地是Windows系统，使用 Oracle VM VirtualBox 虚拟机安装一个虚拟的Linux系统，安装jdk1.8，nginx,两个tomcat </p>
<p><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/架构图.png" alt="架构图"><br>一般需要用到三台服务器，一台 nginx 服务器，两台正式部署项目的服务器。为了方便操作，我只在一台服务器上面安装了一个nginx和两个tomcat(端口不一样)</p>
<h1 id="二：配置tomcat集群"><a href="#二：配置tomcat集群" class="headerlink" title="二：配置tomcat集群"></a>二：配置tomcat集群</h1><p>首先在服务器上安装两个 tomcat：这个也是简单，不多说</p>
<p>安装 tomcat：上传解压即可使用，bin 目录下 startup.sh 启动，shutdown.sh 关闭</p>
<p>配置防火墙端口：vim /etc/sysconfig/iptables 编辑，开放 8080 端口，8081 端口，80 端口等一些常用端口，当然后边有用到一些端口都是需要配置开放的，不建议关闭防火墙</p>
<p><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/tomcat防火墙.png" alt="tomcat防火墙"></p>
<p>编辑好后 service iptables restart 重新加载防火墙配置<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/防火墙规则.png" alt="防火墙规则"></p>
<blockquote>
<p>如果是自己测试嫌配置麻烦，关闭防火墙： service iptables stop 重启后防火墙打开，即在此次开机状态下有效，完全关闭再使用 chkconfig iptables off , 即会在重启后也关闭防火墙，注意有时候服务都起了但访问出错，可能就是防火墙问题哦</p>
</blockquote>
<p>启动 tomcat 访问：192.168.43.3:8080，192.168.43.3:8081，打开 tomcat 首页即成功。</p>
<p>然后编写测试项目，部署到两台 tomcat 上，eclipse 新建 web 项目，项目名为 testproject，在 webapp 下新建一个 jsp 页面为 index.jsp, 添加如下内容<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/jsp.png" alt="jsp"></p>
<p>maven导出为 war 包，spring-demo.war，将该 war 包上传到服务器的两台 tomcat 的 webapps 中<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/tomcat1.png" alt="tomcat1"><br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/tomcat2.png" alt="tomcat2"></p>
<p>此时，重新启动 tomcat，访问 192.168.43.3:8080，192.168.43.3:8081, 显示 index.jsp 内容：两台服务器访问显示如下<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/t1.png" alt="t1"><br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/t2.png" alt="t2"></p>
<p>至此，两台 tomcat 服务器搭建完成。</p>
<h1 id="三：Nginx的安装配置与测试"><a href="#三：Nginx的安装配置与测试" class="headerlink" title="三：Nginx的安装配置与测试"></a>三：Nginx的安装配置与测试</h1><p>先使用 yum 命令安装 gcc，安装 pcre，zlib，openssl：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc   </div><div class="line">yum install -y pcre pcre-devel   </div><div class="line">yum install -y zlib zlib-devel   </div><div class="line">yum install -y openssl openssl-develplain</div></pre></td></tr></table></figure></p>
<p>在 /root/wyj/tools 目录下新建 nginx 目录，将 nginx-1.17.7.tar.gz 放到此处，解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.17.7.tar.gz</div></pre></td></tr></table></figure></p>
<p>进入解压后目录<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginx.png" alt="nginx"><br>依次执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./configure   </div><div class="line"></div><div class="line">make   </div><div class="line"></div><div class="line">mkae install</div></pre></td></tr></table></figure></p>
<p>此时 nginx 安装完毕，安装目录是 /usr/local/nginx，nginx 默认占用 80 端口<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginx安装.png" alt="nginx安装"><br>其中，sbin 目录为 nginx 执行命令，conf 目录下的 nginx.conf 为默认加载的配置文件</p>
<p>启动 nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx</div></pre></td></tr></table></figure></p>
<p>关闭 nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -s stop</div></pre></td></tr></table></figure></p>
<p>重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx  -s reload</div></pre></td></tr></table></figure></p>
<p>启动 nginx 后访问 192.168.50.133:80 即可访问 nginx：显示 nginx 欢迎页<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginx欢迎.png" alt="nginx欢迎"></p>
<p>至此，nginx 安装完毕。</p>
<h1 id="四：反向代理与负载均衡配置"><a href="#四：反向代理与负载均衡配置" class="headerlink" title="四：反向代理与负载均衡配置"></a>四：反向代理与负载均衡配置</h1><p>现有一台服务器，为 192.168.43.3，服务器上有一台 tomcat，端口为 8080 和 8081，经过配置 nginx，当访问 192.168.43.3:80 时，即可访问 192.168.43.3:8080，192.168.43.3:8081 中随机一台，此时 192.168.43.3:80 被 nginx 监听，当有请求时，代理到 192.168.43.3:8080，192.168.43.3:8081 随机一台即可，即为 nginx 反向代理功能，同时此时可以通过 nginx 将请求进行转发，保证了一个入口，将所有请求转发到两台服务器上也减轻了任何一台的负载压力，当有大量请求时，可以搭建大量服务器，在入口代理服务器上使用 nginx 进行转发，即是负载均衡功能。</p>
<p>配置即是配置 nginx 安装目录中 conf 目录下的 nginx.conf 文件即可：具体配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#user  nobody;</div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line">#error_log  logs/error.log;</div><div class="line">#error_log  logs/error.log  notice;</div><div class="line">#error_log  logs/error.log  info;</div><div class="line"></div><div class="line">#pid        logs/nginx.pid;</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    #access_log  logs/access.log  main;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line">    #gzip  on;</div><div class="line"></div><div class="line"> 	#配置被代理的服务器</div><div class="line">    upstream blank &#123;</div><div class="line">        #ip_hash;</div><div class="line">        server 192.168.43.3:8080 weight=2;</div><div class="line">        server 192.168.43.3:8081 weight=1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    server &#123;</div><div class="line">    	#nginx监听80端口，请求该端口时转发到真实目标</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            #这里配置代理是指上面定义的两个被代理目标，blank名字必须一致</div><div class="line">          proxy_pass http://blank;</div><div class="line"></div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #error_page  404              /404.html;</div><div class="line"></div><div class="line">        # redirect server error pages to the static page /50x.html</div><div class="line">        #</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    proxy_pass   http://127.0.0.1;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    root           html;</div><div class="line">        #    fastcgi_pass   127.0.0.1:9000;</div><div class="line">        #    fastcgi_index  index.php;</div><div class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</div><div class="line">        #    include        fastcgi_params;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # deny access to .htaccess files, if Apache&apos;s document root</div><div class="line">        # concurs with nginx&apos;s one</div><div class="line">        #</div><div class="line">        #location ~ /\.ht &#123;</div><div class="line">        #    deny  all;</div><div class="line">        #&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       8000;</div><div class="line">    #    listen       somename:8080;</div><div class="line">    #    server_name  somename  alias  another.alias;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line"></div><div class="line">    # HTTPS server</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       443 ssl;</div><div class="line">    #    server_name  localhost;</div><div class="line"></div><div class="line">    #    ssl_certificate      cert.pem;</div><div class="line">    #    ssl_certificate_key  cert.key;</div><div class="line"></div><div class="line">    #    ssl_session_cache    shared:SSL:1m;</div><div class="line">    #    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    #    ssl_prefer_server_ciphers  on;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动两台 tomcat，重新启动 nginx：</p>
<p>访问 192.168.43.3:80 将会随机访问 192.168.43.3:8080 和 192.168.43.3:8081 其中一台。（问题：每次刷新 nginx 服务器地址 sessionid 会变，session 不能共享。）</p>
<p><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginxtomcat1.png" alt="nginxtomcat1"><br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginxtomcat2.png" alt="nginxtomcat2"></p>
<p>尝试不断刷新，两个页面会交替显示，即成功。<br>但发现SessionID并不相同，下一篇博文来通过Redis来实现Session的共享（同步）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：环境配置&quot;&gt;&lt;a href=&quot;#一：环境配置&quot; class=&quot;headerlink&quot; title=&quot;一：环境配置&quot;&gt;&lt;/a&gt;一：环境配置&lt;/h1&gt;&lt;p&gt;我本地是Windows系统，使用 Oracle VM VirtualBox 虚拟机安装一个虚拟的Linux系
    
    </summary>
    
      <category term="nginx" scheme="http://wangyuanjun.cn/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://wangyuanjun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>HTML/CSS基础知识学习笔记</title>
    <link href="http://wangyuanjun.cn/2018/01/11/HTML-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangyuanjun.cn/2018/01/11/HTML-CSS基础知识学习笔记/</id>
    <published>2018-01-11T09:21:16.000Z</published>
    <updated>2018-01-11T09:21:16.726Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dubbo学习——Dubbo-admin管理平台搭建(三)</title>
    <link href="http://wangyuanjun.cn/2018/01/11/Dubbo%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Dubbo-admin%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA-%E4%B8%89/"/>
    <id>http://wangyuanjun.cn/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/</id>
    <published>2018-01-11T03:05:23.000Z</published>
    <updated>2018-01-21T11:19:13.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：前言"><a href="#一：前言" class="headerlink" title="一：前言"></a>一：前言</h1><p>上一篇博文介绍的是dubbo的使用，包括有注册中心，消费者，提供者的使用，但是并不能看到有哪些消费者和提供者，为了更好的调试，发现问题，解决问题，因此引入dubbo-admin。通过dubbo-admin可以对消费者和提供者进行管理。</p>
<h1 id="二：下载与配置打包"><a href="#二：下载与配置打包" class="headerlink" title="二：下载与配置打包"></a>二：下载与配置打包</h1><p>dubbo-admin的下载，可自行到官网下载：<a href="https://github.com/alibaba/dubbo" target="_blank" rel="external">https://github.com/alibaba/dubbo</a><br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/dubbo.png" alt="dubbo"></p>
<p>但是这里我们只关心dubbo-admin这个文件夹。<br>打包war包，进入dubbo-admin这个文件目录 运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn package -Dmaven.skip.test=true</div></pre></td></tr></table></figure>
<p>打包成功之后，就会发现dubbo-admin下多了个target文件夹，打开target文件夹，发现里面有个war包：<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/war包.png" alt="war包"></p>
<h1 id="三：安装dubbo-admin"><a href="#三：安装dubbo-admin" class="headerlink" title="三：安装dubbo-admin"></a>三：安装dubbo-admin</h1><ol>
<li><p>第二步我们得到dubbo-admin-2.5.8-SNAPSHOT.war，把dubbo-admin-2.5.8-SNAPSHOT.war放到tomcat的webapps目录下，然后启动tomcat,启动完成后停tomcat，得到解压后的dubbo-admin<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/a.png" alt="a"></p>
</li>
<li><p>打开刚刚tomcat解压生成的dubbo.properties<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/b.png" alt="b"></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dubbo.registry.address=zookeeper://192.168.99.100:2181</div><div class="line">dubbo.admin.root.password=root</div><div class="line">dubbo.admin.guest.password=guest</div></pre></td></tr></table></figure>
<p>修改zookeeper地址为192.168.99.100:2181</p>
<p>帐号：root,密码：root,待会儿登录用</p>
<h1 id="四：运行"><a href="#四：运行" class="headerlink" title="四：运行"></a>四：运行</h1><ol>
<li><p>先启动zookeeper，然后再启动tomcat<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/zookeeper.png" alt="zookeeper"><br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/c.png" alt="c"><br>帐号：root;密码:root<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/dubboadminindx.png" alt="dubboadminindx"></p>
</li>
<li><p>查看提供者<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/provider.png" alt="provider"></p>
</li>
<li><p>查看消费者：<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/consumer.png" alt="consumer"></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：前言&quot;&gt;&lt;a href=&quot;#一：前言&quot; class=&quot;headerlink&quot; title=&quot;一：前言&quot;&gt;&lt;/a&gt;一：前言&lt;/h1&gt;&lt;p&gt;上一篇博文介绍的是dubbo的使用，包括有注册中心，消费者，提供者的使用，但是并不能看到有哪些消费者和提供者，为了更好的调试
    
    </summary>
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/categories/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo学习——Dubbo简单入门Demo(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/10/Dubbo%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Dubbo%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8Demo-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/</id>
    <published>2018-01-10T15:16:22.000Z</published>
    <updated>2018-01-21T11:06:01.930Z</updated>
    
    <content type="html"><![CDATA[<p>本文采用Dubbo与Zookeeper、Spring框架的整合。整个项目的代码已经上传到我的github <a href="https://github.com/wangyuanjun008/wyj-dubbo-demo.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-dubbo-demo.git</a> 欢迎查看。<br>主要是以下几个步骤： </p>
<ol>
<li>安装Zookeeper,启动； </li>
<li>创建MAVEN项目，构建Dubbo+Zookeeper+Spring实现的简单Demo； </li>
<li>安装Dubbo-admin，实现监控。</li>
</ol>
<h1 id="一：Zookeeper介绍与安装"><a href="#一：Zookeeper介绍与安装" class="headerlink" title="一：Zookeeper介绍与安装"></a>一：Zookeeper介绍与安装</h1><p>本Demo中的Dubbo注册中心采用的是Zookeeper。为什么采用Zookeeper呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Zookeeper是一个分布式的服务框架，是树型的目录服务的数据存储，能做到集群管理数据 ，这里能很好的作为Dubbo服务的注册中心。</div><div class="line"></div><div class="line">Dubbo能与Zookeeper做到集群部署，当提供者出现断电等异常停机时，Zookeeper注册中心能自动删除提供者信息，当提供者重启时，能自动恢复注册数据，以及订阅请求</div></pre></td></tr></table></figure></p>
<p>到官网下载并安装到windows上，可参考博文： <a href="http://blog.csdn.net/tlk20071/article/details/52028945" target="_blank" rel="external">http://blog.csdn.net/tlk20071/article/details/52028945</a><br>我使用的是docker容器，在docker上下载zooleeper镜像,然后使用如下命令创建并启动zookeeper容器，映射与本机的端口号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name zookeeper -p 2181:2181 -p 2888:2888 -p 3888:3888 -d zookeeper:latest</div></pre></td></tr></table></figure></p>
<p><img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/zookeeper.png" alt="zookeeper"></p>
<p>我之前下载过，所以我直接启动zookeeper容器</p>
<h1 id="二：创建MAVEN项目"><a href="#二：创建MAVEN项目" class="headerlink" title="二：创建MAVEN项目"></a>二：创建MAVEN项目</h1><p>项目结构：<br>主要分三大模块：<br>dubbo-api : 存放公共接口；<br>dubbo-consumer :　调用远程服务；<br>dubbo-provider : 提供远程服务。<br><img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/project.png" alt="project"></p>
<p>下面将详细叙述代码构建过程。 </p>
<ol>
<li><p>首先构建MAVEN项目，导入所需要的jar包依赖。<br>需要导入的有spring, dubbo, zookeeper等jar包。<br>(详情参看后面提供的项目代码)</p>
</li>
<li><p>建dubbo-api的MAVEN项目(有独立的pom.xml，用来打包供提供者消费者使用)。<br>在项目中定义服务接口：该接口需单独打包，在服务提供方和消费方共享。<br><img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/api.png" alt="api"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo;</div><div class="line">/**</div><div class="line"> * 定义服务接口</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午9:03:40</div><div class="line"> */</div><div class="line">public interface DemoService &#123;</div><div class="line">    </div><div class="line">    String sayHello(String name);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建dubbo-provider的MAVEN项目(有独立的pom.xml，用来打包供消费者使用)。 </p>
<p> 实现公共接口，此实现对消费者隐藏：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo.provider;</div><div class="line"></div><div class="line">import com.wyj.dubbo.demo.DemoService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 服务提供者实现服务定义</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午9:07:16</div><div class="line"> */</div><div class="line">public class DemoServiceImpl implements DemoService &#123;</div><div class="line"></div><div class="line">    public String sayHello(String name) &#123;</div><div class="line">        return &quot;Hello &quot; + name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 需加入公共接口所在的依赖<br> <img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/provider-pom.png" alt="provider-pom"></p>
<p> 用Spring配置声明暴露服务</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo</div><div class="line">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</div><div class="line">       </div><div class="line">	&lt;!--定义了提供方应用信息，用于计算依赖关系；在 dubbo-admin 或 dubbo-monitor 会显示这个名字，方便辨识 --&gt;</div><div class="line">	&lt;dubbo:application name=&quot;demotest-provider&quot; owner=&quot;programmer&quot;</div><div class="line">		organization=&quot;dubbox&quot; /&gt;</div><div class="line">	&lt;!--使用 zookeeper 注册中心暴露服务，注意要先开启 zookeeper --&gt;</div><div class="line">	&lt;dubbo:registry address=&quot;zookeeper://192.168.99.100:2181&quot; /&gt;</div><div class="line">	&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</div><div class="line">	&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;</div><div class="line">	&lt;!--使用 dubbo 协议实现定义好的 api.PermissionService 接口 --&gt;</div><div class="line">	&lt;dubbo:service interface=&quot;com.wyj.dubbo.demo.DemoService&quot;</div><div class="line">		ref=&quot;demoService&quot; protocol=&quot;dubbo&quot; /&gt;</div><div class="line">	&lt;!--具体实现该接口的 bean --&gt;</div><div class="line">	&lt;bean id=&quot;demoService&quot; class=&quot;com.wyj.dubbo.demo.provider.DemoServiceImpl&quot; /&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p> 启动远程服务：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo.provider;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 启动服务提供者</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午9:10:38</div><div class="line"> */</div><div class="line">public class Provider &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws IOException &#123;</div><div class="line">        </div><div class="line">        ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(&quot;dubbo-provider.xml&quot;);</div><div class="line">        System.out.println(classPathXmlApplicationContext.getDisplayName() + &quot;: here&quot;);</div><div class="line">        classPathXmlApplicationContext.start();</div><div class="line">        System.out.println(&quot;服务已经启动...&quot;);</div><div class="line">        System.in.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建dubbo-consumer的MAVEN项目(可以有多个consumer，但是需要配置好)。<br> 调用所需要的远程服务：</p>
<p> 通过Spring配置引用远程服务：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</div><div class="line">       </div><div class="line">	&lt;dubbo:application name=&quot;demotest-consumer&quot; owner=&quot;programmer&quot; organization=&quot;dubbox&quot; /&gt;</div><div class="line">		</div><div class="line">	&lt;!--向 zookeeper 订阅 provider 的地址，由 zookeeper 定时推送 --&gt;</div><div class="line">	&lt;dubbo:registry address=&quot;zookeeper://192.168.99.100:2181&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;!--使用 dubbo 协议调用定义好的 api.demoService 接口 --&gt;</div><div class="line">	&lt;dubbo:reference id=&quot;demoService&quot; interface=&quot;com.wyj.dubbo.demo.DemoService&quot; /&gt;</div><div class="line">		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p> 启动Consumer,调用远程服务：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo.consumer;</div><div class="line"></div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.wyj.dubbo.demo.DemoService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 启动服务消费者</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午10:00:33</div><div class="line"> */</div><div class="line">public class Consumer &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(&quot;dubbo-consumer.xml&quot;);</div><div class="line">        classPathXmlApplicationContext.start();</div><div class="line">        DemoService demoService = (DemoService) classPathXmlApplicationContext.getBean(&quot;demoService&quot;); </div><div class="line"></div><div class="line">        while (true) &#123;</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(1000);</div><div class="line">                String hello = demoService.sayHello(&quot;world&quot;); </div><div class="line">                System.out.println(hello); </div><div class="line"></div><div class="line">            &#125; catch (Throwable throwable) &#123;</div><div class="line">                throwable.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行项目，先确保provider已被运行后再启动consumer模块：<br> 运行提供者：<br> <img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/provider.png" alt="provider"></p>
<p> 消费者成功调用提供者所提供的远程服务：<br> <img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/consumer.png" alt="consumer"></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文采用Dubbo与Zookeeper、Spring框架的整合。整个项目的代码已经上传到我的github &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-dubbo-demo.git&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/categories/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/tags/Dubbo/"/>
    
  </entry>
  
</feed>
