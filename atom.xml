<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>守望的稻草人</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangyuanjun.cn/"/>
  <updated>2018-01-19T15:44:54.587Z</updated>
  <id>http://wangyuanjun.cn/</id>
  
  <author>
    <name>WangYuanJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx学习——session共享(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/16/Nginx%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94session%E5%85%B1%E4%BA%AB-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/16/Nginx学习——session共享-二/</id>
    <published>2018-01-16T08:04:58.000Z</published>
    <updated>2018-01-19T15:44:54.587Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博文说到了nginx session共享问题。由于 nginx 是随机分配请求，假设一个用户登录时访问网站登录时被分配到 192.168.43.3:8080 上，然后进行了登录操作，此时该服务器上就会有该用户登录的 session 信息，然后登陆后重定向到网站首页或个人中心时，此时如果被分配到 192.168.43.3:8081 上，那么这台服务器上没有该用户 session 信息，于是又会变成未登录状态，所以由于 nginx 的负载均衡会导致 session 共享的问题。</p>
<ol>
<li><p>不使用session，换用cookie<br>session是存放在服务器端的，cookie是存放在客户端的，我们可以把用户访问页面产生的session放到cookie里面，就是以cookie为中转站。你访问web服务器A，产生了session然后把它放到cookie里面，当你的请求被分配到B服务器时，服务器B先判断服务器有没有这个session，如果没有，再去看看客户端的cookie里面有没有这个session，如果也没有，说明session真的不存，如果cookie里面有，就把cookie里面的sessoin同步到服务器B，这样就可以实现session的同步了。<br>说明：这种方法实现起来简单，方便，也不会加大数据库的负担，但是如果客户端把cookie禁掉了的话，那么session就无从同步了，这样会给网站带来损失；cookie的安全性不高，虽然它已经加了密，但是还是可以伪造的。</p>
</li>
<li><p>session存在数据库（MySQL等）中<br>java可以配置将session保存在数据库中，这种方法是把存放session的表和其他数据库表放在一起，如果mysql也做了集群了话，每个mysql节点都要有这张表，并且这张session表的数据表要实时同步。<br>说明：用数据库来同步session，会加大数据库的IO，增加数据库的负担。而且数据库读写速度较慢，不利于session的适时同步。</p>
</li>
<li><p>ip_hash 策略<br>nginx 提供了 ip_hash 策略，可以保持用户 ip 进行 hash 值计算固定分配到某台服务器上，然后只要是该 ip 则会保持分配到该服务器上，保证用户访问的是同一台服务器，那么 session 问题就不存在了。这也是解决 session 共享的一种方式，也称为黏性 session。但是假设一台 tomcat 服务器挂了的话，那么 session 也会丢失。所以比较好的方案是抽取 session。</p>
</li>
<li><p>upstream_hash<br>为了解决ip_hash的一些问题，可以使用upstream_hash这个第三方模块，这个模块多数情况下是用作url_hash的，但是并不妨碍将它用来做session共享。没试过真心的不明白</p>
</li>
<li><p>session存在memcache或者redis中<br>此种方式将将用户的登录信息存储到redis中，因为是基于内存的读取，因此效率不会是响应效率的瓶颈，cookie中存储着jsessionid，不需要加密或处理，只需要存储redis中的key保存统一客户通过cookie中的key可以准确的登录信息或是其他有效的信息，此种方式，cookie的存储不需要加密计算成本，其次redis将信息存储到缓存中，存取效率高，后面会详细介绍此种方式实现过程。</p>
</li>
<li><p>基于tomcat容器session<br>此种方式在根本上实现共享session，他的实际情况是通过tomcat管理配置将一个tomct下的session复制到其他的tomcat的session池中，实现真实上的session共享；此种方式需要兼容tomcat配置及需要对其进行扩展，依赖性太强。</p>
</li>
</ol>
<h1 id="一：Redis-环境搭建"><a href="#一：Redis-环境搭建" class="headerlink" title="一：Redis 环境搭建"></a>一：Redis 环境搭建</h1><p>redis 依赖 gcc，先安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc-c++</div></pre></td></tr></table></figure></p>
<p>下载 redis，我使用的是 redis-3.2.11.tar.gz，上传至 linux /usr/local/redis-src / 中，解压</p>
<p>进入解压后目录 redis-3.2.11，执行 make 命令进行编译</p>
<p>安装到目录 /usr/local/redis</p>
<p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make PREFIX=/usr/local/redis install</div></pre></td></tr></table></figure></p>
<p>安装完成之后将 redis 配置文件拷贝到安装目录下，redis.conf 是 redis 的配置文件，redis.conf 在 redis 源码目录, port 默认 6379。<br>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /root/wyj/tools/redis/redis-3.2.11/redis.conf /usr/local/redis/</div></pre></td></tr></table></figure></p>
<p>在 redis 安装目录启动和关闭 redis：</p>
<p>启动：<br><img src="/2018/01/16/Nginx学习——session共享-二/redis.png" alt="redis"><br>这种启动方式叫做前端启动，必须保持在当前窗口，如果 ctrl + c 退出，那么 redis 也就退出了，不建议使用</p>
<p>那么后端启动：</p>
<p>首先修改 redis.conf 中 daemonize 的值，打开可以看到默认是 no，修改为 daemonize yes，启动即可。也可以在该配置文件中修改 redis 默认端口 6379 为其他值。<br><img src="/2018/01/16/Nginx学习——session共享-二/redis启动.png" alt="redis启动"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/redis-cli shutdown</div></pre></td></tr></table></figure></p>
<p>至此，redis 服务器搭建完成。</p>
<h1 id="二：下载相关jar"><a href="#二：下载相关jar" class="headerlink" title="二：下载相关jar"></a>二：下载相关jar</h1><ul>
<li><p>环境为 tomcat7 + jdk1.6 ：<br>  在所有需要共享 session 的服务器的 tomcat 中目录下：</p>
<p>  lib 目录中添加以下五个 jar 包，注意版本最好一致，不然极容易出现错误，下边的测试是可用的：</p>
<ul>
<li>下载<a href="https://github.com/jcoleman/tomcat-redis-session-manager/downloads" target="_blank" rel="external">tomcat-redis-session-manager</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/commons-pool/commons-pool/1.6" target="_blank" rel="external">commons-pool 1.6</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/redis.clients/jedis/2.2.0" target="_blank" rel="external">jedis 2.2</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat.extras/tomcat-extras-juli-adapters/7.0.82" target="_blank" rel="external">tomcat-juli-adapters.jar</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-juli/7.0.82" target="_blank" rel="external">tomcat-juli.jar</a><br><img src="/2018/01/16/Nginx学习——session共享-二/tomcat7jdk1.6.png" alt="tomcat7jdk1.6"><br>conf 目录中 content.xml 中加入：配置 redis 服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Valve className=&quot;com.radiadesign.catalina.session.RedisSessionHandlerValve&quot;/&gt; </div><div class="line">&lt;Manager className=&quot;com.radiadesign.catalina.session.RedisSessionManager&quot;</div><div class="line">host=&quot;localhost&quot;</div><div class="line">port=&quot;6379&quot;</div><div class="line">database=&quot;0&quot;  </div><div class="line">maxInactiveInterval=&quot;60&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>环境为 tomcat7 + jdk1.7 或 1.8 ：<br>  在所有需要共享 session 的服务器的 tomcat 中目录下：</p>
<p>  lib 目录中添加以下五个 jar 包，其中<font color="red">tomcat-redis-session-manager.jar需要重新下载编译打包，不然会报错</font>。</p>
<ul>
<li>下载<a href="https://github.com/jcoleman/tomcat-redis-session-manager/downloads" target="_blank" rel="external">tomcat-redis-session-manager</a>,我用的jdk8所以用的是-7-java.jar</li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.commons/commons-pool2/2.4.1" target="_blank" rel="external">commons-pool 2.4.1</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/redis.clients/jedis/2.6.2" target="_blank" rel="external">jedis 2.6.2</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat.extras/tomcat-extras-juli-adapters/7.0.82" target="_blank" rel="external">tomcat-juli-adapters.jar</a></li>
<li><p>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-juli/7.0.82" target="_blank" rel="external">tomcat-juli.jar</a><br><img src="/2018/01/16/Nginx学习——session共享-二/tomcat7jdk1.71.8.png" alt="tomcat7jdk1.71.8"></p>
<p>conf 目录中 content.xml 中加入：配置 redis 服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;       </div><div class="line">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</div><div class="line">host=&quot;localhost&quot;  </div><div class="line">port=&quot;6379&quot;  </div><div class="line">database=&quot;0&quot;              </div><div class="line">maxInactiveInterval=&quot;60&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="三：配置Tomcat"><a href="#三：配置Tomcat" class="headerlink" title="三：配置Tomcat"></a>三：配置Tomcat</h1><p>根据我这测试，是 jkd1.8+tomcat7，在 137 和 139 两台 tomcat 中加入 jar 包且进行如上配置：</p>
<p>上传 jar 包<br><img src="/2018/01/16/Nginx学习——session共享-二/加jar包1.png" alt="加jar包1"><br><img src="/2018/01/16/Nginx学习——session共享-二/加jar包2.png" alt="加jar包2"><br>修改 content.xml<br><img src="/2018/01/16/Nginx学习——session共享-二/tomcatcontent.png" alt="tomcatcontent"><br>启动 redis 服务，重新启动所有 tomcat，启动 nginx，刷新 nginx 页面, 两台 tomcat 页面可以看到 sessionid 值不变，关闭某台 tomcat，nginx 中 sessionid 不变，说明 session 是共享的。</p>
<p>请注意！！！！</p>
<p>context.xml 配置说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;      </div><div class="line">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</div><div class="line">//这里是redis服务器地址</div><div class="line">host=&quot;localhost&quot;</div><div class="line">//这里是redis端口，redis默认端口是6379</div><div class="line">port=&quot;6379&quot;</div><div class="line">//这里是redis数据库中的标识，标识第0个，默认使用0即可</div><div class="line">database=&quot;0&quot;            </div><div class="line">//需要注意的是这里由于redis过期时间默认设置为60，单位是秒，session过期时间为30分钟，所以需要设置为1800对应30分钟</div><div class="line">maxInactiveInterval=&quot;1800&quot;/&gt;</div></pre></td></tr></table></figure>
<h1 id="四：项目搭建中遇到的问题"><a href="#四：项目搭建中遇到的问题" class="headerlink" title="四：项目搭建中遇到的问题"></a>四：项目搭建中遇到的问题</h1><p>将相关commons-pool2-2.4.1.jar，tomcat-redis-session-manager-1.2-tomcat-7-java-7.jar，jedis-2.6.2.jar，放到comcat的lib目录下，启动后报错：<br><img src="/2018/01/16/Nginx学习——session共享-二/报错1.png" alt="报错1"></p>
<p>查看下载的包tomcat-redis-session-manager-1.2-tomcat-7-java-7.jar或tomcat-redis-session-manager-1.2-tomcat-7.jar相关包的里面并没有类:com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve。<br>从 <a href="https://github.com/jcoleman/tomcat-redis-session-manager" target="_blank" rel="external">https://github.com/jcoleman/tomcat-redis-session-manager</a> 直接下载源码，发现源码里面存在相应的类。同时源码（tomcat-redis-session-manager）依赖了tomcat其他的包：tomcat-juli.jar，而tomcat默认是没有这些包的，从 <a href="https://mirrors.cnnic.cn/apache/tomcat/tomcat-7/v7.0.82/bin/extras/" target="_blank" rel="external">https://mirrors.cnnic.cn/apache/tomcat/tomcat-7/v7.0.82/bin/extras/</a> 下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat.extras/tomcat-extras-juli-adapters/7.0.82" target="_blank" rel="external">tomcat-juli-adapters.jar</a>和<a href="http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-juli/7.0.82" target="_blank" rel="external">tomcat-juli.jar</a>两个包，放在apache-tomcat-7.0.82\lib目录下，同时将tomcat-juli.jar放在apache-tomcat-7.0.82\bin目录下同时将编译tomcat-redis-session-manager的源码，通过相应的依赖包common-pool2.2，jedis以及tomcat-juli.jar编译，并打成自己的jar包。<br>打包详情如下：<br><img src="/2018/01/16/Nginx学习——session共享-二/导出jar包.png" alt="导出jar包"><br>点击 <a href="http://download.csdn.net/download/wangyuanjun008/10214996" target="_blank" rel="external">http://download.csdn.net/download/wangyuanjun008/10214996</a> 下载<br>总结<br>这篇文章写下来可真是费了些力气，中间出了好多错，不过一个一个有耐心的解决掉，最后出来的结果还是令人挺有成就感的。毕竟心里的一块大石算是落了。以后有空再尝试一下其他几种方法。</p>
<p>PS : 修改配置文件的时候，一定要先备份再修改，不然出了问题都不能恢复。</p>
<p>参考:<br><a href="https://www.jianshu.com/p/1d035ca278e3" target="_blank" rel="external">Nginx 反向代理，负载均衡，redis session 共享，keepalived 高可用</a><br><a href="https://www.cnblogs.com/zhengbin/p/5488415.html#autoid-0-3-0" target="_blank" rel="external">搭建Nginx（负载均衡）+Redis（Session共享）+Tomcat集群</a><br><a href="http://blog.csdn.net/wkwanglei/article/details/47776871" target="_blank" rel="external">tomcat7和redis的sessoin共享问题处理</a><br><a href="http://blog.csdn.net/onlysunnyboy/article/details/50513305" target="_blank" rel="external">tomcat集群基于redis共享session解决方案</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博文说到了nginx session共享问题。由于 nginx 是随机分配请求，假设一个用户登录时访问网站登录时被分配到 192.168.43.3:8080 上，然后进行了登录操作，此时该服务器上就会有该用户登录的 session 信息，然后登陆后重定向到网站首页或个
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx学习——反向代理与负载均衡(一)</title>
    <link href="http://wangyuanjun.cn/2018/01/16/Nginx%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E4%B8%80/"/>
    <id>http://wangyuanjun.cn/2018/01/16/Nginx学习——反向代理与负载均衡-一/</id>
    <published>2018-01-16T08:04:25.000Z</published>
    <updated>2018-01-21T11:32:48.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：环境配置"><a href="#一：环境配置" class="headerlink" title="一：环境配置"></a>一：环境配置</h1><p>我本地是Windows系统，使用 Oracle VM VirtualBox 虚拟机安装一个虚拟的Linux系统，安装jdk1.8，nginx,两个tomcat </p>
<p><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/架构图.png" alt="架构图"><br>一般需要用到三台服务器，一台 nginx 服务器，两台正式部署项目的服务器。为了方便操作，我只在一台服务器上面安装了一个nginx和两个tomcat(端口不一样)</p>
<h1 id="二：配置tomcat集群"><a href="#二：配置tomcat集群" class="headerlink" title="二：配置tomcat集群"></a>二：配置tomcat集群</h1><p>首先在服务器上安装两个 tomcat：这个也是简单，不多说</p>
<p>安装 tomcat：上传解压即可使用，bin 目录下 startup.sh 启动，shutdown.sh 关闭</p>
<p>配置防火墙端口：vim /etc/sysconfig/iptables 编辑，开放 8080 端口，8081 端口，80 端口等一些常用端口，当然后边有用到一些端口都是需要配置开放的，不建议关闭防火墙</p>
<p><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/tomcat防火墙.png" alt="tomcat防火墙"></p>
<p>编辑好后 service iptables restart 重新加载防火墙配置<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/防火墙规则.png" alt="防火墙规则"></p>
<blockquote>
<p>如果是自己测试嫌配置麻烦，关闭防火墙： service iptables stop 重启后防火墙打开，即在此次开机状态下有效，完全关闭再使用 chkconfig iptables off , 即会在重启后也关闭防火墙，注意有时候服务都起了但访问出错，可能就是防火墙问题哦</p>
</blockquote>
<p>启动 tomcat 访问：192.168.43.3:8080，192.168.43.3:8081，打开 tomcat 首页即成功。</p>
<p>然后编写测试项目，部署到两台 tomcat 上，eclipse 新建 web 项目，项目名为 testproject，在 webapp 下新建一个 jsp 页面为 index.jsp, 添加如下内容<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/jsp.png" alt="jsp"></p>
<p>maven导出为 war 包，spring-demo.war，将该 war 包上传到服务器的两台 tomcat 的 webapps 中<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/tomcat1.png" alt="tomcat1"><br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/tomcat2.png" alt="tomcat2"></p>
<p>此时，重新启动 tomcat，访问 192.168.43.3:8080，192.168.43.3:8081, 显示 index.jsp 内容：两台服务器访问显示如下<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/t1.png" alt="t1"><br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/t2.png" alt="t2"></p>
<p>至此，两台 tomcat 服务器搭建完成。</p>
<h1 id="三：Nginx的安装配置与测试"><a href="#三：Nginx的安装配置与测试" class="headerlink" title="三：Nginx的安装配置与测试"></a>三：Nginx的安装配置与测试</h1><p>先使用 yum 命令安装 gcc，安装 pcre，zlib，openssl：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc   </div><div class="line">yum install -y pcre pcre-devel   </div><div class="line">yum install -y zlib zlib-devel   </div><div class="line">yum install -y openssl openssl-develplain</div></pre></td></tr></table></figure></p>
<p>在 /root/wyj/tools 目录下新建 nginx 目录，将 nginx-1.17.7.tar.gz 放到此处，解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.17.7.tar.gz</div></pre></td></tr></table></figure></p>
<p>进入解压后目录<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginx.png" alt="nginx"><br>依次执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./configure   </div><div class="line"></div><div class="line">make   </div><div class="line"></div><div class="line">mkae install</div></pre></td></tr></table></figure></p>
<p>此时 nginx 安装完毕，安装目录是 /usr/local/nginx，nginx 默认占用 80 端口<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginx安装.png" alt="nginx安装"><br>其中，sbin 目录为 nginx 执行命令，conf 目录下的 nginx.conf 为默认加载的配置文件</p>
<p>启动 nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx</div></pre></td></tr></table></figure></p>
<p>关闭 nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -s stop</div></pre></td></tr></table></figure></p>
<p>重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx  -s reload</div></pre></td></tr></table></figure></p>
<p>启动 nginx 后访问 192.168.50.133:80 即可访问 nginx：显示 nginx 欢迎页<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginx欢迎.png" alt="nginx欢迎"></p>
<p>至此，nginx 安装完毕。</p>
<h1 id="四：反向代理与负载均衡配置"><a href="#四：反向代理与负载均衡配置" class="headerlink" title="四：反向代理与负载均衡配置"></a>四：反向代理与负载均衡配置</h1><p>现有一台服务器，为 192.168.43.3，服务器上有一台 tomcat，端口为 8080 和 8081，经过配置 nginx，当访问 192.168.43.3:80 时，即可访问 192.168.43.3:8080，192.168.43.3:8081 中随机一台，此时 192.168.43.3:80 被 nginx 监听，当有请求时，代理到 192.168.43.3:8080，192.168.43.3:8081 随机一台即可，即为 nginx 反向代理功能，同时此时可以通过 nginx 将请求进行转发，保证了一个入口，将所有请求转发到两台服务器上也减轻了任何一台的负载压力，当有大量请求时，可以搭建大量服务器，在入口代理服务器上使用 nginx 进行转发，即是负载均衡功能。</p>
<p>配置即是配置 nginx 安装目录中 conf 目录下的 nginx.conf 文件即可：具体配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#user  nobody;</div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line">#error_log  logs/error.log;</div><div class="line">#error_log  logs/error.log  notice;</div><div class="line">#error_log  logs/error.log  info;</div><div class="line"></div><div class="line">#pid        logs/nginx.pid;</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    #access_log  logs/access.log  main;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line">    #gzip  on;</div><div class="line"></div><div class="line"> 	#配置被代理的服务器</div><div class="line">    upstream blank &#123;</div><div class="line">        #ip_hash;</div><div class="line">        server 192.168.43.3:8080 weight=2;</div><div class="line">        server 192.168.43.3:8081 weight=1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    server &#123;</div><div class="line">    	#nginx监听80端口，请求该端口时转发到真实目标</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            #这里配置代理是指上面定义的两个被代理目标，blank名字必须一致</div><div class="line">          proxy_pass http://blank;</div><div class="line"></div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #error_page  404              /404.html;</div><div class="line"></div><div class="line">        # redirect server error pages to the static page /50x.html</div><div class="line">        #</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    proxy_pass   http://127.0.0.1;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    root           html;</div><div class="line">        #    fastcgi_pass   127.0.0.1:9000;</div><div class="line">        #    fastcgi_index  index.php;</div><div class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</div><div class="line">        #    include        fastcgi_params;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # deny access to .htaccess files, if Apache&apos;s document root</div><div class="line">        # concurs with nginx&apos;s one</div><div class="line">        #</div><div class="line">        #location ~ /\.ht &#123;</div><div class="line">        #    deny  all;</div><div class="line">        #&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       8000;</div><div class="line">    #    listen       somename:8080;</div><div class="line">    #    server_name  somename  alias  another.alias;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line"></div><div class="line">    # HTTPS server</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       443 ssl;</div><div class="line">    #    server_name  localhost;</div><div class="line"></div><div class="line">    #    ssl_certificate      cert.pem;</div><div class="line">    #    ssl_certificate_key  cert.key;</div><div class="line"></div><div class="line">    #    ssl_session_cache    shared:SSL:1m;</div><div class="line">    #    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    #    ssl_prefer_server_ciphers  on;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动两台 tomcat，重新启动 nginx：</p>
<p>访问 192.168.43.3:80 将会随机访问 192.168.43.3:8080 和 192.168.43.3:8081 其中一台。（问题：每次刷新 nginx 服务器地址 sessionid 会变，session 不能共享。）</p>
<p><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginxtomcat1.png" alt="nginxtomcat1"><br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginxtomcat2.png" alt="nginxtomcat2"></p>
<p>尝试不断刷新，两个页面会交替显示，即成功。<br>但发现SessionID并不相同，下一篇博文来通过Redis来实现Session的共享（同步）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：环境配置&quot;&gt;&lt;a href=&quot;#一：环境配置&quot; class=&quot;headerlink&quot; title=&quot;一：环境配置&quot;&gt;&lt;/a&gt;一：环境配置&lt;/h1&gt;&lt;p&gt;我本地是Windows系统，使用 Oracle VM VirtualBox 虚拟机安装一个虚拟的Linux系
    
    </summary>
    
      <category term="nginx" scheme="http://wangyuanjun.cn/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://wangyuanjun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>HTML/CSS基础知识学习笔记</title>
    <link href="http://wangyuanjun.cn/2018/01/11/HTML-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangyuanjun.cn/2018/01/11/HTML-CSS基础知识学习笔记/</id>
    <published>2018-01-11T09:21:16.000Z</published>
    <updated>2018-01-11T09:21:16.726Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dubbo学习——Dubbo-admin管理平台搭建(三)</title>
    <link href="http://wangyuanjun.cn/2018/01/11/Dubbo%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Dubbo-admin%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA-%E4%B8%89/"/>
    <id>http://wangyuanjun.cn/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/</id>
    <published>2018-01-11T03:05:23.000Z</published>
    <updated>2018-01-21T11:19:13.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：前言"><a href="#一：前言" class="headerlink" title="一：前言"></a>一：前言</h1><p>上一篇博文介绍的是dubbo的使用，包括有注册中心，消费者，提供者的使用，但是并不能看到有哪些消费者和提供者，为了更好的调试，发现问题，解决问题，因此引入dubbo-admin。通过dubbo-admin可以对消费者和提供者进行管理。</p>
<h1 id="二：下载与配置打包"><a href="#二：下载与配置打包" class="headerlink" title="二：下载与配置打包"></a>二：下载与配置打包</h1><p>dubbo-admin的下载，可自行到官网下载：<a href="https://github.com/alibaba/dubbo" target="_blank" rel="external">https://github.com/alibaba/dubbo</a><br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/dubbo.png" alt="dubbo"></p>
<p>但是这里我们只关心dubbo-admin这个文件夹。<br>打包war包，进入dubbo-admin这个文件目录 运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn package -Dmaven.skip.test=true</div></pre></td></tr></table></figure>
<p>打包成功之后，就会发现dubbo-admin下多了个target文件夹，打开target文件夹，发现里面有个war包：<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/war包.png" alt="war包"></p>
<h1 id="三：安装dubbo-admin"><a href="#三：安装dubbo-admin" class="headerlink" title="三：安装dubbo-admin"></a>三：安装dubbo-admin</h1><ol>
<li><p>第二步我们得到dubbo-admin-2.5.8-SNAPSHOT.war，把dubbo-admin-2.5.8-SNAPSHOT.war放到tomcat的webapps目录下，然后启动tomcat,启动完成后停tomcat，得到解压后的dubbo-admin<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/a.png" alt="a"></p>
</li>
<li><p>打开刚刚tomcat解压生成的dubbo.properties<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/b.png" alt="b"></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dubbo.registry.address=zookeeper://192.168.99.100:2181</div><div class="line">dubbo.admin.root.password=root</div><div class="line">dubbo.admin.guest.password=guest</div></pre></td></tr></table></figure>
<p>修改zookeeper地址为192.168.99.100:2181</p>
<p>帐号：root,密码：root,待会儿登录用</p>
<h1 id="四：运行"><a href="#四：运行" class="headerlink" title="四：运行"></a>四：运行</h1><ol>
<li><p>先启动zookeeper，然后再启动tomcat<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/zookeeper.png" alt="zookeeper"><br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/c.png" alt="c"><br>帐号：root;密码:root<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/dubboadminindx.png" alt="dubboadminindx"></p>
</li>
<li><p>查看提供者<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/provider.png" alt="provider"></p>
</li>
<li><p>查看消费者：<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/consumer.png" alt="consumer"></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：前言&quot;&gt;&lt;a href=&quot;#一：前言&quot; class=&quot;headerlink&quot; title=&quot;一：前言&quot;&gt;&lt;/a&gt;一：前言&lt;/h1&gt;&lt;p&gt;上一篇博文介绍的是dubbo的使用，包括有注册中心，消费者，提供者的使用，但是并不能看到有哪些消费者和提供者，为了更好的调试
    
    </summary>
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/categories/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo学习——Dubbo简单入门Demo(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/10/Dubbo%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Dubbo%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8Demo-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/</id>
    <published>2018-01-10T15:16:22.000Z</published>
    <updated>2018-01-21T11:06:01.930Z</updated>
    
    <content type="html"><![CDATA[<p>本文采用Dubbo与Zookeeper、Spring框架的整合。整个项目的代码已经上传到我的github <a href="https://github.com/wangyuanjun008/wyj-dubbo-demo.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-dubbo-demo.git</a> 欢迎查看。<br>主要是以下几个步骤： </p>
<ol>
<li>安装Zookeeper,启动； </li>
<li>创建MAVEN项目，构建Dubbo+Zookeeper+Spring实现的简单Demo； </li>
<li>安装Dubbo-admin，实现监控。</li>
</ol>
<h1 id="一：Zookeeper介绍与安装"><a href="#一：Zookeeper介绍与安装" class="headerlink" title="一：Zookeeper介绍与安装"></a>一：Zookeeper介绍与安装</h1><p>本Demo中的Dubbo注册中心采用的是Zookeeper。为什么采用Zookeeper呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Zookeeper是一个分布式的服务框架，是树型的目录服务的数据存储，能做到集群管理数据 ，这里能很好的作为Dubbo服务的注册中心。</div><div class="line"></div><div class="line">Dubbo能与Zookeeper做到集群部署，当提供者出现断电等异常停机时，Zookeeper注册中心能自动删除提供者信息，当提供者重启时，能自动恢复注册数据，以及订阅请求</div></pre></td></tr></table></figure></p>
<p>到官网下载并安装到windows上，可参考博文： <a href="http://blog.csdn.net/tlk20071/article/details/52028945" target="_blank" rel="external">http://blog.csdn.net/tlk20071/article/details/52028945</a><br>我使用的是docker容器，在docker上下载zooleeper镜像,然后使用如下命令创建并启动zookeeper容器，映射与本机的端口号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name zookeeper -p 2181:2181 -p 2888:2888 -p 3888:3888 -d zookeeper:latest</div></pre></td></tr></table></figure></p>
<p><img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/zookeeper.png" alt="zookeeper"></p>
<p>我之前下载过，所以我直接启动zookeeper容器</p>
<h1 id="二：创建MAVEN项目"><a href="#二：创建MAVEN项目" class="headerlink" title="二：创建MAVEN项目"></a>二：创建MAVEN项目</h1><p>项目结构：<br>主要分三大模块：<br>dubbo-api : 存放公共接口；<br>dubbo-consumer :　调用远程服务；<br>dubbo-provider : 提供远程服务。<br><img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/project.png" alt="project"></p>
<p>下面将详细叙述代码构建过程。 </p>
<ol>
<li><p>首先构建MAVEN项目，导入所需要的jar包依赖。<br>需要导入的有spring, dubbo, zookeeper等jar包。<br>(详情参看后面提供的项目代码)</p>
</li>
<li><p>建dubbo-api的MAVEN项目(有独立的pom.xml，用来打包供提供者消费者使用)。<br>在项目中定义服务接口：该接口需单独打包，在服务提供方和消费方共享。<br><img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/api.png" alt="api"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo;</div><div class="line">/**</div><div class="line"> * 定义服务接口</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午9:03:40</div><div class="line"> */</div><div class="line">public interface DemoService &#123;</div><div class="line">    </div><div class="line">    String sayHello(String name);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建dubbo-provider的MAVEN项目(有独立的pom.xml，用来打包供消费者使用)。 </p>
<p> 实现公共接口，此实现对消费者隐藏：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo.provider;</div><div class="line"></div><div class="line">import com.wyj.dubbo.demo.DemoService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 服务提供者实现服务定义</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午9:07:16</div><div class="line"> */</div><div class="line">public class DemoServiceImpl implements DemoService &#123;</div><div class="line"></div><div class="line">    public String sayHello(String name) &#123;</div><div class="line">        return &quot;Hello &quot; + name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 需加入公共接口所在的依赖<br> <img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/provider-pom.png" alt="provider-pom"></p>
<p> 用Spring配置声明暴露服务</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo</div><div class="line">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</div><div class="line">       </div><div class="line">	&lt;!--定义了提供方应用信息，用于计算依赖关系；在 dubbo-admin 或 dubbo-monitor 会显示这个名字，方便辨识 --&gt;</div><div class="line">	&lt;dubbo:application name=&quot;demotest-provider&quot; owner=&quot;programmer&quot;</div><div class="line">		organization=&quot;dubbox&quot; /&gt;</div><div class="line">	&lt;!--使用 zookeeper 注册中心暴露服务，注意要先开启 zookeeper --&gt;</div><div class="line">	&lt;dubbo:registry address=&quot;zookeeper://192.168.99.100:2181&quot; /&gt;</div><div class="line">	&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</div><div class="line">	&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;</div><div class="line">	&lt;!--使用 dubbo 协议实现定义好的 api.PermissionService 接口 --&gt;</div><div class="line">	&lt;dubbo:service interface=&quot;com.wyj.dubbo.demo.DemoService&quot;</div><div class="line">		ref=&quot;demoService&quot; protocol=&quot;dubbo&quot; /&gt;</div><div class="line">	&lt;!--具体实现该接口的 bean --&gt;</div><div class="line">	&lt;bean id=&quot;demoService&quot; class=&quot;com.wyj.dubbo.demo.provider.DemoServiceImpl&quot; /&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p> 启动远程服务：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo.provider;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 启动服务提供者</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午9:10:38</div><div class="line"> */</div><div class="line">public class Provider &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws IOException &#123;</div><div class="line">        </div><div class="line">        ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(&quot;dubbo-provider.xml&quot;);</div><div class="line">        System.out.println(classPathXmlApplicationContext.getDisplayName() + &quot;: here&quot;);</div><div class="line">        classPathXmlApplicationContext.start();</div><div class="line">        System.out.println(&quot;服务已经启动...&quot;);</div><div class="line">        System.in.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建dubbo-consumer的MAVEN项目(可以有多个consumer，但是需要配置好)。<br> 调用所需要的远程服务：</p>
<p> 通过Spring配置引用远程服务：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</div><div class="line">       </div><div class="line">	&lt;dubbo:application name=&quot;demotest-consumer&quot; owner=&quot;programmer&quot; organization=&quot;dubbox&quot; /&gt;</div><div class="line">		</div><div class="line">	&lt;!--向 zookeeper 订阅 provider 的地址，由 zookeeper 定时推送 --&gt;</div><div class="line">	&lt;dubbo:registry address=&quot;zookeeper://192.168.99.100:2181&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;!--使用 dubbo 协议调用定义好的 api.demoService 接口 --&gt;</div><div class="line">	&lt;dubbo:reference id=&quot;demoService&quot; interface=&quot;com.wyj.dubbo.demo.DemoService&quot; /&gt;</div><div class="line">		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p> 启动Consumer,调用远程服务：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo.consumer;</div><div class="line"></div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.wyj.dubbo.demo.DemoService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 启动服务消费者</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午10:00:33</div><div class="line"> */</div><div class="line">public class Consumer &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(&quot;dubbo-consumer.xml&quot;);</div><div class="line">        classPathXmlApplicationContext.start();</div><div class="line">        DemoService demoService = (DemoService) classPathXmlApplicationContext.getBean(&quot;demoService&quot;); </div><div class="line"></div><div class="line">        while (true) &#123;</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(1000);</div><div class="line">                String hello = demoService.sayHello(&quot;world&quot;); </div><div class="line">                System.out.println(hello); </div><div class="line"></div><div class="line">            &#125; catch (Throwable throwable) &#123;</div><div class="line">                throwable.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行项目，先确保provider已被运行后再启动consumer模块：<br> 运行提供者：<br> <img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/provider.png" alt="provider"></p>
<p> 消费者成功调用提供者所提供的远程服务：<br> <img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/consumer.png" alt="consumer"></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文采用Dubbo与Zookeeper、Spring框架的整合。整个项目的代码已经上传到我的github &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-dubbo-demo.git&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/categories/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>使用DaoCloud docker镜像加速器</title>
    <link href="http://wangyuanjun.cn/2018/01/10/%E4%BD%BF%E7%94%A8DaoCloud%20docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8/"/>
    <id>http://wangyuanjun.cn/2018/01/10/使用DaoCloud docker镜像加速器/</id>
    <published>2018-01-10T06:10:46.000Z</published>
    <updated>2018-01-21T11:04:36.494Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Docker 的时候，需要经常从官方获取镜像，但是由于显而易见的网络原因，拉取镜像的过程非常耗时，严重影响使用Docker的体验。由于国内访问直接访问dockerhub网速比较慢，拉取镜像的时间就会比较长，甚至下载失败。一般我们会使用镜像加速或者直接从国内的一些平台镜像仓库上拉取。<br>我之前准备用阿里云的加速器的，试了好长时间没有成功，于是改用DaoCloud，下面向大家介绍在windows环境下使用docker toolbox来配置镜像加速器。<br>在docker客户端执行如下命令</p>
<pre><code>docker-machine ssh default
sudo sed -i &quot;s|EXTRA_ARGS=&apos;|EXTRA_ARGS=&apos;--registry-mirror=加速地址 |g&quot; /var/lib/boot2docker/profile
exit
docker-machine restart default 
</code></pre><p>1.使用docker客户端连接名为default的虚拟机<br>2.配置DaoCloud加速器<br>3.退出虚拟机到docker客户端<br>4.名为default的虚拟机重启</p>
<p>如果你想在linux,MC上配置加速器，请参考<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">配置 Docker 加速器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Docker 的时候，需要经常从官方获取镜像，但是由于显而易见的网络原因，拉取镜像的过程非常耗时，严重影响使用Docker的体验。由于国内访问直接访问dockerhub网速比较慢，拉取镜像的时间就会比较长，甚至下载失败。一般我们会使用镜像加速或者直接从国内的一些平台镜
    
    </summary>
    
      <category term="docker" scheme="http://wangyuanjun.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://wangyuanjun.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Quartz学习——SSM和Quartz集成详解(四)</title>
    <link href="http://wangyuanjun.cn/2018/01/08/Quartz%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94SSM%E5%92%8CQuartz%E9%9B%86%E6%88%90%E8%AF%A6%E8%A7%A3-%E5%9B%9B/"/>
    <id>http://wangyuanjun.cn/2018/01/08/Quartz学习——SSM和Quartz集成详解-四/</id>
    <published>2018-01-08T07:31:45.000Z</published>
    <updated>2018-01-08T09:09:28.738Z</updated>
    
    <content type="html"><![CDATA[<p>下面介绍SSM+Quartz的示例，项目地址: <font color="red" size="5" face="微软雅黑"><a href="https://github.com/wangyuanjun008/wyj-quartz-ssm.git" target="_blank" rel="external">quartz-spring</a></font></p>
<h2 id="一：环境介绍"><a href="#一：环境介绍" class="headerlink" title="一：环境介绍"></a>一：环境介绍</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">工具：Spring Tool Suite + Mysql </div><div class="line">框架：Spring+SpringMVC+Mybatis</div><div class="line">前端: easy ui </div><div class="line">日志：logback </div><div class="line">构建工具：Maven </div><div class="line">Quartz版本：2.2.3</div></pre></td></tr></table></figure>
<h2 id="二：SSM-Quartz集成详解"><a href="#二：SSM-Quartz集成详解" class="headerlink" title="二：SSM+Quartz集成详解"></a>二：SSM+Quartz集成详解</h2><h3 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1.项目结构"></a>1.项目结构</h3><p><img src="/2018/01/08/Quartz学习——SSM和Quartz集成详解-四/结构项目.png" alt="结构项目"></p>
<h3 id="2-配置文件介绍"><a href="#2-配置文件介绍" class="headerlink" title="2.配置文件介绍"></a>2.配置文件介绍</h3><p>（1）：在ApplicationContext.xml中添加下面的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;bean name=&quot;quartzScheduler&quot;</div><div class="line">	class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;</div><div class="line">	&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;&lt;!-- 读取spring配置的数据库，不去加载quartz.properties --&gt;</div><div class="line">	&lt;property name=&quot;applicationContextSchedulerContextKey&quot; value=&quot;applicationContextKey&quot; /&gt;</div><div class="line">	&lt;property name=&quot;configLocation&quot; value=&quot;classpath:quartz.properties&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>（2）：添加quartz.properties配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># Default Properties file for use by StdSchedulerFactory  </div><div class="line"># to create a Quartz Scheduler Instance, if a different  </div><div class="line"># properties file is not explicitly specified.  </div><div class="line">#  </div><div class="line">  </div><div class="line"></div><div class="line">org.quartz.scheduler.instanceName: DefaultQuartzScheduler</div><div class="line">#org.quartz.scheduler.instanceId = AUTO</div><div class="line"> </div><div class="line">org.quartz.scheduler.rmi.export: false  </div><div class="line">org.quartz.scheduler.rmi.proxy: false  </div><div class="line">org.quartz.scheduler.wrapJobExecutionInUserTransaction: false  </div><div class="line">  </div><div class="line">org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool  </div><div class="line">org.quartz.threadPool.threadCount: 10  </div><div class="line">org.quartz.threadPool.threadPriority: 5  </div><div class="line">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true  </div><div class="line">  </div><div class="line">#持久化配置</div><div class="line">org.quartz.jobStore.misfireThreshold: 60000  </div><div class="line">org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX </div><div class="line">org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate  </div><div class="line">org.quartz.jobStore.useProperties:true  </div><div class="line">#指定前缀</div><div class="line">org.quartz.jobStore.tablePrefix: QRTZ_</div></pre></td></tr></table></figure></p>
<h3 id="3-核心代码"><a href="#3-核心代码" class="headerlink" title="3.核心代码"></a>3.核心代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div></pre></td><td class="code"><pre><div class="line">package com.wyj.controller;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Set;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import org.apache.commons.lang.StringUtils;</div><div class="line">import org.quartz.CronTrigger;</div><div class="line">import org.quartz.JobDataMap;</div><div class="line">import org.quartz.JobDetail;</div><div class="line">import org.quartz.JobKey;</div><div class="line">import org.quartz.Scheduler;</div><div class="line">import org.quartz.SchedulerException;</div><div class="line">import org.quartz.Trigger;</div><div class="line">import org.quartz.TriggerKey;</div><div class="line">import org.quartz.impl.matchers.GroupMatcher;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.RequestMethod;</div><div class="line">import org.springframework.web.bind.annotation.RequestParam;</div><div class="line">import org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line">import com.alibaba.fastjson.JSON;</div><div class="line">import com.wyj.entity.JobDto;</div><div class="line">import com.wyj.entity.Retval;</div><div class="line">import com.wyj.service.QuartzService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 定时任务 Controller</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月7日 下午10:15:33</div><div class="line"> */</div><div class="line"></div><div class="line">@Controller</div><div class="line">@RequestMapping(value = &quot;/quartz&quot;)</div><div class="line">public class QuartzController &#123;</div><div class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</div><div class="line">    @Autowired</div><div class="line">    private Scheduler quartzScheduler;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private QuartzService quartzService;</div><div class="line"></div><div class="line">    @RequestMapping(&quot;/index&quot;)</div><div class="line">    public String index() &#123;</div><div class="line">        return &quot;/quartz/list&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 定时列表页</div><div class="line">     * </div><div class="line">     * @return</div><div class="line">     * @throws SchedulerException</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/list&quot;)</div><div class="line">    public String listJob(HttpServletRequest request, HttpServletResponse response) throws SchedulerException &#123;</div><div class="line">        List&lt;JobDto&gt; jobInfos = this.getSchedulerJobInfo();</div><div class="line">        return JSON.toJSONString(jobInfos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 新建job</div><div class="line">     * </div><div class="line">     * @param jobDto</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/add&quot;)</div><div class="line">    public Retval save(JobDto jobDto) &#123;</div><div class="line">        Retval retval = Retval.newInstance();</div><div class="line">        try &#123;</div><div class="line">            quartzService.addJob(jobDto.getJobName(), jobDto.getJobGroupName(), jobDto.getTriggerName(), jobDto.getTriggerGroupName(), Class.forName(jobDto.getJobClass()), jobDto.getCronExpression());</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            logger.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return retval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 编辑job</div><div class="line">     * </div><div class="line">     * @param jobDto</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/edit&quot;, method = RequestMethod.POST)</div><div class="line">    public Retval edit(JobDto jobDto) &#123;</div><div class="line">        Retval retval = Retval.newInstance();</div><div class="line">        try &#123;</div><div class="line">            boolean result = quartzService.modifyJobTime(jobDto.getOldJobName(), jobDto.getOldJobGroupName(), jobDto.getOldTriggerName(), jobDto.getOldTriggerGroupName(), jobDto.getJobName(), jobDto.getJobGroupName(), jobDto.getTriggerName(), jobDto.getTriggerGroupName(), jobDto.getCronExpression());</div><div class="line">            if (result) &#123;</div><div class="line">                retval.put(&quot;message&quot;, &quot;修改任务成功!&quot;);</div><div class="line">            &#125; else &#123;</div><div class="line">                retval.put(&quot;message&quot;, &quot;修改任务失败!&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            logger.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return retval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 暂停job</div><div class="line">     * </div><div class="line">     * @param jobName</div><div class="line">     * @param jobGroupName</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/stopJob&quot;, method = RequestMethod.POST)</div><div class="line">    public Retval stopJob(@RequestParam(&quot;jobName&quot;) String jobName, @RequestParam(&quot;jobGroupName&quot;) String jobGroupName) &#123;</div><div class="line">        Retval retval = Retval.newInstance();</div><div class="line">        if (StringUtils.isEmpty(jobName) || StringUtils.isEmpty(jobGroupName)) &#123;</div><div class="line">            retval.fail();</div><div class="line">            retval.put(&quot;message&quot;, &quot;暂停失败&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            try &#123;</div><div class="line">                quartzService.pauseJob(jobName, jobGroupName);</div><div class="line">                retval.put(&quot;message&quot;, &quot;暂停成功&quot;);</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                logger.error(e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return retval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 恢复job</div><div class="line">     * </div><div class="line">     * @param jobName</div><div class="line">     * @param jobGroupName</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/resumeJob&quot;, method = RequestMethod.POST)</div><div class="line">    public Retval resumeJob(@RequestParam(&quot;jobName&quot;) String jobName, @RequestParam(&quot;jobGroupName&quot;) String jobGroupName) &#123;</div><div class="line">        Retval retval = Retval.newInstance();</div><div class="line">        if (StringUtils.isEmpty(jobName) || StringUtils.isEmpty(jobGroupName)) &#123;</div><div class="line">            retval.fail();</div><div class="line">            retval.put(&quot;message&quot;, &quot;恢复失败&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            try &#123;</div><div class="line">                quartzService.resumeJob(jobName, jobGroupName);</div><div class="line">                retval.put(&quot;message&quot;, &quot;恢复成功&quot;);</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                logger.error(e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return retval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除job</div><div class="line">     * </div><div class="line">     * @param jobName</div><div class="line">     * @param jobGroupName</div><div class="line">     * @param triggerName</div><div class="line">     * @param triggerGroupName</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @RequestMapping(value = &quot;/deleteJob&quot;, method = RequestMethod.POST)</div><div class="line">    @ResponseBody</div><div class="line">    public Retval deleteJob(@RequestParam(&quot;jobName&quot;) String jobName, @RequestParam(&quot;jobGroupName&quot;) String jobGroupName, @RequestParam(&quot;triggerName&quot;) String triggerName, @RequestParam(&quot;triggerGroupName&quot;) String triggerGroupName) &#123;</div><div class="line">        Retval retval = Retval.newInstance();</div><div class="line"></div><div class="line">        if (StringUtils.isEmpty(jobName) || StringUtils.isEmpty(jobGroupName) || StringUtils.isEmpty(triggerName) || StringUtils.isEmpty(triggerGroupName)) &#123;</div><div class="line">            retval.fail();</div><div class="line">            retval.put(&quot;message&quot;, &quot;删除失败&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            try &#123;</div><div class="line">                quartzService.removeJob(jobName, jobGroupName, triggerName, triggerGroupName);</div><div class="line">                retval.put(&quot;message&quot;, &quot;删除成功&quot;);</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                logger.error(e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return retval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private List&lt;JobDto&gt; getSchedulerJobInfo() throws SchedulerException &#123;</div><div class="line">        List&lt;JobDto&gt; jobInfos = new ArrayList&lt;JobDto&gt;();</div><div class="line">        List&lt;String&gt; triggerGroupNames = quartzScheduler.getTriggerGroupNames();</div><div class="line">        for (String triggerGroupName : triggerGroupNames) &#123;</div><div class="line">            Set&lt;TriggerKey&gt; triggerKeySet = quartzScheduler.getTriggerKeys(GroupMatcher.triggerGroupEquals(triggerGroupName));</div><div class="line">            for (TriggerKey triggerKey : triggerKeySet) &#123;</div><div class="line">                Trigger t = quartzScheduler.getTrigger(triggerKey);</div><div class="line">                if (t instanceof CronTrigger) &#123;</div><div class="line">                    CronTrigger trigger = (CronTrigger) t;</div><div class="line">                    JobKey jobKey = trigger.getJobKey();</div><div class="line">                    JobDetail jd = quartzScheduler.getJobDetail(jobKey);</div><div class="line">                    JobDto jobInfo = new JobDto();</div><div class="line">                    jobInfo.setJobName(jobKey.getName());</div><div class="line">                    jobInfo.setJobGroupName(jobKey.getGroup());</div><div class="line">                    jobInfo.setTriggerName(triggerKey.getName());</div><div class="line">                    jobInfo.setTriggerGroupName(triggerKey.getGroup());</div><div class="line">                    jobInfo.setCronExpression(trigger.getCronExpression());</div><div class="line">                    jobInfo.setNextFireTime(trigger.getNextFireTime());</div><div class="line">                    jobInfo.setPreviousFireTime(trigger.getPreviousFireTime());</div><div class="line">                    jobInfo.setStartTime(trigger.getStartTime());</div><div class="line">                    jobInfo.setEndTime(trigger.getEndTime());</div><div class="line">                    jobInfo.setJobClass(jd.getJobClass().getCanonicalName());</div><div class="line">                    // jobInfo.setDuration(Long.parseLong(jd.getDescription()));</div><div class="line">                    Trigger.TriggerState triggerState = quartzScheduler.getTriggerState(trigger.getKey());</div><div class="line">                    jobInfo.setJobStatus(triggerState.toString());// NONE无,</div><div class="line">                                                                  // NORMAL正常,</div><div class="line">                                                                  // PAUSED暂停,</div><div class="line">                                                                  // COMPLETE完全,</div><div class="line">                                                                  // ERROR错误,</div><div class="line">                                                                  // BLOCKED阻塞</div><div class="line">                    JobDataMap map = quartzScheduler.getJobDetail(jobKey).getJobDataMap();</div><div class="line">                    if (null != map &amp;&amp; map.size() != 0) &#123;</div><div class="line">                        jobInfo.setCount(Long.valueOf((String) map.get(&quot;count&quot;)));</div><div class="line">                        jobInfo.setJobDataMap(map);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        jobInfo.setJobDataMap(new JobDataMap());</div><div class="line">                    &#125;</div><div class="line">                    jobInfos.add(jobInfo);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return jobInfos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-job"><a href="#4-job" class="headerlink" title="4.job"></a>4.job</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.job;</div><div class="line"></div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">import org.quartz.Job;</div><div class="line">import org.quartz.JobExecutionContext;</div><div class="line">import org.quartz.JobExecutionException;</div><div class="line">/**</div><div class="line"> * Job任务</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月5日 下午10:22:42</div><div class="line"> */</div><div class="line">public class HelloWorldJob implements Job &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void execute(JobExecutionContext context) throws JobExecutionException &#123;</div><div class="line">        System.out.println(&quot;----hello world---&quot; + new Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="三：运行效果介绍"><a href="#三：运行效果介绍" class="headerlink" title="三：运行效果介绍"></a>三：运行效果介绍</h2><p><img src="/2018/01/08/Quartz学习——SSM和Quartz集成详解-四/编辑页面.png" alt="编辑页面"><br><img src="/2018/01/08/Quartz学习——SSM和Quartz集成详解-四/控制台.png" alt="控制台"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面介绍SSM+Quartz的示例，项目地址: &lt;font color=&quot;red&quot; size=&quot;5&quot; face=&quot;微软雅黑&quot;&gt;&lt;a href=&quot;https://github.com/wangyuanjun008/wyj-quartz-ssm.git&quot; target=&quot;_bl
    
    </summary>
    
      <category term="quartz" scheme="http://wangyuanjun.cn/categories/quartz/"/>
    
    
      <category term="quartz" scheme="http://wangyuanjun.cn/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>Quartz学习——Spring和Quartz集成详解(三)</title>
    <link href="http://wangyuanjun.cn/2018/01/08/Quartz%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Spring%E5%92%8CQuartz%E9%9B%86%E6%88%90%E8%AF%A6%E8%A7%A3-%E4%B8%89/"/>
    <id>http://wangyuanjun.cn/2018/01/08/Quartz学习——Spring和Quartz集成详解-三/</id>
    <published>2018-01-08T06:46:30.000Z</published>
    <updated>2018-01-08T09:09:22.610Z</updated>
    
    <content type="html"><![CDATA[<p>下面介绍Spring集成Quartz的示例，项目地址: <font color="red" size="5" face="微软雅黑"><a href="https://github.com/wangyuanjun008/wyj-quartz-spring.git" target="_blank" rel="external">quartz-spring</a></font><br>介绍Spring和Quartz集成存储方式使用的是RAM方式和JDBC方式！ </p>
<h2 id="jar包依赖"><a href="#jar包依赖" class="headerlink" title="jar包依赖"></a>jar包依赖</h2><pre><code>&lt;properties&gt;
    &lt;!-- 项目构建源码编码方式 --&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;!-- 主要依赖库的版本定义 --&gt;
    &lt;!-- spring版本号 --&gt;
    &lt;spring.version&gt;4.0.2.RELEASE&lt;/spring.version&gt;
    &lt;!-- 日志文件管理包版本 --&gt;
    &lt;slf4j.version&gt;1.7.7&lt;/slf4j.version&gt;
    &lt;junit.version&gt;4.11&lt;/junit.version&gt;
    &lt;jackson.version&gt;2.4.0&lt;/jackson.version&gt;
    &lt;mysql.version&gt;5.1.30&lt;/mysql.version&gt;
    &lt;quartz.version&gt;2.2.3&lt;/quartz.version&gt;
    &lt;fastjson.version&gt;1.1.41&lt;/fastjson.version&gt;

&lt;/properties&gt;


&lt;dependencies&gt;

    &lt;!-- spring核心包 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- 导入java ee jar 包 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax&lt;/groupId&gt;
        &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;
        &lt;version&gt;7.0&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;!-- JSTL标签类 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
        &lt;artifactId&gt;jstl&lt;/artifactId&gt;
        &lt;version&gt;1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- 日志文件管理包 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
        &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
        &lt;version&gt;1.1.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.logback-extensions&lt;/groupId&gt;
        &lt;artifactId&gt;logback-ext-spring&lt;/artifactId&gt;
        &lt;version&gt;0.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- 代码直接调用commons-logging会被桥接到slf4j --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
        &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;
        &lt;version&gt;1.7.12&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- 代码直接调用java.util.logging会被桥接到slf4j --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
        &lt;artifactId&gt;jul-to-slf4j&lt;/artifactId&gt;
        &lt;version&gt;1.7.12&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- 格式化对象，方便输出日志 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
        &lt;version&gt;${fastjson.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;${junit.version}&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;!-- 导入Mysql数据库链接jar包 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;${mysql.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- velocity --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.7&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity-tools&lt;/artifactId&gt;
        &lt;version&gt;2.0&lt;/version&gt;
    &lt;/dependency&gt;


    &lt;!-- JSON begin --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;
        &lt;version&gt;${jackson.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
        &lt;version&gt;${jackson.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;
        &lt;artifactId&gt;jackson-module-jaxb-annotations&lt;/artifactId&gt;
        &lt;version&gt;${jackson.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- freemarker --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.freemarker&lt;/groupId&gt;
        &lt;artifactId&gt;freemarker&lt;/artifactId&gt;
        &lt;version&gt;2.3.27-incubating&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
        &lt;artifactId&gt;quartz&lt;/artifactId&gt;
        &lt;version&gt;${quartz.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
        &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;
        &lt;version&gt;${quartz.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre><h2 id="配置文件spring-quartz-xml"><a href="#配置文件spring-quartz-xml" class="headerlink" title="配置文件spring-quartz.xml"></a>配置文件spring-quartz.xml</h2><h3 id="RAM存储方式的xml配置文件"><a href="#RAM存储方式的xml配置文件" class="headerlink" title="RAM存储方式的xml配置文件"></a>RAM存储方式的xml配置文件</h3><p>（1）：配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</div><div class="line">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- ====================================RAM版============================================== --&gt;</div><div class="line">	&lt;!-- </div><div class="line">		Spring整合Quartz进行配置遵循下面的步骤：</div><div class="line">		1：定义工作任务的Job</div><div class="line">		2：定义触发器Trigger，并将触发器与工作任务绑定</div><div class="line">		3：定义调度器，并将Trigger注册到Scheduler</div><div class="line">	 --&gt;</div><div class="line">	&lt;!-- 1：定义任务的bean ，这里使用JobDetailFactoryBean,也可以使用MethodInvokingJobDetailFactoryBean ，配置类似--&gt;</div><div class="line">	&lt;bean name=&quot;hwJob&quot; class=&quot;org.springframework.scheduling.quartz.JobDetailFactoryBean&quot;&gt;</div><div class="line">		&lt;!-- 指定job的名称 --&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;hw_job&quot;/&gt;</div><div class="line">		&lt;!-- 指定job的分组 --&gt;</div><div class="line">		&lt;property name=&quot;group&quot; value=&quot;hw_group&quot;/&gt;</div><div class="line">		&lt;!-- 指定具体的job类 --&gt;</div><div class="line">		&lt;property name=&quot;jobClass&quot; value=&quot;com.wyj.exampleRAM.RAMJob&quot;/&gt;</div><div class="line">		&lt;!-- 必须设置为true，如果为false，当没有活动的触发器与之关联时会在调度器中会删除该任务  --&gt;</div><div class="line">		&lt;property name=&quot;durability&quot; value=&quot;true&quot;/&gt;</div><div class="line">		&lt;!-- 指定spring容器的key，如果不设定在job中的jobmap中是获取不到spring容器的 --&gt;</div><div class="line">		&lt;property name=&quot;applicationContextJobDataKey&quot; value=&quot;applicationContext&quot;/&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- 2.1：定义触发器的bean，定义一个Simple的Trigger，一个触发器只能和一个任务进行绑定 --&gt;</div><div class="line">	&lt;!-- &lt;bean name=&quot;simpleTrigger&quot; class=&quot;org.springframework.scheduling.quartz.SimpleTriggerFactoryBean&quot;&gt;</div><div class="line">		指定Trigger的名称</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;hw_trigger&quot;/&gt;</div><div class="line">		指定Trigger的名称</div><div class="line">		&lt;property name=&quot;group&quot; value=&quot;hw_trigger_group&quot;/&gt;</div><div class="line">		指定Tirgger绑定的Job</div><div class="line">		&lt;property name=&quot;jobDetail&quot; ref=&quot;hwJob&quot;/&gt;</div><div class="line">		指定Trigger的延迟时间 1s后运行</div><div class="line">		&lt;property name=&quot;startDelay&quot; value=&quot;1000&quot;/&gt;</div><div class="line">		指定Trigger的重复间隔  5s</div><div class="line">		&lt;property name=&quot;repeatInterval&quot; value=&quot;5000&quot;/&gt;</div><div class="line">		指定Trigger的重复次数</div><div class="line">		&lt;property name=&quot;repeatCount&quot; value=&quot;5&quot;/&gt;</div><div class="line">	&lt;/bean&gt; --&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 2.2：定义触发器的bean，定义一个Cron的Trigger，一个触发器只能和一个任务进行绑定 --&gt;</div><div class="line">	&lt;bean id=&quot;cronTrigger&quot; class=&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;&gt;</div><div class="line">		&lt;!-- 指定Trigger的名称 --&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;hw_trigger&quot;/&gt;</div><div class="line">		&lt;!-- 指定Trigger的名称 --&gt;</div><div class="line">		&lt;property name=&quot;group&quot; value=&quot;hw_trigger_group&quot;/&gt;</div><div class="line">		&lt;!-- 指定Tirgger绑定的Job --&gt;</div><div class="line">		&lt;property name=&quot;jobDetail&quot; ref=&quot;hwJob&quot;/&gt;</div><div class="line">		&lt;!-- 指定Cron 的表达式 ，当前是每隔1s运行一次 --&gt;</div><div class="line">		&lt;property name=&quot;cronExpression&quot; value=&quot;0/1 * * * * ?&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	</div><div class="line">	&lt;!-- 3.定义调度器，并将Trigger注册到调度器中--&gt;</div><div class="line">	&lt;bean name=&quot;scheduler&quot; class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;</div><div class="line">		&lt;property name=&quot;triggers&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">&lt;!--  				&lt;ref bean=&quot;simpleTrigger&quot;/&gt;   --&gt;</div><div class="line">				&lt;ref bean=&quot;cronTrigger&quot;/&gt; </div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>（2）：运行结果<br>CronScheduleBuilder：<br><img src="/2018/01/08/Quartz学习——Spring和Quartz集成详解-三/RAMTest.png" alt="RAMTest"></p>
<h3 id="JDBC存储方式的xml配置文件"><a href="#JDBC存储方式的xml配置文件" class="headerlink" title="JDBC存储方式的xml配置文件"></a>JDBC存储方式的xml配置文件</h3><p>（1）：配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</div><div class="line">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&gt;</div><div class="line">	</div><div class="line">	&lt;!-- ====================================JDBC版============================================== --&gt;</div><div class="line">	&lt;!-- </div><div class="line">		持久化数据配置，需要添加quartz.properties</div><div class="line">	 --&gt;</div><div class="line"> 	&lt;bean name=&quot;scheduler&quot; class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt; </div><div class="line">        &lt;property name=&quot;applicationContextSchedulerContextKey&quot; value=&quot;applicationContextKey&quot;/&gt; </div><div class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:quartz.properties&quot;/&gt;	</div><div class="line">	&lt;/bean&gt; </div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>（2）：quartz.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># Default Properties file for use by StdSchedulerFactory  </div><div class="line"># to create a Quartz Scheduler Instance, if a different  </div><div class="line"># properties file is not explicitly specified.  </div><div class="line">#  </div><div class="line">  </div><div class="line">#org.quartz.scheduler.instanceName: DefaultQuartzScheduler </div><div class="line"></div><div class="line">org.quartz.scheduler.instanceName: DefaultQuartzScheduler</div><div class="line">#org.quartz.scheduler.instanceId = AUTO</div><div class="line"> </div><div class="line">org.quartz.scheduler.rmi.export: false  </div><div class="line">org.quartz.scheduler.rmi.proxy: false  </div><div class="line">org.quartz.scheduler.wrapJobExecutionInUserTransaction: false  </div><div class="line">  </div><div class="line">org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool  </div><div class="line">org.quartz.threadPool.threadCount: 10  </div><div class="line">org.quartz.threadPool.threadPriority: 5  </div><div class="line">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true  </div><div class="line">  </div><div class="line">#创建数据源</div><div class="line">org.quartz.jobStore.misfireThreshold: 60000  </div><div class="line">#JDBC连接方式</div><div class="line">org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX </div><div class="line">#JDBC代理类 </div><div class="line">org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate  </div><div class="line">org.quartz.jobStore.useProperties:true  </div><div class="line">#指定前缀</div><div class="line">org.quartz.jobStore.tablePrefix: QRTZ_</div><div class="line">#数据源名称</div><div class="line">org.quartz.jobStore.dataSource: qzDS  </div><div class="line">#配置数据源属性  </div><div class="line">org.quartz.dataSource.qzDS.driver:com.mysql.jdbc.Driver</div><div class="line">org.quartz.dataSource.qzDS.URL:jdbc:mysql://192.168.99.100:3306/quartz_test?useUnicode=true&amp;characterEncoding=utf-8</div><div class="line">org.quartz.dataSource.qzDS.user:root</div><div class="line">org.quartz.dataSource.qzDS.password:admin</div><div class="line">org.quartz.dataSource.qzDS.maxConnections:10</div></pre></td></tr></table></figure></p>
<p>（3）：job<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.exampleJDBC;</div><div class="line"></div><div class="line">import java.text.SimpleDateFormat;</div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">import org.quartz.Job;</div><div class="line">import org.quartz.JobExecutionContext;</div><div class="line">import org.quartz.JobExecutionException;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">/**</div><div class="line"> * JdbcJob</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2017年12月29日 下午10:05:18</div><div class="line"> */</div><div class="line">public class JdbcJob implements Job&#123;</div><div class="line"></div><div class="line">	private Logger logger = LoggerFactory.getLogger(JdbcJob.class);</div><div class="line"></div><div class="line">	public void execute(JobExecutionContext arg0) throws JobExecutionException &#123;</div><div class="line"></div><div class="line">		logger.debug(&quot;MyJDBCJob is start ...&quot;);</div><div class="line">		</div><div class="line">		logger.debug(&quot;MyJDBCJob quzrtz &quot;+new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss &quot;).format(new Date()));</div><div class="line">		</div><div class="line">		logger.debug(&quot;MyJDBCJob is end ...&quot;);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>（4）：jobTest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">package com.wyj.exampleJDBC;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.quartz.CronScheduleBuilder;</div><div class="line">import org.quartz.CronTrigger;</div><div class="line">import org.quartz.JobBuilder;</div><div class="line">import org.quartz.JobDetail;</div><div class="line">import org.quartz.JobKey;</div><div class="line">import org.quartz.Scheduler;</div><div class="line">import org.quartz.SchedulerException;</div><div class="line">import org.quartz.SchedulerFactory;</div><div class="line">import org.quartz.SimpleScheduleBuilder;</div><div class="line">import org.quartz.SimpleTrigger;</div><div class="line">import org.quartz.Trigger;</div><div class="line">import org.quartz.TriggerBuilder;</div><div class="line">import org.quartz.impl.StdScheduler;</div><div class="line">import org.quartz.impl.StdSchedulerFactory;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line">/**</div><div class="line"> * JdbcJobtest</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2017年12月29日 下午10:05:26</div><div class="line"> */</div><div class="line">public class QuartzJdbcTest &#123;</div><div class="line">    private static Scheduler scheduler;</div><div class="line">    </div><div class="line">    </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;spring-quartz.xml&quot;);</div><div class="line">        scheduler = (StdScheduler)ac.getBean(&quot;scheduler&quot;);</div><div class="line"></div><div class="line">        testStartSchedule();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     *  开始一个simpleSchedule()调度</div><div class="line">     */</div><div class="line">	public static void testStartSchedule()&#123;</div><div class="line">		</div><div class="line">		try &#123;</div><div class="line">			// 1、创建一个JobDetail实例，指定Quartz</div><div class="line">			JobDetail jobDetail = JobBuilder.newJob(JdbcJob.class)</div><div class="line">					// 任务执行类</div><div class="line">					.withIdentity(&quot;job_1&quot;, &quot;jGroup1&quot;)// 任务名，任务组</div><div class="line">					.build();</div><div class="line">			//触发器类型</div><div class="line">			//SimpleScheduleBuilder builder = SimpleScheduleBuilder.simpleSchedule().repeatSecondlyForTotalCount(5); // 设置执行次数</div><div class="line">					</div><div class="line">		    CronScheduleBuilder builder = CronScheduleBuilder.cronSchedule(&quot;0/2 * * * * ?&quot;);</div><div class="line">		    //  2、创建Trigger</div><div class="line">			</div><div class="line">			Trigger trigger = TriggerBuilder.newTrigger()</div><div class="line">					.withIdentity(&quot;trigger_1&quot;,&quot;triggerGroup1&quot;)</div><div class="line">					.withSchedule(builder)</div><div class="line">					.build();</div><div class="line">			</div><div class="line">			// 3、创建Scheduler</div><div class="line">			Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</div><div class="line">			scheduler.start();</div><div class="line">			</div><div class="line">			// 4、调度执行</div><div class="line">			scheduler.scheduleJob(jobDetail,trigger);</div><div class="line">			</div><div class="line">			try &#123;</div><div class="line">				Thread.sleep(60000);</div><div class="line">			&#125; catch (Exception e) &#123;</div><div class="line">			    e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			//关闭调度器</div><div class="line">			scheduler.shutdown();</div><div class="line">			</div><div class="line">			</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">		    e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * 从数据库中找到已经存在的job，并重新开户调度</div><div class="line">	 */</div><div class="line">	public static void resumeJob()&#123;</div><div class="line">		try &#123;</div><div class="line">			SchedulerFactory schedulerFactory = new StdSchedulerFactory();</div><div class="line">			Scheduler scheduler = schedulerFactory.getScheduler();</div><div class="line">			JobKey jobKey = new JobKey(&quot;job1_1&quot;, &quot;jGroup1&quot;);</div><div class="line">			List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</div><div class="line">            //SELECT TRIGGER_NAME, TRIGGER_GROUP FROM &#123;0&#125;TRIGGERS WHERE SCHED_NAME = &#123;1&#125; AND JOB_NAME = ? AND JOB_GROUP = ?</div><div class="line">            // 重新恢复在jGroup1组中，名为job1_1的 job的触发器运行</div><div class="line">            if(triggers.size() &gt; 0)&#123;</div><div class="line">                for (Trigger tg : triggers) &#123;</div><div class="line">                    // 根据类型判断</div><div class="line">                    if ((tg instanceof CronTrigger) || (tg instanceof SimpleTrigger)) &#123;</div><div class="line">                        // 恢复job运行</div><div class="line">                        scheduler.resumeJob(jobKey);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                scheduler.start();</div><div class="line">            &#125;</div><div class="line">			</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">		    e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br>CronScheduleBuilder：<br><img src="/2018/01/08/Quartz学习——Spring和Quartz集成详解-三/jdbcTest.png" alt="jdbcTest"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面介绍Spring集成Quartz的示例，项目地址: &lt;font color=&quot;red&quot; size=&quot;5&quot; face=&quot;微软雅黑&quot;&gt;&lt;a href=&quot;https://github.com/wangyuanjun008/wyj-quartz-spring.git&quot; targ
    
    </summary>
    
      <category term="quartz" scheme="http://wangyuanjun.cn/categories/quartz/"/>
    
    
      <category term="quartz" scheme="http://wangyuanjun.cn/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>Quartz学习——Quartz简单入门Demo(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/03/Quartz%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Quartz%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8Demo-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/03/Quartz学习——Quartz简单入门Demo-二/</id>
    <published>2018-01-03T07:50:18.000Z</published>
    <updated>2018-01-08T09:09:39.895Z</updated>
    
    <content type="html"><![CDATA[<p>下面介绍Quartz入门的示例，项目地址: <font color="red" size="5" face="微软雅黑"><a href="https://github.com/wangyuanjun008/wyj-quartz-demo" target="_blank" rel="external">quartz-demo</a></font><br>由于Quartz的存储方式分为RAM和JDBC，分别对这两种进行简单的说明。并附上代码！<br>首先需要添加Quartz的依赖 ，我使用的是quartz.2.2.3版本！ </p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
    &lt;artifactId&gt;quartz&lt;/artifactId&gt;
    &lt;version&gt;2.2.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
    &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;
    &lt;version&gt;2.2.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><h2 id="RAM方式"><a href="#RAM方式" class="headerlink" title="RAM方式"></a>RAM方式</h2><p>要测试RAMdemo的代码，请先删除demo中这个quartz.properties文件，或者重命名！否则会测试不成功！<br>（1）：Job</p>
<pre><code>package com.wyj.exampleRAM;

import java.util.Date;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * RAMjob
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:03:31
 */
public class RAMJob implements Job{

    private Logger logger = LoggerFactory.getLogger(RAMJob.class);

    public void execute(JobExecutionContext arg0) throws JobExecutionException {
        logger.debug(&quot;hello world ! hello Quartz - &quot;+new Date());
    }

}
</code></pre><p>（2）：JobTest</p>
<pre><code>package com.wyj.exampleRAM;

import java.util.Date;

import org.quartz.CronScheduleBuilder;
import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * RAMtest
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:03:50
 */
public class RAMQuartzTest {

    private static Logger logger = LoggerFactory.getLogger(RAMJob.class);

    public static void main(String[] args) throws SchedulerException {
        //1.创建Scheduler的工厂
        SchedulerFactory sf = new StdSchedulerFactory();

        //2.从工厂中获取调度器实例
        Scheduler scheduler = sf.getScheduler();

        //3.创建JobDetail
        JobDetail jb = JobBuilder.newJob(RAMJob.class)
                .withDescription(&quot;this is hello job&quot;)//job的描述
                .withIdentity(&quot;helloJob&quot;, &quot;helloGroup&quot;)//job 的name和group
                .build();

         //任务运行的时间，SimpleSchedle类型触发器有效
        long time=  System.currentTimeMillis() + 3*1000L; //3秒后启动任务
        Date statTime = new Date(time);
        //4.创建Trigger
        //使用SimpleScheduleBuilder或者CronScheduleBuilder
        Trigger trigger = TriggerBuilder.newTrigger()
                            .withDescription(&quot;&quot;)
                            .withIdentity(&quot;helloTrigger&quot;, &quot;helloTriggerGroup&quot;)
                            .startAt(statTime)//默认当前时间启动
                            .withSchedule(CronScheduleBuilder.cronSchedule(&quot;0/2 * * * * ?&quot;))//两秒执行一次
                            .build();

        //5.注册任务和定时器
        scheduler.scheduleJob(jb, trigger);

        //6.启动 调度器
        scheduler.start();
        logger.debug(&quot;启动时间 ：&quot;+new Date());
    }
}
</code></pre><p>运行结果：<br>SimpleScheduleBuilder：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/SimpleRAMTest.png" alt="SimpleRAMTest"></p>
<p>CronScheduleBuilder：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/CronRAMTest.png" alt="CronRAMTest"></p>
<h2 id="JDBC方式"><a href="#JDBC方式" class="headerlink" title="JDBC方式"></a>JDBC方式</h2><p>使用jdbc方式，就要配置quartz.properties文件，并且在开始的时候在数据库中新增表！<br>我使用的数据库是mysql，数据库中表在wyj-quartz-demo项目里面有，需要的请在里面下载！<br>运行 tables_mysql.sql 这个文件。</p>
<pre><code>#配置数据源属性  
org.quartz.dataSource.qzDS.driver:com.mysql.jdbc.Driver
org.quartz.dataSource.qzDS.URL:jdbc:mysql://192.168.99.100:3306/quartz_test?useUnicode=true&amp;characterEncoding=utf-8
org.quartz.dataSource.qzDS.user:root
org.quartz.dataSource.qzDS.password:admin
org.quartz.dataSource.qzDS.maxConnections:10
</code></pre><p>（1）job</p>
<pre><code>package com.wyj.exampleJDBC;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * JdbcJob
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:04:03
 */
public class JdbcJob implements Job{

    private Logger logger = LoggerFactory.getLogger(JdbcJob.class);

    public void execute(JobExecutionContext arg0) throws JobExecutionException {

        logger.debug(&quot;MyJDBCJob is start ...&quot;);

        logger.debug(&quot;MyJDBCJob quzrtz &quot;+new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss &quot;).format(new Date()));

        logger.debug(&quot;MyJDBCJob is end ...&quot;);
    }
}
</code></pre><p>（2）jobTest</p>
<pre><code>package com.wyj.exampleJDBC;

import java.util.List;

import org.quartz.CronScheduleBuilder;
import org.quartz.CronTrigger;
import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.JobKey;
import org.quartz.Scheduler;
import org.quartz.SchedulerFactory;
import org.quartz.SimpleTrigger;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;
/**
 * JdbcJobtest
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:04:14
 */
public class QuartzJdbcTest {

    public static void main(String[] args) {
        testStartSchedule();
//        resumeJob();
    }


    /**
     *  开始一个simpleSchedule()调度
     */
    public static void testStartSchedule(){

        try {
            // 1、创建一个JobDetail实例，指定Quartz
            JobDetail jobDetail = JobBuilder.newJob(JdbcJob.class)
                    // 任务执行类
                    .withIdentity(&quot;job_1&quot;, &quot;jGroup1&quot;)// 任务名，任务组
                    .build();
            //触发器类型
//            SimpleScheduleBuilder builder = SimpleScheduleBuilder.simpleSchedule().repeatSecondlyForTotalCount(5); // 设置执行次数

            CronScheduleBuilder builder = CronScheduleBuilder.cronSchedule(&quot;0/2 * * * * ?&quot;);
            //  2、创建Trigger

            Trigger trigger = TriggerBuilder.newTrigger()
                    .withIdentity(&quot;trigger_1&quot;,&quot;triggerGroup1&quot;)
                    .withSchedule(builder)
                    .build();

            // 3、创建Scheduler
            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();
            scheduler.start();

            // 4、调度执行
            scheduler.scheduleJob(jobDetail,trigger);

            try {
                Thread.sleep(60000);
            } catch (Exception e) {
                e.printStackTrace();
            }

            //关闭调度器
            scheduler.shutdown();


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 从数据库中找到已经存在的job，并重新开户调度
     */
    public static void resumeJob(){
        try {
            SchedulerFactory schedulerFactory = new StdSchedulerFactory();
            Scheduler scheduler = schedulerFactory.getScheduler();
            JobKey jobKey = new JobKey(&quot;job1_1&quot;, &quot;jGroup1&quot;);
            List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);
            //SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?
            // 重新恢复在jGroup1组中，名为job1_1的 job的触发器运行
            if(triggers.size() &gt; 0){
                for (Trigger tg : triggers) {
                    // 根据类型判断
                    if ((tg instanceof CronTrigger) || (tg instanceof SimpleTrigger)) {
                        // 恢复job运行
                        scheduler.resumeJob(jobKey);
                    }
                }
                scheduler.start();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre><p>运行结果：<br>数据库信息：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/jdbcTest1.png" alt="jdbcTest1"></p>
<p>控制台信息：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/jdbcTest2.png" alt="jdbcTest2"></p>
<p><strong>注意</strong>:<font color="red">Cron和Simple类型，Simple类型的如果JobDetail没有设置.storeDurably(true)，则job在运行完成之后会在数据库中删除！</font></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面介绍Quartz入门的示例，项目地址: &lt;font color=&quot;red&quot; size=&quot;5&quot; face=&quot;微软雅黑&quot;&gt;&lt;a href=&quot;https://github.com/wangyuanjun008/wyj-quartz-demo&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="quartz" scheme="http://wangyuanjun.cn/categories/quartz/"/>
    
    
      <category term="quartz" scheme="http://wangyuanjun.cn/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>Docker之创建并进入mysql容器</title>
    <link href="http://wangyuanjun.cn/2018/01/03/Docker%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%BF%9B%E5%85%A5mysql%E5%AE%B9%E5%99%A8/"/>
    <id>http://wangyuanjun.cn/2018/01/03/Docker之创建并进入mysql容器/</id>
    <published>2018-01-03T02:11:52.000Z</published>
    <updated>2018-01-03T02:39:59.678Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍docker如何创建并进入MYSQL容器。</p>
<h2 id="运行”docker-pull-mysql”获取mysql镜像"><a href="#运行”docker-pull-mysql”获取mysql镜像" class="headerlink" title="运行”docker pull mysql”获取mysql镜像"></a>运行”docker pull mysql”获取mysql镜像</h2><pre><code>[root@localhost ~]# docker pull mysql  
Using default tag: latest  
latest: Pulling from library/mysql  
85b1f47fba49: Pull complete   
5671503d4f93: Pull complete   
3b43b3b913cb: Pull complete   
4fbb803665d0: Pull complete   
05808866e6f9: Pull complete   
1d8c65d48cfa: Pull complete   
e189e187b2b5: Pull complete   
02d3e6011ee8: Pull complete   
d43b32d5ce04: Pull complete   
2a809168ab45: Pull complete   
Digest: sha256:1a2f9361228e9b10b4c77a651b460828514845dc7ac51735b919c2c4aec864b7  
Status: Downloaded newer image for mysql:latest  
</code></pre><h2 id="在后台启动mysql容器-–name指定了容器的名称，方便之后进入容器的命令行，MYSQL-ROOT-PASSWORD-admin指定了mysql的root密码，-d表示在后台运行"><a href="#在后台启动mysql容器-–name指定了容器的名称，方便之后进入容器的命令行，MYSQL-ROOT-PASSWORD-admin指定了mysql的root密码，-d表示在后台运行" class="headerlink" title="在后台启动mysql容器(–name指定了容器的名称，方便之后进入容器的命令行，MYSQL_ROOT_PASSWORD=admin指定了mysql的root密码，-d表示在后台运行)"></a>在后台启动mysql容器(–name指定了容器的名称，方便之后进入容器的命令行，MYSQL_ROOT_PASSWORD=admin指定了mysql的root密码，-d表示在后台运行)</h2><pre><code>Administrator@SKY-20170607FIJ MINGW64 ~
$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=admin -d mysql
c6215e8c1fd73bc395a0c92e93f7e7145baedbe99c7ff639ccc9f5641bddf583
</code></pre><h2 id="进入容器bash并进入mysql命令行："><a href="#进入容器bash并进入mysql命令行：" class="headerlink" title="进入容器bash并进入mysql命令行："></a>进入容器bash并进入mysql命令行：</h2><pre><code>Administrator@SKY-20170607FIJ MINGW64 ~
$ docker exec -it mysql bash
root@c6215e8c1fd7:/# mysql -uroot -padmin
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 5
Server version: 5.7.20 MySQL Community Server (GPL)

Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)

mysql&gt;
</code></pre><h2 id="退出mysql镜像"><a href="#退出mysql镜像" class="headerlink" title="退出mysql镜像"></a>退出mysql镜像</h2><p>输入</p>
<pre><code>exit
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍docker如何创建并进入MYSQL容器。&lt;/p&gt;
&lt;h2 id=&quot;运行”docker-pull-mysql”获取mysql镜像&quot;&gt;&lt;a href=&quot;#运行”docker-pull-mysql”获取mysql镜像&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="docker" scheme="http://wangyuanjun.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://wangyuanjun.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>常用mysql命令大全</title>
    <link href="http://wangyuanjun.cn/2018/01/03/%E5%B8%B8%E7%94%A8mysql%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://wangyuanjun.cn/2018/01/03/常用mysql命令大全/</id>
    <published>2018-01-03T01:40:56.000Z</published>
    <updated>2018-01-03T02:40:13.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、连接Mysql"><a href="#1、连接Mysql" class="headerlink" title="1、连接Mysql"></a>1、连接Mysql</h1><p>格式： mysql -h主机地址 -u用户名 －p用户密码</p>
<h2 id="1、连接到本机上的MYSQL。"><a href="#1、连接到本机上的MYSQL。" class="headerlink" title="1、连接到本机上的MYSQL。"></a>1、连接到本机上的MYSQL。</h2><p>首先打开DOS窗口，然后进入目录mysql\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码。</p>
<p>如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;</p>
<h2 id="2、连接到远程主机上的MYSQL。"><a href="#2、连接到远程主机上的MYSQL。" class="headerlink" title="2、连接到远程主机上的MYSQL。"></a>2、连接到远程主机上的MYSQL。</h2><p>假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：<br>    mysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）</p>
<h2 id="3、退出MYSQL命令"><a href="#3、退出MYSQL命令" class="headerlink" title="3、退出MYSQL命令"></a>3、退出MYSQL命令</h2><pre><code>exit （回车）
</code></pre><h1 id="2、修改密码"><a href="#2、修改密码" class="headerlink" title="2、修改密码"></a>2、修改密码</h1><p>格式：mysqladmin -u用户名 -p旧密码 password 新密码</p>
<h2 id="1、给root加个密码ab12。"><a href="#1、给root加个密码ab12。" class="headerlink" title="1、给root加个密码ab12。"></a>1、给root加个密码ab12。</h2><p>首先在DOS下进入目录mysql\bin，然后键入以下命令</p>
<pre><code>mysqladmin -u root -password ab12
</code></pre><p>注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。</p>
<h2 id="2、再将root的密码改为djg345。"><a href="#2、再将root的密码改为djg345。" class="headerlink" title="2、再将root的密码改为djg345。"></a>2、再将root的密码改为djg345。</h2><pre><code>mysqladmin -u root -p ab12 password djg345
</code></pre><h1 id="3、增加新用户"><a href="#3、增加新用户" class="headerlink" title="3、增加新用户"></a>3、增加新用户</h1><p>注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符</p>
<p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p>
<h2 id="1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令："><a href="#1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：" class="headerlink" title="1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令："></a>1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：</h2><pre><code>grant select,insert,update,delete on *.* to [email=test1@”%]test1@”%[/email]” Identified by “abc”;
</code></pre><p>但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</p>
<h2 id="2、增加一个用户test2密码为abc-让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。"><a href="#2、增加一个用户test2密码为abc-让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。" class="headerlink" title="2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。"></a>2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</h2><pre><code>grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “abc”;
</code></pre><p>如果你不想test2有密码，可以再打一个命令将密码消掉。</p>
<pre><code>grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “”;
</code></pre><h1 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4 数据库"></a>4 数据库</h1><h2 id="4-1-创建数据库"><a href="#4-1-创建数据库" class="headerlink" title="4.1 创建数据库"></a>4.1 创建数据库</h2><p>注意：创建数据库之前要先连接Mysql服务器</p>
<p>命令：create database &lt;数据库名&gt;</p>
<p>例1：建立一个名为xhkdb的数据库</p>
<p>   mysql&gt; create database xhkdb;</p>
<p>例2：创建数据库并分配用户</p>
<p>①CREATE DATABASE 数据库名;</p>
<p>②GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON 数据库名.* TO 数据库名@localhost IDENTIFIED BY ‘密码’;</p>
<p>③SET PASSWORD FOR ‘数据库名’@’localhost’ = OLD_PASSWORD(‘密码’);</p>
<p>依次执行3个命令完成数据库创建。注意：中文 “密码”和“数据库”是户自己需要设置的。</p>
<h2 id="4-2-显示数据库"><a href="#4-2-显示数据库" class="headerlink" title="4.2 显示数据库"></a>4.2 显示数据库</h2><p>命令：show databases （注意：最后有个s）</p>
<pre><code>mysql&gt; show databases;
</code></pre><p>注意：为了不再显示的时候乱码，要修改数据库默认编码。以下以GBK编码页面为例进行说明：</p>
<p>1、修改MYSQL的配置文件：my.ini里面修改default-character-set=gbk<br>2、代码运行时修改：<br>   ①Java代码：jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=gbk<br>   ②PHP代码：header(“Content-Type:text/html;charset=gb2312”);<br>   ③C语言代码：int mysql_set_character_set( MYSQL <em> mysql, char </em> csname)；<br>该函数用于为当前连接设置默认的字符集。字符串csname指定了1个有效的字符集名称。连接校对成为字符集的默认校对。该函数的工作方式与SET NAMES语句类似，但它还能设置mysql- &gt; charset的值，从而影响了由mysql_real_escape_string() 设置的字符集。</p>
<h2 id="4-3-删除数据库"><a href="#4-3-删除数据库" class="headerlink" title="4.3 删除数据库"></a>4.3 删除数据库</h2><p>命令：drop database &lt;数据库名&gt;<br>例如：删除名为 xhkdb的数据库</p>
<pre><code>mysql&gt; drop database xhkdb;
</code></pre><p>例子1：删除一个已经确定存在的数据库</p>
<p>   mysql&gt; drop database drop_database;<br>   Query OK, 0 rows affected (0.00 sec)</p>
<p>例子2：删除一个不确定存在的数据库</p>
<p>   mysql&gt; drop database drop_database;<br>   ERROR 1008 (HY000): Can’t drop database ‘drop_database’; database doesn’t exist<br>      //发生错误，不能删除’drop_database’数据库，该数据库不存在。<br>   mysql&gt; drop database if exists drop_database;<br>   Query OK, 0 rows affected, 1 warning (0.00 sec)//产生一个警告说明此数据库不存在<br>   mysql&gt; create database drop_database;<br>   Query OK, 1 row affected (0.00 sec)<br>   mysql&gt; drop database if exists drop_database;//if exists 判断数据库是否存在，不存在也不产生错误<br>   Query OK, 0 rows affected (0.00 sec)</p>
<h2 id="4-4-连接数据库"><a href="#4-4-连接数据库" class="headerlink" title="4.4 连接数据库"></a>4.4 连接数据库</h2><p>命令： use &lt;数据库名&gt;</p>
<p>例如：如果xhkdb数据库存在，尝试存取它：</p>
<p>   mysql&gt; use xhkdb;</p>
<p>屏幕提示：Database changed</p>
<p>use 语句可以通告MySQL把db_name数据库作为默认（当前）数据库使用，用于后续语句。该数据库保持为默认数据库，直到语段的结尾，或者直到发布一个不同的USE语句：</p>
<p>   mysql&gt; USE db1;<br>   mysql&gt; SELECT COUNT(<em>) FROM mytable;   # selects from db1.mytable<br>   mysql&gt; USE db2;<br>   mysql&gt; SELECT COUNT(</em>) FROM mytable;   # selects from db2.mytable</p>
<p>使用USE语句为一个特定的当前的数据库做标记，不会阻碍您访问其它数据库中的表。下面的例子可以从db1数据库访问作者表，并从db2数据库访问编辑表：</p>
<p>   mysql&gt; USE db1;<br>   mysql&gt; SELECT author_name,editor_name FROM author,db2.editor<br>       -&gt;        WHERE author.editor_id = db2.editor.editor_id;</p>
<p>USE语句被设立出来，用于与Sybase相兼容。</p>
<p>有些网友问到，连接以后怎么退出。其实，不用退出来，use 数据库后，使用show databases就能查询所有数据库，如果想跳到其他数据库，用<br>   use 其他数据库名字<br>就可以了。</p>
<h2 id="4-5-当前选择的数据库"><a href="#4-5-当前选择的数据库" class="headerlink" title="4.5 当前选择的数据库"></a>4.5 当前选择的数据库</h2><p>命令：mysql&gt; select database();</p>
<p>MySQL中SELECT命令类似于其他编程语言里的print或者write，你可以用它来显示一个字符串、数字、数学表达式的结果等等。如何使用MySQL中SELECT命令的特殊功能？</p>
<p>1.显示MYSQL的版本</p>
<pre><code>mysql&gt; select version(); 
+-----------------------+ 
| version()             | 
+-----------------------+ 
| 6.0.4-alpha-community | 
+-----------------------+ 
1 row in set (0.02 sec) 
</code></pre><p>2.显示当前时间</p>
<pre><code>mysql&gt; select now(); 
+---------------------+ 
| now()               | 
+---------------------+ 
| 2009-09-15 22:35:32 | 
+---------------------+ 
1 row in set (0.04 sec) 
</code></pre><p>3.显示年月日</p>
<pre><code>SELECT DAYOFMONTH(CURRENT_DATE); 
+--------------------------+ 
| DAYOFMONTH(CURRENT_DATE) | 
+--------------------------+ 
|                       15 | 
+--------------------------+ 
1 row in set (0.01 sec) 

SELECT MONTH(CURRENT_DATE); 
+---------------------+ 
| MONTH(CURRENT_DATE) | 
+---------------------+ 
|                   9 | 
+---------------------+ 
1 row in set (0.00 sec) 

SELECT YEAR(CURRENT_DATE); 
+--------------------+ 
| YEAR(CURRENT_DATE) | 
+--------------------+ 
|               2009 | 
+--------------------+ 
1 row in set (0.00 sec) 
</code></pre><p>4.显示字符串</p>
<pre><code>mysql&gt; SELECT &quot;welecome to my blog!&quot;; 
+----------------------+ 
| welecome to my blog! | 
+----------------------+ 
| welecome to my blog! | 
+----------------------+ 
1 row in set (0.00 sec) 
</code></pre><p>5.当计算器用</p>
<pre><code>select ((4 * 4) / 10 ) + 25; 
+----------------------+ 
| ((4 * 4) / 10 ) + 25 | 
+----------------------+ 
|                26.60 | 
+----------------------+ 
1 row in set (0.00 sec) 
</code></pre><p>6.串接字符串</p>
<pre><code>select CONCAT(f_name, &quot; &quot;, l_name) 
AS Name 
from employee_data 
where title = &apos;Marketing Executive&apos;; 
+---------------+ 
| Name          | 
+---------------+ 
| Monica Sehgal | 
| Hal Simlai    | 
| Joseph Irvine | 
+---------------+ 
3 rows in set (0.00 sec) 
</code></pre><p>注意：这里用到CONCAT()函数，用来把字符串串接起来。另外，我们还用到以前学到的AS给结果列’CONCAT(f_name, “ “, l_name)’起了个假名。</p>
<h1 id="5-数据库表"><a href="#5-数据库表" class="headerlink" title="5 数据库表"></a>5 数据库表</h1><h2 id="5-1-创建数据表"><a href="#5-1-创建数据表" class="headerlink" title="5.1 创建数据表"></a>5.1 创建数据表</h2><p>命令：create table &lt;表名&gt; ( &lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]);</p>
<p>例如，建立一个名为MyClass的表，<br>字段名    数字类型    数据宽度    是否为空    是否主键    自动增加    默认值<br>id    int    4    否    primary key    auto_increment<br>name    char    20    否<br>sex    int    4    否              0<br>degree    double    16    是    </p>
<pre><code>mysql&gt; create table MyClass(
&gt; id int(4) not null primary key auto_increment,
&gt; name char(20) not null,
&gt; sex int(4) not null default &apos;0&apos;,
&gt; degree double(16,2));
</code></pre><h2 id="5-2-删除数据表"><a href="#5-2-删除数据表" class="headerlink" title="5.2 删除数据表"></a>5.2 删除数据表</h2><p>命令：drop table &lt;表名&gt;</p>
<p>例如：删除表名为 MyClass 的表</p>
<pre><code>mysql&gt; drop table MyClass;
</code></pre><p>DROP TABLE用于取消一个或多个表。您必须有每个表的DROP权限。所有的表数据和表定义会被取消，所以使用本语句要小心！</p>
<p>注意：对于一个带分区的表，DROP TABLE会永久性地取消表定义，取消各分区，并取消储存在这些分区中的所有数据。DROP TABLE还会取消与被取消的表有关联的分区定义（.par）文件。</p>
<p>对与不存在的表，使用IF EXISTS用于防止错误发生。当使用IF EXISTS时，对于每个不存在的表，会生成一个NOTE。</p>
<p>RESTRICT和CASCADE可以使分区更容易。目前，RESTRICT和CASCADE不起作用。</p>
<h2 id="5-3-表插入数据"><a href="#5-3-表插入数据" class="headerlink" title="5.3 表插入数据"></a>5.3 表插入数据</h2><p>命令：insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]</p>
<p>例如：往表 MyClass中插入二条记录, 这二条记录表示：编号为1的名为Tom的成绩为96.45, 编号为2 的名为Joan 的成绩为82.99， 编号为3 的名为Wang 的成绩为96.5。<br>   mysql&gt; insert into MyClass values(1,’Tom’,96.45),(2,’Joan’,82.99), (2,’Wang’, 96.59);</p>
<p>注意：insert into每次只能向表中插入一条记录。</p>
<h2 id="5-4-查询表中的数据"><a href="#5-4-查询表中的数据" class="headerlink" title="5.4 查询表中的数据"></a>5.4 查询表中的数据</h2><p>1)、查询所有行<br>命令： select &lt;字段1，字段2，…&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;<br>例如：查看表 MyClass 中所有数据</p>
<pre><code>mysql&gt; select * from MyClass;
</code></pre><p>2）、查询前几行数据<br>例如：查看表 MyClass 中前2行数据</p>
<pre><code>mysql&gt; select * from MyClass order by id limit 0,2;
</code></pre><p>select一般配合where使用，以查询更精确更复杂的数据。</p>
<h2 id="5-5-删除表中数据"><a href="#5-5-删除表中数据" class="headerlink" title="5.5 删除表中数据"></a>5.5 删除表中数据</h2><p>命令：delete from 表名 where 表达式</p>
<p>例如：删除表 MyClass中编号为1 的记录<br>mysql&gt; delete from MyClass where id=1;</p>
<p>下面是一个删除数据前后表的对比。<br>FirstName    LastName    Age<br>Peter    Griffin    35<br>Glenn    Quagmire    33<br>下面以PHP代码为例删除 “Persons” 表中所有 LastName=’Griffin’ 的记录：</p>
<pre><code>&lt;?php 
   $con = mysql_connect(&quot;localhost&quot;,&quot;peter&quot;,&quot;abc123&quot;); 
   if (!$con) 
   {
      die(&apos;Could not connect: &apos; . mysql_error()); 
   } 
   mysql_select_db(&quot;my_db&quot;, $con); 
   mysql_query(&quot;DELETE FROM Persons WHERE LastName=&apos;Griffin&apos;&quot;); mysql_close($con); 
?&gt;
</code></pre><p>在这次删除之后，表是这样的：</p>
<pre><code>FirstName    LastName    Age
Glenn    Quagmire    33
</code></pre><h2 id="5-6-修改表中数据"><a href="#5-6-修改表中数据" class="headerlink" title="5.6 修改表中数据"></a>5.6 修改表中数据</h2><p>语法：update 表名 set 字段=新值,… where 条件</p>
<pre><code>mysql&gt; update MyClass set name=&apos;Mary&apos; where id=1;
</code></pre><p>例子1：单表的MySQL UPDATE语句：</p>
<pre><code>UPDATE [LOW_PRIORITY] [IGNORE] tbl_name SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]
</code></pre><p>例子2：多表的UPDATE语句：</p>
<pre><code>UPDATE [LOW_PRIORITY] [IGNORE] table_references SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition]
</code></pre><p>UPDATE语法可以用新值更新原有表行中的各列。SET子句指示要修改哪些列和要给予哪些值。WHERE子句指定应更新哪些行。如果没有WHERE子句，则更新所有的行。如果指定了ORDER BY子句，则按照被指定的顺序对行进行更新。LIMIT子句用于给定一个限值，限制可以被更新的行的数目。</p>
<h2 id="5-7-增加字段"><a href="#5-7-增加字段" class="headerlink" title="5.7 增加字段"></a>5.7 增加字段</h2><p>命令：alter table 表名 add字段 类型 其他;<br>例如：在表MyClass中添加了一个字段passtest，类型为int(4)，默认值为0</p>
<pre><code>mysql&gt; alter table MyClass add passtest int(4) default &apos;0&apos;
</code></pre><p>加索引</p>
<pre><code>  mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);

例子： mysql&gt; alter table employee add index emp_name (name);
</code></pre><p>加主关键字的索引</p>
<pre><code> mysql&gt; alter table 表名 add primary key (字段名);

例子： mysql&gt; alter table employee add primary key(id);
</code></pre><p>加唯一限制条件的索引</p>
<pre><code>   mysql&gt; alter table 表名 add unique 索引名 (字段名);

例子： mysql&gt; alter table employee add unique emp_name2(cardnumber);
</code></pre><p>删除某个索引</p>
<pre><code>   mysql&gt; alter table 表名 drop index 索引名;

例子： mysql&gt;alter table employee drop index emp_name;
</code></pre><p>增加字段：</p>
<pre><code>mysql&gt; ALTER TABLE table_name ADD field_name field_type;
</code></pre><p>修改原字段名称及类型：</p>
<pre><code>mysql&gt; ALTER TABLE table_name CHANGE old_field_name new_field_name field_type;
</code></pre><p>删除字段：</p>
<pre><code>MySQL ALTER TABLE table_name DROP field_name;
</code></pre><h2 id="5-8-修改表名"><a href="#5-8-修改表名" class="headerlink" title="5.8 修改表名"></a>5.8 修改表名</h2><p>命令：rename table 原表名 to 新表名;</p>
<p>例如：在表MyClass名字更改为YouClass</p>
<pre><code>mysql&gt; rename table MyClass to YouClass;
</code></pre><p>当你执行 RENAME 时，你不能有任何锁定的表或活动的事务。你同样也必须有对原初表的 ALTER 和 DROP 权限，以及对新表的 CREATE 和 INSERT 权限。</p>
<p>如果在多表更名中，MySQL 遭遇到任何错误，它将对所有被更名的表进行倒退更名，将每件事物退回到最初状态。</p>
<p>RENAME TABLE 在 MySQL 3.23.23 中被加入。</p>
<h1 id="6、备份数据库"><a href="#6、备份数据库" class="headerlink" title="6、备份数据库"></a>6、备份数据库</h1><p>命令在DOS的[url=file://\mysql\bin]\mysql\bin[/url]目录下执行</p>
<p>1.导出整个数据库<br>导出文件默认是存在mysql\bin目录下</p>
<pre><code>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名
mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql
</code></pre><p>2.导出一个表</p>
<pre><code>mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名
mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql
</code></pre><p>3.导出一个数据库结构</p>
<pre><code>mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql
-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table
</code></pre><p>4.带语言参数导出</p>
<pre><code>mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile_name.sql
</code></pre><p>例如，将aaa库备份到文件back_aaa中：<br>　　[root@test1 root]# cd　/home/data/mysql<br>　　[root@test1 mysql]# mysqldump -u root -p –opt aaa &gt; back_aaa</p>
<h1 id="7-1-一个建库和建表的实例1"><a href="#7-1-一个建库和建表的实例1" class="headerlink" title="7.1 一个建库和建表的实例1"></a>7.1 一个建库和建表的实例1</h1><pre><code>drop database if exists school; //如果存在SCHOOL则删除
create database school; //建立库SCHOOL
use school; //打开库SCHOOL
create table teacher //建立表TEACHER
(
    id int(3) auto_increment not null primary key,
    name char(10) not null,
    address varchar(50) default ‘深圳’,
    year date
); //建表结束

//以下为插入字段
insert into teacher values(”,’allen’,&apos;大连一中’,&apos;1976-10-10′);
insert into teacher values(”,’jack’,&apos;大连二中’,&apos;1975-12-23′);
</code></pre><p>如果你在mysql提示符键入上面的命令也可以，但不方便调试。<br>1、你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c:\下，并在DOS状态进入目录[url=file://\mysql\bin]\mysql\bin[/url]，然后键入以下命令：</p>
<pre><code>mysql -uroot -p密码 &lt; c:\\school.sql
</code></pre><p>如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。</p>
<p>2、或者进入命令行后使用 mysql&gt; source c:\school.sql; 也可以将school.sql文件导入数据库中。</p>
<h1 id="7-2-一个建库和建表的实例2"><a href="#7-2-一个建库和建表的实例2" class="headerlink" title="7.2 一个建库和建表的实例2"></a>7.2 一个建库和建表的实例2</h1><pre><code>drop database if exists school; //如果存在SCHOOL则删除
create database school; //建立库SCHOOL
use school; //打开库SCHOOL
create table teacher //建立表TEACHER
(
    id int(3) auto_increment not null primary key,
    name char(10) not null,
    address varchar(50) default &apos;&apos;深圳&apos;&apos;,
    year date
); //建表结束

//以下为插入字段
insert into teacher values(&apos;&apos;&apos;&apos;,&apos;&apos;glchengang&apos;&apos;,&apos;&apos;深圳一中&apos;&apos;,&apos;&apos;1976-10-10&apos;&apos;);
insert into teacher values(&apos;&apos;&apos;&apos;,&apos;&apos;jack&apos;&apos;,&apos;&apos;深圳一中&apos;&apos;,&apos;&apos;1975-12-23&apos;&apos;);
</code></pre><p>注：在建表中<br>1、将ID设为长度为3的数字字段:int(3)；并让它每个记录自动加一:auto_increment；并不能为空:not null；而且让他成为主字段primary key。</p>
<p>2、将NAME设为长度为10的字符字段</p>
<p>3、将ADDRESS设为长度50的字符字段，而且缺省值为深圳。</p>
<p>4、将YEAR设为日期字段。</p>
<p>转载:<a href="https://www.cnblogs.com/zhangzhu/archive/2013/07/04/3172486.html" target="_blank" rel="external">Mysql命令大全</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1、连接Mysql&quot;&gt;&lt;a href=&quot;#1、连接Mysql&quot; class=&quot;headerlink&quot; title=&quot;1、连接Mysql&quot;&gt;&lt;/a&gt;1、连接Mysql&lt;/h1&gt;&lt;p&gt;格式： mysql -h主机地址 -u用户名 －p用户密码&lt;/p&gt;
&lt;h2 id=&quot;
    
    </summary>
    
      <category term="mysql" scheme="http://wangyuanjun.cn/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://wangyuanjun.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo学习——Dubbo介绍(一)</title>
    <link href="http://wangyuanjun.cn/2017/12/28/Dubbo%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Dubbo%E4%BB%8B%E7%BB%8D-%E4%B8%80/"/>
    <id>http://wangyuanjun.cn/2017/12/28/Dubbo学习——Dubbo介绍-一/</id>
    <published>2017-12-28T01:40:51.000Z</published>
    <updated>2018-01-21T10:34:27.813Z</updated>
    
    <content type="html"><![CDATA[<p>互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，Dubbo是一个分布式服务框架，在这种情况下诞生的。现在核心业务抽取出来，作为独立的服务，使前端应用能更快速和稳定的响应。<br>Dubbo是Alibaba开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。关于注册中心、协议支持、服务监控等内容，详见后面描述</p>
<h1 id="一：Dubbo背景"><a href="#一：Dubbo背景" class="headerlink" title="一：Dubbo背景"></a>一：Dubbo背景</h1><p>大规模服务化之前，应用可能只是通过RMI或Hessian等工具，简单的暴露和引用远程服务，通过配置服务的URL地址进行调用，通过F5等硬件进行负载均衡。</p>
<ol>
<li>当服务越来越多时，服务URL配置管理变得非常困难，F5硬件负载均衡器的单点压力也越来越大。此时需要一个服务注册中心，动态的注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和Failover，降低对F5硬件负载均衡器的依赖，也能减少部分成本。</li>
<li>当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。这时，需要自动画出应用间的依赖关系图，以帮助架构师理清理关系。</li>
<li>接着，服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？为了解决这些问题，第一步，要将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标。其次，要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阀值，记录此时的访问量，再以此访问量乘以机器数反推总容量。</li>
</ol>
<h1 id="二：Dubbo是什么？"><a href="#二：Dubbo是什么？" class="headerlink" title="二：Dubbo是什么？"></a>二：Dubbo是什么？</h1><p>Dubbo是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。简单的说，dubbo就是个服务框架，如果没有分布式的需求，其实是不需要用的，只有在分布式的时候，才有dubbo这样的分布式服务框架的需求，并且本质上是个服务调用的东东，说白了就是个远程服务调用的分布式框架（告别WebService模式中的WSdl，以服务者与消费者的方式在dubbo上注册）<br>其核心部分包含:</p>
<ol>
<li>远程通讯: 提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。</li>
<li>集群容错: 提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。</li>
<li>自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</li>
</ol>
<h1 id="三：Dubbo能做什么"><a href="#三：Dubbo能做什么" class="headerlink" title="三：Dubbo能做什么"></a>三：Dubbo能做什么</h1><ol>
<li>透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入。      </li>
<li>软负载均衡及容错机制，可在内网替代F5等硬件负载均衡器，降低成本，减少单点。</li>
<li>服务自动注册与发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。</li>
</ol>
<p>Dubbo采用全Spring配置方式，透明化接入应用，对应用没有任何API侵入，只需用Spring加载Dubbo的配置即可，Dubbo基于Spring的Schema扩展进行加载。<br>之前使用Web Service，我想测试接口可以通过模拟消息的方式通过soapui或LR进行功能测试或性能测试。但现在使用Dubbo，接口之间不能直接交互，我尝试通过模拟消费者地址测试，结果不堪入目，再而使用jmeter通过junit进行测试，但还是需要往dubbo上去注册，如果再不给提供源代码的前提下，这个测试用例不好写啊….</p>
<h1 id="四：Dubbo的简介"><a href="#四：Dubbo的简介" class="headerlink" title="四：Dubbo的简介"></a>四：Dubbo的简介</h1><p>节点角色说明：</p>
<ul>
<li>Provider: 暴露服务的服务提供方。</li>
<li>Consumer: 调用远程服务的服务消费方。</li>
<li>Registry: 服务注册与发现的注册中心。</li>
<li>Monitor: 统计服务的调用次调和调用时间的监控中心。</li>
<li>Container: 服务运行容器。</li>
</ul>
<h1 id="五：总体架构"><a href="#五：总体架构" class="headerlink" title="五：总体架构"></a>五：总体架构</h1><p>Dubbo的总体架构，如图所示：<br><img src="/2017/12/28/Dubbo学习——Dubbo介绍-一/dubbo-architecture.png" alt="dubbo-architecture"></p>
<h2 id="主要核心部件"><a href="#主要核心部件" class="headerlink" title="主要核心部件"></a>主要核心部件</h2><ul>
<li>Remoting: 网络通信框架，实现了 sync-over-async 和 request-response 消息机制.</li>
<li>RPC: 一个远程过程调用的抽象，支持负载均衡、容灾和集群功能</li>
<li>Registry: 服务目录框架用于服务的注册和服务事件发布和订阅</li>
</ul>
<h2 id="各个层次"><a href="#各个层次" class="headerlink" title="各个层次"></a>各个层次</h2><p>Dubbo框架设计一共划分了10个层，而最上面的Service层是留给实际想要使用Dubbo开发分布式服务的开发者实现业务逻辑的接口层。图中左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口， 位于中轴线上的为双方都用到的接口。<br>下面，结合Dubbo官方文档，我们分别理解一下框架分层架构中，各个层次的设计要点：</p>
<ul>
<li>服务接口层（Service）：该层是与实际业务逻辑相关的，根据服务提供方和服务消费方的业务设计对应的接口和实现。</li>
<li>配置层（Config）：对外配置接口，以ServiceConfig和ReferenceConfig为中心，可以直接new配置类，也可以通过spring解析配置生成配置类。</li>
<li>服务代理层（Proxy）：服务接口透明代理，生成服务的客户端Stub和服务器端Skeleton，以ServiceProxy为中心，扩展接口为ProxyFactory。</li>
<li>服务注册层（Registry）：封装服务地址的注册与发现，以服务URL为中心，扩展接口为RegistryFactory、Registry和RegistryService。可能没有服务注册中心，此时服务提供方直接暴露服务。</li>
<li>集群层（Cluster）：封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心，扩展接口为Cluster、Directory、Router和LoadBalance。将多个服务提供方组合为一个服务提供方，实现对服务消费方来透明，只需要与一个服务提供方进行交互。</li>
<li>监控层（Monitor）：RPC调用次数和调用时间监控，以Statistics为中心，扩展接口为MonitorFactory、Monitor和MonitorService。</li>
<li>远程调用层（Protocol）：封将RPC调用，以Invocation和Result为中心，扩展接口为Protocol、Invoker和Exporter。Protocol是服务域，它是Invoker暴露和引用的主功能入口，它负责Invoker的生命周期管理。Invoker是实体域，它是Dubbo的核心模型，其它模型都向它靠扰，或转换成它，它代表一个可执行体，可向它发起invoke调用，它有可能是一个本地的实现，也可能是一个远程的实现，也可能一个集群实现。</li>
<li>信息交换层（Exchange）：封装请求响应模式，同步转异步，以Request和Response为中心，扩展接口为Exchanger、ExchangeChannel、ExchangeClient和ExchangeServer。</li>
<li>络传输层（Transport）：抽象mina和netty为统一接口，以Message为中心，扩展接口为Channel、Transporter、Client、Server和Codec。</li>
<li>数据序列化层（Serialize）：可复用的一些工具，扩展接口为Serialization、 ObjectInput、ObjectOutput和ThreadPool。<br>从上图可以看出，Dubbo对于服务提供方和服务消费方，从框架的10层中分别提供了各自需要关心和扩展的接口，构建整个服务生态系统（服务提供方和服务消费方本身就是一个以服务为中心的）。<br>根据官方提供的，对于上述各层之间关系的描述，如下所示：</li>
</ul>
<p>在RPC中，Protocol是核心层，也就是只要有Protocol + Invoker + Exporter就可以完成非透明的RPC调用，然后在Invoker的主过程上Filter拦截点。<br>图中的Consumer和Provider是抽象概念，只是想让看图者更直观的了解哪些类分属于客户端与服务器端，不用Client和Server的原因是Dubbo在很多场景下都使用Provider、Consumer、Registry、Monitor划分逻辑拓普节点，保持统一概念。<br>而Cluster是外围概念，所以Cluster的目的是将多个Invoker伪装成一个Invoker，这样其它人只要关注Protocol层Invoker即可，加上Cluster或者去掉Cluster对其它层都不会造成影响，因为只有一个提供者时，是不需要Cluster的。<br>Proxy层封装了所有接口的透明化代理，而在其它层都以Invoker为中心，只有到了暴露给用户使用时，才用Proxy将Invoker转成接口，或将接口实现转成Invoker，也就是去掉Proxy层RPC是可以Run的，只是不那么透明，不那么看起来像调本地服务一样调远程服务。<br>而Remoting实现是Dubbo协议的实现，如果你选择RMI协议，整个Remoting都不会用上，Remoting内部再划为Transport传输层和Exchange信息交换层，Transport层只负责单向消息传输，是对Mina、Netty、Grizzly的抽象，它也可以扩展UDP传输，而Exchange层是在传输层之上封装了Request-Response语义。<br>Registry和Monitor实际上不算一层，而是一个独立的节点，只是为了全局概览，用层的方式画在一起。</p>
<p>从上面的架构图中，我们可以了解到，Dubbo作为一个分布式服务框架，主要具有如下几个核心的要点：</p>
<h3 id="服务定义"><a href="#服务定义" class="headerlink" title="服务定义"></a>服务定义</h3><p>服务是围绕服务提供方和服务消费方的，服务提供方实现服务，而服务消费方调用服务。</p>
<h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>对于服务提供方，它需要发布服务，而且由于应用系统的复杂性，服务的数量、类型也不断膨胀；对于服务消费方，它最关心如何获取到它所需要的服务，而面对复杂的应用系统，需要管理大量的服务调用。而且，对于服务提供方和服务消费方来说，他们还有可能兼具这两种角色，即既需要提供服务，有需要消费服务。<br>通过将服务统一管理起来，可以有效地优化内部应用对服务发布/使用的流程和管理。服务注册中心可以通过特定协议来完成服务对外的统一。Dubbo提供的注册中心有如下几种类型可供选择：</p>
<ul>
<li>Multicast注册中心</li>
<li>Zookeeper注册中心</li>
<li>Redis注册中心</li>
<li>Simple注册中心</li>
</ul>
<h3 id="服务监控"><a href="#服务监控" class="headerlink" title="服务监控"></a>服务监控</h3><p>无论是服务提供方，还是服务消费方，他们都需要对服务调用的实际状态进行有效的监控，从而改进服务质量。</p>
<h3 id="远程通信与信息交换"><a href="#远程通信与信息交换" class="headerlink" title="远程通信与信息交换"></a>远程通信与信息交换</h3><p>远程通信需要指定通信双方所约定的协议，在保证通信双方理解协议语义的基础上，还要保证高效、稳定的消息传输。Dubbo继承了当前主流的网络通信框架，主要包括如下几个：</p>
<ul>
<li>Mina</li>
<li>Netty</li>
<li>Grizzly</li>
</ul>
<h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><p>下面从Dubbo官网直接拿来，看一下基于RPC层，服务提供方和服务消费方之间的调用关系，如图所示：<br>调用关系说明：<br>面从Dubbo官网直接拿来，看一下基于RPC层，服务提供方和服务消费方之间的调用关系，如图所示：<br><img src="/2017/12/28/Dubbo学习——Dubbo介绍-一/dubbo-relation.png" alt="dubbo-relation"><br>上图中，蓝色的表示与业务有交互，绿色的表示只对Dubbo内部交互。上述图所描述的调用流程如下：</p>
<ol>
<li>服务容器负责启动，加载，运行服务提供者。</li>
<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>
<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>
<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
<li><p>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p>
<p>Dubbo提供了很多协议，Dubbo协议、RMI协议、Hessian协议，我们查看Dubbo源代码，有各种协议的实现，如图所示：<br>我们之前没用Dubbo之前时，大部分都使用Hessian来使用我们服务的暴露和调用，利用HessianProxyFactory调用远程接口。</p>
</li>
</ol>
<h3 id="注册-注销服务"><a href="#注册-注销服务" class="headerlink" title="注册/注销服务"></a>注册/注销服务</h3><p>服务的注册与注销，是对服务提供方角色而言，那么注册服务与注销服务的时序图，如图所示：<br><img src="/2017/12/28/Dubbo学习——Dubbo介绍-一/dubbo-export.png" alt="dubbo-export"></p>
<h3 id="服务订阅-取消"><a href="#服务订阅-取消" class="headerlink" title="服务订阅/取消"></a>服务订阅/取消</h3><p>为了满足应用系统的需求，服务消费方的可能需要从服务注册中心订阅指定的有服务提供方发布的服务，在得到通知可以使用服务时，就可以直接调用服务。反过来，如果不需要某一个服务了，可以取消该服务。下面看一下对应的时序图，如图所示：<br><img src="/2017/12/28/Dubbo学习——Dubbo介绍-一/dubbo-refer.png" alt="dubbo-refer"></p>
<h3 id="协议支持"><a href="#协议支持" class="headerlink" title="协议支持"></a>协议支持</h3><p>Dubbo支持多种协议，如下所示：</p>
<ul>
<li>Dubbo协议</li>
<li>Hessian协议</li>
<li>HTTP协议</li>
<li>RMI协议</li>
<li>WebService协议</li>
<li>Thrift协议</li>
<li>Memcached协议</li>
<li>Redis协议<br>在通信过程中，不同的服务等级一般对应着不同的服务质量，那么选择合适的协议便是一件非常重要的事情。你可以根据你应用的创建来选择。例如，使用RMI协议，一般会受到防火墙的限制，所以对于外部与内部进行通信的场景，就不要使用RMI协议，而是基于HTTP协议或者Hessian协议。</li>
</ul>
<p>参考补充<br>Dubbo以包结构来组织各个模块，各个模块及其关系，如图所示：<br><img src="/2017/12/28/Dubbo学习——Dubbo介绍-一/dubbo-modules.png" alt="dubbo-modules"><br>可以通过Dubbo的代码（使用Maven管理）组织，与上面的模块进行比较。简单说明各个包的情况：</p>
<ul>
<li>dubbo-common 公共逻辑模块，包括Util类和通用模型。</li>
<li>dubbo-remoting 远程通讯模块，相当于Dubbo协议的实现，如果RPC用RMI协议则不需要使用此包。</li>
<li>dubbo-rpc 远程调用模块，抽象各种协议，以及动态代理，只包含一对一的调用，不关心集群的管理。</li>
<li>dubbo-cluster 集群模块，将多个服务提供方伪装为一个提供方，包括：负载均衡、容错、路由等，集群的地址列表可以是静态配置的，也可以是由注册中心下发。</li>
<li>dubbo-registry 注册中心模块，基于注册中心下发地址的集群方式，以及对各种注册中心的抽象。</li>
<li>dubbo-monitor 监控模块，统计服务调用次数，调用时间的，调用链跟踪的服务。</li>
<li>dubbo-config 配置模块，是Dubbo对外的API，用户通过Config使用Dubbo，隐藏Dubbo所有细节。</li>
<li>dubbo-container 容器模块，是一个Standalone的容器，以简单的Main加载Spring启动，因为服务通常不需要Tomcat/JBoss等Web容器的特性，没必要用Web容器去加载服务。</li>
</ul>
<p>参考链接<a href="http://shiyanjun.cn/archives/325.html" target="_blank" rel="external">https://github.com/alibaba/dubbo</a><br>参考<br><a href="http://shiyanjun.cn/archives/325.html" target="_blank" rel="external">Dubbo架构设计详解</a>(转载)<br><a href="http://blog.csdn.net/xlgen157387/article/details/51865289" target="_blank" rel="external">Dubbo详细介绍与安装使用过程</a><br><a href="http://blog.csdn.net/top_code/article/details/51010614" target="_blank" rel="external">Dubbo实战（一）快速入门</a><br><a href="http://blog.csdn.net/wuliu_forever/article/details/52053928" target="_blank" rel="external">dubbo用途介绍</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，Dubbo是一个分布式服务框架，在这种情况下诞生的。现在核心业务抽取出来，作为独立的服务，使前端应用能更快速和稳定的响应。&lt;br&gt;Dubbo是Alibaba开源的分布
    
    </summary>
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/categories/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Quartz学习———Quartz介绍(一)</title>
    <link href="http://wangyuanjun.cn/2017/12/27/Quartz%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Quartz%E4%BB%8B%E7%BB%8D-%E4%B8%80/"/>
    <id>http://wangyuanjun.cn/2017/12/27/Quartz学习——Quartz介绍-一/</id>
    <published>2017-12-27T15:02:10.000Z</published>
    <updated>2018-01-09T03:04:58.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：介绍"><a href="#一：介绍" class="headerlink" title="一：介绍"></a>一：介绍</h1><p>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，是完全由java开发的一个开源的任务日程管理系统，“任务进度管理器”就是一个在预先确定（被纳入日程）的时间到达时，负责执行（或者通知）其他软件组件的系统。<br>Quartz用一个小Java库发布文件（.jar文件），这个库文件包含了所有Quartz核心功能。这些功能的主要接口(API)是Scheduler接口。它提供了简单的操作，例如：将任务纳入日程或者从日程中取消，开始/停止/暂停日程进度。</p>
<h1 id="二：quartz核心概念"><a href="#二：quartz核心概念" class="headerlink" title="二：quartz核心概念"></a>二：quartz核心概念</h1><p>先来看一张图：<br><img src="/2017/12/27/Quartz学习——Quartz介绍-一/quartz.png" alt="quartz"></p>
<ul>
<li><p>Job( 任务，即被调度的任务)：要由表示要执行的“作业”的类实现的接口。只有一个方法 void execute(jobExecutionContext context) (jobExecutionContext 提供调度上下文各种信息，运行时数据保存在jobDataMap中) Job有个子接口StatefulJob ,代表有状态任务。</p>
</li>
<li><p>JobDetail：Quartz在每次执行Job时，都重新创建一个Job实例，所以它不直接接受一个Job的实例，相反它接收一个Job实现类，以便运行时通过newInstance()的反射机制实例化Job。因此需要通过一个类来描述Job的实现类及其它相关的静态信息，如Job名字、描述、关联监听器等信息，JobDetail承担了这一角色。<br>  传递给定作业实例的详细信息属性。 JobDetails将使用JobBuilder创建/定义。 </p>
</li>
<li><p>Trigger(触发器)：用于定义任务调度时间规则。是一个类，描述触发Job执行的时间触发规则。使用TriggerBuilder实例化实际触发器。主要有SimpleTrigger和CronTrigger这两个子类。当仅需触发一次或者以固定时间间隔周期执行，SimpleTrigger是最适合的选择；而CronTrigger则可以通过Cron表达式定义出各种复杂时间规则的调度方案：如每早晨9:00执行，周一、周三、周五下午5:00执行等；</p>
</li>
<li><p>Calendar：org.quartz.Calendar和java.util.Calendar不同，它是一些日历特定时间点的集合（可以简单地将org.quartz.Calendar看作java.util.Calendar的集合——java.util.Calendar代表一个日历时间点，无特殊说明后面的Calendar即指org.quartz.Calendar）。一个Trigger可以和多个Calendar关联，以便排除或包含某些时间点。假设，我们安排每周星期一早上10:00执行任务，但是如果碰到法定的节日，任务则不执行，这时就需要在Trigger触发机制的基础上使用Calendar进行定点排除。</p>
</li>
<li><p>Scheduler(任务调度器)：这是Quartz Scheduler的主要接口，代表一个Quartz的独立运行容器，Trigger和JobDetail可以注册到Scheduler中，两者在Scheduler中拥有各自的组及名称，组及名称是Scheduler查找定位容器中某一对象的依据，Trigger的组及名称必须唯一，JobDetail的组和名称也必须唯一（但可以和Trigger的组和名称相同，因为它们是不同类型的）。Scheduler定义了多个接口方法，允许外部通过组及名称访问和控制容器中Trigger和JobDetail。<br>一旦注册，调度程序负责执行作业，当他们的相关联的触发器触发（当他们的预定时间到达时）。</p>
</li>
<li><p>QuartzSchedulerThread ：负责执行向QuartzScheduler注册的触发Trigger的工作的线程。 </p>
</li>
<li><p>ThreadPool：Scheduler使用一个线程池作为任务运行的基础设施，任务通过共享线程池中的线程提供运行效率。 </p>
</li>
<li><p>QuartzSchedulerResources：包含创建QuartzScheduler实例所需的所有资源（JobStore，ThreadPool等）。 </p>
</li>
<li><p>SchedulerFactory( 调度程序工厂) ：提供用于获取调度程序实例的客户端可用句柄的机制。 </p>
</li>
<li><p>JobStore： 通过类实现的接口，这些类要为org.quartz.core.QuartzScheduler的使用提供一个org.quartz.Job和org.quartz.Trigger存储机制。作业和触发器的存储应该以其名称和组的组合为唯一性。</p>
</li>
<li><p>QuartzScheduler ：这是Quartz的核心，它是org.quartz.Scheduler接口的间接实现，包含调度org.quartz.Jobs，注册org.quartz.JobListener实例等的方法。  </p>
</li>
</ul>
<h1 id="三：Quartz中的设计模式"><a href="#三：Quartz中的设计模式" class="headerlink" title="三：Quartz中的设计模式"></a>三：Quartz中的设计模式</h1><ol>
<li>Builder模式<br>所有关键组件都有Builder模式来构建  <builder> 如:JobBuilder、TriggerBuilder</builder></li>
<li>Factory模式<br>最终由Scheduler的来进行组合各种组件  <factory> 如SchedulerFactory</factory></li>
<li>组件模式<br>Quartz项目中大量使用组件模式，插件式设计，可插拔，耦合性低，易扩展，开发者可自行定义自己的Job、Trigger等组件</li>
<li>链式写法<br>Quartz中大量使用链式写法，与jQuery的写法有几分相似，实现也比较简单，如：<pre><code> $(this).addClass(&quot;divCurrColor&quot;).next(&quot;.divContent&quot;).css(&quot;display&quot;,&quot;block&quot;);  
newTrigger().withIdentity( &quot;trigger3&quot;, &quot;group1&quot;).startAt( startTime)
.withSchedule(simpleSchedule().withIntervalInSeconds(10).withRepeatCount(10)).build();
</code></pre></li>
</ol>
<h1 id="四：Quartz体系结构"><a href="#四：Quartz体系结构" class="headerlink" title="四：Quartz体系结构"></a>四：Quartz体系结构</h1><h2 id="三大核心"><a href="#三大核心" class="headerlink" title="三大核心"></a>三大核心</h2><ul>
<li>调度器</li>
<li>任务</li>
<li>触发器<br><img src="/2017/12/27/Quartz学习——Quartz介绍-一/zy.jpg" alt="zy"></li>
</ul>
<h2 id="重要组成"><a href="#重要组成" class="headerlink" title="重要组成"></a>重要组成</h2><p>1）任务：</p>
<ul>
<li>Job：表示一个工作，要执行的具体内容。此接口中只有一个方法。要创建一个任务，必须得实现这个接口。该接口只有一个execute方法，任务每次被调用的时候都会执行这个execute方法的逻辑，类似TimerTask的run方法，在里面编写业务逻辑。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class TestJob implements Job &#123;</div><div class="line">      /**把要执行的操作，写在execute方法中  */</div><div class="line">      @Override</div><div class="line">      public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;</div><div class="line">          SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);</div><div class="line">          System.out.println(&quot;I can do something...&quot;);</div><div class="line">          System.out.println(sdf.format(new Date()));</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>生命周期：在每次调度器执行job时，它在调用execute方法前会创建一个新的job实例，当调用完成之后，关联的job对象实例会被释放，释放的实例会被垃圾回收机制回收。</p>
<ul>
<li><p>JobBuilder：可向任务传递数据,通常情况下,我们使用它就可向任务类发送数据了，如有特别复杂的传递参数,它提供了一个传递递:JobDataMap对象的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JobDetail jobDetail =  JobBuilder.newJob(TestJob.class).withIdentity(&quot;testJob&quot;,&quot;group1&quot;).build();</div></pre></td></tr></table></figure>
</li>
<li><p>JobDetail：用来保存我们任务的详细信息。一个JobDetail可以有多个Trigger，但是一个Trigger只能对应一个JobDetail。下面是JobDetail的一些常用的属性和含义：<br><img src="/2017/12/27/Quartz学习——Quartz介绍-一/aa.png" alt="aa"></p>
</li>
<li><p>JobStore：负责跟踪所有你给scheduler的“工作数据”：jobs, triggers, calendars, 等。</p>
<ol>
<li><p>RAMJobStore：是使用最简单的也是最高效(依据CPU时间)的JobStore 。RAMJobStore 正如它名字描述的一样，它保存数据在RAM。缺点是你的应用结束之后所有的数据也丢失了–这意味着RAMJobStore 不具有保持job和trigger持久的能力。对于一些程序是可以接受的，甚至是期望的，但对于其他的程序可能是灾难性的。使用RAMJobStore配置Quartz：配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore：是使用最简单的也是最高效</div></pre></td></tr></table></figure>
</li>
<li><p>JDBCJobStore：以JDBC的方式保存数据在数据库中。它比RAMJobStore的配置复杂一点，也没有RAMJobStore快。然而,性能缺点不是糟透了,特别是如果你在数据库表主键上建立了索引。在机器之间的LAN(在scheduler 和数据库之间)合理的情况下，检索和更新一个被触发的Trigger花费的时间少于10毫秒。几乎适用于所有的数据库，广泛用于 Oracle。PostgreSQL, MySQL, MS SQLServer, HSQLDB, 和DB2。使用JDBCJobStore之前你必须首先创建一系列Quartz要使用的表。你可以发现表创建语句在Quartz发布目录的 “docs/dbTables”下面。你需要确定你的应用要使用的事务类型。如果你不想绑定调度命令(例如增加和移除Trigger)到其他的事务，你可以使用JobStoreTX (最常用的选择)作为你的Jobstore。如果你需要Quartz和其他的事务(例如在J2EE应用服务器中)一起工作，你应该使用JobStoreCMT ，Quartz 将让应用服务器容器管理这个事务。使用JobStoreTx配置Quartz：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX  </div><div class="line">  org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate  </div><div class="line">  #配置表的前缀  </div><div class="line">  org.quartz.jobStore.tablePrefix = QRTZ_  </div><div class="line">  #使用JNDI数据源的时候，数据源的名字  </div><div class="line">  org.quartz.jobStore.dataSource = myDS</div></pre></td></tr></table></figure>
</li>
<li><p>TerracottaJobStore：提供了一个方法：在不使用数据库的情况下使它具有收缩性和强壮性。可以是集群的也可以是非集群的，在这两种情况下为你的job数据提供了一个存储机制用于应用程序重启之间持久,因为数据是存储在Terracotta服务器。它的性能比使用数据库访问JDBCJobStore好一点儿(大约是一个数量级)，但是明显比RAMJobStore慢。使用TerracottaJobStore配置Quartz：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">org.quartz.jobStore.class = org.terracotta.quartz.TerracottaJobStore  </div><div class="line">  org.quartz.jobStore.tcConfigUrl = localhost:9510</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>JobDataMap：中可以包含不限量的（序列化的）数据对象，在job实例执行的时候，可以使用其中的数据；JobDataMap是Java Map接口的一个实现，额外增加了一些便于存取基本类型的数据的方法。</p>
<ol>
<li><p>存：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JobDetail jobDetail =  JobBuilder.newJob(TestJob.class).withIdentity(&quot;testJob&quot;,&quot;group1&quot;).usingJobData(&quot;date1&quot;,&quot;存内容&quot;).build();</div></pre></td></tr></table></figure>
</li>
<li><p>取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class TestJob implements Job &#123;</div><div class="line">      /**把要执行的操作，写在execute方法中  */</div><div class="line">      @Override</div><div class="line">      public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;</div><div class="line">          JobKey key = jobExecutionContext.getJobDetail().getKey();</div><div class="line">          JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</div><div class="line">          String date1 = jobDataMap.getString(&quot;date1&quot;);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>2）触发器：用来触发执行Job<br><img src="/2017/12/27/Quartz学习——Quartz介绍-一/trigger.png" alt="trigger"><br>2.1）触发器通用属性：</p>
<ul>
<li>Jobkey：表示job实例的标识，触发器被触发时，该指定的job实例会被执行</li>
<li>StartTime：表示触发器的时间表首次被触发的时间，它的值类型为：java.util.Date</li>
<li>EndTime：指定触发器的不再被触发的时间，它的值类型为：java.util.Date</li>
</ul>
<p>2.2）触发器类型：</p>
<ul>
<li>SimpleTrigger： 主要是针对一些相对简单的时间触发进行配置使用，比如在指定的时间开始然后在一定的时间间隔之内重复执行一个Job，同时可以任意指定重复的次数。用来触发只需执行一次或者在给定时间触发并且重复N次且每次执行延迟一定时间的任务。 下面就是使用一个SimpleTrigger的例子:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//创建触发器 每3秒钟执行一次(无开始时间和结束时间)</div><div class="line">  Trigger trigger = TriggerBuilder.newTrigger()</div><div class="line">              .withIdentity(&quot;trigger1&quot;, &quot;group3&quot;)</div><div class="line">              .withSchedule(</div><div class="line">              SimpleScheduleBuilder.simpleSchedule()</div><div class="line">              .withIntervalInSeconds(3).repeatForever()).build();</div><div class="line">  //创建触发器 每3秒钟执行一次(有开始时间和结束时间)</div><div class="line">   long now = new Date().getTime();</div><div class="line">  Date start = new Date(now+6000);</div><div class="line">  Date end = new Date(now+12000);</div><div class="line">  //创建触发器 每3秒钟执行一次</div><div class="line">  Trigger trigger = TriggerBuilder.newTrigger()</div><div class="line">                    .withIdentity(&quot;trigger1&quot;, &quot;group3&quot;)</div><div class="line">                    .startAt(start)</div><div class="line">                    .endAt(end)</div><div class="line">                    .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(3).repeatForever()).build();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>SimpleTrigger具有丰富的构造函数，根据业务需求构造不同的构造函数。</p>
<ul>
<li>CronTrigger： 可以配置更复杂的触发时刻表，基于日历的作业触发器，而不像SimpleTrigger那样精确指定间隔时间，按照日历触发，例如“每个周五”，每个月10日中午或者10：15分。比SimpleTrigger更加常用。</li>
</ul>
<p>Cron表达式：用于配置CronTrigger实例，是由7个表达式组成的字符串，描述了时间表的详细信息。</p>
<p>格式为：[秒][分][时][日][月][周][年]</p>
<p>Cron表达式特殊字符意义对应表：<br><img src="/2017/12/27/Quartz学习——Quartz介绍-一/table.png" alt="table"><br>通配符说明：<br><img src="/2017/12/27/Quartz学习——Quartz介绍-一/tongpeifu.png" alt="tongpeifu"><br>Cron表达式例子：<br><img src="/2017/12/27/Quartz学习——Quartz介绍-一/bds.png" alt="bds"></p>
<pre><code>TriggerBuilder.newTrigger().withIdentity(&quot;trigger2&quot;,&quot;group2&quot;).withSchedule(CronScheduleBuilder.cronSchedule(&quot;0 0 9 ? * 6L *&quot;)).build();
</code></pre><p>Cron表达式小技巧：</p>
<ol>
<li><p>‘L’和‘W’可以一起组合使用</p>
</li>
<li><p>周字段英文字母不区分大小写即MOM与mom相同</p>
</li>
<li><p>利用工具，在线生成cron表达式：cron.qqe2.com/</p>
</li>
</ol>
<p>NthIncludedDayTrigger：是 Quartz 开发团队最新加入到框架中的一个 Trigger。它设计用于在每一间隔类型的第几天执行 Job。例如，你要在每个月的 15 号执行开票的 Job，用 NthIncludedDayTrigger就再合适不过了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NthIncludedDayTrigger trigger = new NthIncludedDayTrigger(&quot;NthIncludedDayTrigger&quot;,Scheduler.DEFAULT_GROUP);</div><div class="line">              trigger.setN(15);</div><div class="line">              trigger.setIntervalType(NthIncludedDayTrigger.INTERVAL_TYPE_MONTHLY);</div></pre></td></tr></table></figure>
<p>3）调度器Scheduler</p>
<p>代表一个Quartz的独立运行容器，Trigger和JobDetail可以注册到Scheduler中，两者在Scheduler中拥有各自的组及名称，组及名称是Scheduler查找定位容器中某一对象的依据，Trigger的组及名称必须唯一，JobDetail的组和名称也必须唯一（但可以和Trigger的组和名称相同，因为它们是不同类型的）。Scheduler定义了多个接口方法，允许外部通过组及名称访问和控制容器中Trigger和JobDetail。</p>
<p>Scheduler可以将Trigger绑定到某一JobDetail中，这样当Trigger触发时，对应的Job就被执行。一个Job可以对应多个Trigger，但一个Trigger只能对应一个Job。</p>
<p>可以通过SchedulerFactory创建一个Scheduler实例。Scheduler拥有一个SchedulerContext，它类似于ServletContext，保存着Scheduler上下文信息，Job和Trigger都可以访问SchedulerContext内的信息。SchedulerContext内部通过一个Map，以键值对的方式维护这些上下文数据，SchedulerContext为保存和获取数据提供了多个put()和getXxx()的方法。可以通过Scheduler# getContext()获取对应的SchedulerContext实例；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">SchedulerFactory schedulerfactory=new StdSchedulerFactory();</div><div class="line">    Scheduler scheduler = schedulerfactory.getScheduler();</div><div class="line"></div><div class="line">     DirectSchedulerFactory factory = DirectSchedulerFactory.getInstance();</div><div class="line">    try &#123;</div><div class="line">        Scheduler scheduler = factory.getScheduler();</div><div class="line">    &#125; catch (SchedulerException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>4)SchedulerFactory:</p>
<ul>
<li>使用一组参数（java.util.Properties）来创建和出书啊Quartz调度器</li>
<li>配置参数一般存储在quartz.properties中</li>
<li>调用getScheduler方法就能创建和初始化调度器</li>
</ul>
<p>5)quartz.properties:</p>
<p>Quartz-Job的quartz.properties配置文件说明，此文件在quartz的jar包有，可直接拿过来使用不过只有基本的几个配置 自己可根据需要进行扩充；另外如果项目中没有对该配置文件重写，则Quartz会加载自己jar包中的quartz.properties文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"># Default Properties file for use by StdSchedulerFactory  </div><div class="line">    # to create a Quartz Scheduler Instance, if a different  </div><div class="line">    # properties file is not explicitly specified.  </div><div class="line">    #  </div><div class="line">    # ===========================================================================  </div><div class="line">    # Configure Main Scheduler Properties 调度器属性  </div><div class="line">    # ===========================================================================  </div><div class="line">    org.quartz.scheduler.instanceName: DefaultQuartzScheduler  </div><div class="line">    #org.quartz.scheduler.instanceid:AUTO  </div><div class="line">    org.quartz.scheduler.rmi.export: false  </div><div class="line">    org.quartz.scheduler.rmi.proxy: false  </div><div class="line">    org.quartz.scheduler.wrapJobExecutionInUserTransaction: false  </div><div class="line">    # ===========================================================================    </div><div class="line">    # Configure ThreadPool 线程池属性    </div><div class="line">    # ===========================================================================  </div><div class="line">    #线程池的实现类（一般使用SimpleThreadPool即可满足几乎所有用户的需求）  </div><div class="line">    org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool  </div><div class="line">    #指定线程数，至少为1（无默认值）(一般设置为1-100直接的整数合适)  </div><div class="line">    org.quartz.threadPool.threadCount: 10  </div><div class="line">    #设置线程的优先级（最大为java.lang.Thread.MAX_PRIORITY 10，最小为Thread.MIN_PRIORITY 1，默认为5）  </div><div class="line">    org.quartz.threadPool.threadPriority: 5  </div><div class="line">    #设置SimpleThreadPool的一些属性  </div><div class="line">    #设置是否为守护线程  </div><div class="line">    #org.quartz.threadpool.makethreadsdaemons = false  </div><div class="line">    #org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true  </div><div class="line">    #org.quartz.threadpool.threadsinheritgroupofinitializingthread=false  </div><div class="line">    #线程前缀默认值是：[Scheduler Name]_Worker  </div><div class="line">    #org.quartz.threadpool.threadnameprefix=swhJobThead;  </div><div class="line">    # 配置全局监听(TriggerListener,JobListener) 则应用程序可以接收和执行 预定的事件通知  </div><div class="line">    # ===========================================================================  </div><div class="line">    # Configuring a Global TriggerListener 配置全局的Trigger监听器  </div><div class="line">    # MyTriggerListenerClass 类必须有一个无参数的构造函数，和 属性的set方法，目前2.2.x只支持原始数据类型的值（包括字符串）  </div><div class="line">    # ===========================================================================  </div><div class="line">    #org.quartz.triggerListener.NAME.class = com.swh.MyTriggerListenerClass  </div><div class="line">    #org.quartz.triggerListener.NAME.propName = propValue  </div><div class="line">    #org.quartz.triggerListener.NAME.prop2Name = prop2Value  </div><div class="line">    # ===========================================================================  </div><div class="line">    # Configuring a Global JobListener 配置全局的Job监听器  </div><div class="line">    # MyJobListenerClass 类必须有一个无参数的构造函数，和 属性的set方法，目前2.2.x只支持原始数据类型的值（包括字符串）  </div><div class="line">    # ===========================================================================  </div><div class="line">    #org.quartz.jobListener.NAME.class = com.swh.MyJobListenerClass  </div><div class="line">    #org.quartz.jobListener.NAME.propName = propValue  </div><div class="line">    #org.quartz.jobListener.NAME.prop2Name = prop2Value  </div><div class="line">    # ===========================================================================    </div><div class="line">    # Configure JobStore 存储调度信息（工作，触发器和日历等）  </div><div class="line">    # ===========================================================================  </div><div class="line">    # 信息保存时间 默认值60秒  </div><div class="line">    org.quartz.jobStore.misfireThreshold: 60000  </div><div class="line">    #保存job和Trigger的状态信息到内存中的类  </div><div class="line">    org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore  </div><div class="line">    # ===========================================================================    </div><div class="line">    # Configure SchedulerPlugins 插件属性 配置  </div><div class="line">    # ===========================================================================  </div><div class="line">    # 自定义插件    </div><div class="line">    #org.quartz.plugin.NAME.class = com.swh.MyPluginClass  </div><div class="line">    #org.quartz.plugin.NAME.propName = propValue  </div><div class="line">    #org.quartz.plugin.NAME.prop2Name = prop2Value  </div><div class="line">    #配置trigger执行历史日志（可以看到类的文档和参数列表）  </div><div class="line">    org.quartz.plugin.triggHistory.class = org.quartz.plugins.history.LoggingTriggerHistoryPlugin    </div><div class="line">    org.quartz.plugin.triggHistory.triggerFiredMessage = Trigger &#123;1&#125;.&#123;0&#125; fired job &#123;6&#125;.&#123;5&#125; at: &#123;4, date, HH:mm:ss MM/dd/yyyy&#125;    </div><div class="line">    org.quartz.plugin.triggHistory.triggerCompleteMessage = Trigger &#123;1&#125;.&#123;0&#125; completed firing job &#123;6&#125;.&#123;5&#125; at &#123;4, date, HH:mm:ss MM/dd/yyyy&#125; with resulting trigger instruction code: &#123;9&#125;    </div><div class="line">    #配置job调度插件  quartz_jobs(jobs and triggers内容)的XML文档    </div><div class="line">    #加载 Job 和 Trigger 信息的类   （1.8之前用：org.quartz.plugins.xml.JobInitializationPlugin）  </div><div class="line">    org.quartz.plugin.jobInitializer.class = org.quartz.plugins.xml.XMLSchedulingDataProcessorPlugin  </div><div class="line">    #指定存放调度器(Job 和 Trigger)信息的xml文件，默认是classpath下quartz_jobs.xml  </div><div class="line">    org.quartz.plugin.jobInitializer.fileNames = my_quartz_job2.xml    </div><div class="line">    #org.quartz.plugin.jobInitializer.overWriteExistingJobs = false    </div><div class="line">    org.quartz.plugin.jobInitializer.failOnFileNotFound = true    </div><div class="line">    #自动扫描任务单并发现改动的时间间隔,单位为秒  </div><div class="line">    org.quartz.plugin.jobInitializer.scanInterval = 10  </div><div class="line">    #覆盖任务调度器中同名的jobDetail,避免只修改了CronExpression所造成的不能重新生效情况  </div><div class="line">    org.quartz.plugin.jobInitializer.wrapInUserTransaction = false  </div><div class="line">    # ===========================================================================    </div><div class="line">    # Sample configuration of ShutdownHookPlugin  ShutdownHookPlugin插件的配置样例  </div><div class="line">    # ===========================================================================  </div><div class="line">    #org.quartz.plugin.shutdownhook.class = \org.quartz.plugins.management.ShutdownHookPlugin  </div><div class="line">    #org.quartz.plugin.shutdownhook.cleanShutdown = true  </div><div class="line">    #  </div><div class="line">    # Configure RMI Settings 远程服务调用配置  </div><div class="line">    #  </div><div class="line">    #如果你想quartz-scheduler出口本身通过RMI作为服务器，然后设置“出口”标志true(默认值为false)。  </div><div class="line">    #org.quartz.scheduler.rmi.export = false  </div><div class="line">    #主机上rmi注册表(默认值localhost)  </div><div class="line">    #org.quartz.scheduler.rmi.registryhost = localhost  </div><div class="line">    #注册监听端口号（默认值1099）  </div><div class="line">    #org.quartz.scheduler.rmi.registryport = 1099  </div><div class="line">    #创建rmi注册，false/never：如果你已经有一个在运行或不想进行创建注册  </div><div class="line">    # true/as_needed:第一次尝试使用现有的注册，然后再回来进行创建  </div><div class="line">    # always:先进行创建一个注册，然后再使用回来使用注册  </div><div class="line">    #org.quartz.scheduler.rmi.createregistry = never  </div><div class="line">    #Quartz Scheduler服务端端口，默认是随机分配RMI注册表  </div><div class="line">    #org.quartz.scheduler.rmi.serverport = 1098  </div><div class="line">    #true:链接远程服务调度(客户端),这个也要指定registryhost和registryport，默认为false  </div><div class="line">    # 如果export和proxy同时指定为true，则export的设置将被忽略  </div><div class="line">    #org.quartz.scheduler.rmi.proxy = false</div></pre></td></tr></table></figure>
<h1 id="五：存储方式"><a href="#五：存储方式" class="headerlink" title="五：存储方式"></a>五：存储方式</h1><p>RAMJobStore:<br>优点：不要外部数据库，配置容易，运行速度快<br>缺点：因为调度程序信息是存储在被分配给JVM的内存里面，所以，当应用程序停止运行时，所有调度信息将被丢失。另外因为存储到JVM内存里面，所以可以存储多少个Job和Trigger将会受到限制<br>JDBCJobStore:<br>优点：支持集群，因为所有的任务信息都会保存到数据库中，可以控制事物，还有就是如果应用服务器关闭或者重启，任务信息都不会丢失，并且可以恢复因服务器关闭或者重启而导致执行失败的任务<br>缺点：运行速度的快慢取决与连接数据库的快慢</p>
<h2 id="表关系和解释"><a href="#表关系和解释" class="headerlink" title="表关系和解释"></a>表关系和解释</h2><p><img src="/2017/12/27/Quartz学习——Quartz介绍-一/quartz表结构.png" alt="quartz表结构"></p>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Means</th>
</tr>
</thead>
<tbody>
<tr>
<td>qrtz_blob_triggers</td>
<td style="text-align:center">Trigger作为Blob类型存储(用于Quartz用户用JDBC创建他们自己定制的Trigger类型，JobStore 并不知道如何存储实例的时候)</td>
</tr>
<tr>
<td>qrtz_calendars</td>
<td style="text-align:center">以Blob类型存储Quartz的Calendar日历信息， quartz可配置一个日历来指定一个时间范围</td>
</tr>
<tr>
<td>qrtz_cron_triggers</td>
<td style="text-align:center">存储Cron Trigger，包括Cron表达式和时区信息。</td>
</tr>
<tr>
<td>qrtz_fired_triggers</td>
<td style="text-align:center">存储与已触发的Trigger相关的状态信息，以及相联Job的执行信息</td>
</tr>
<tr>
<td>qrtz_job_details</td>
<td style="text-align:center">存储每一个已配置的Job的详细信息</td>
</tr>
<tr>
<td>qrtz_locks</td>
<td style="text-align:center">存储程序的非观锁的信息(假如使用了悲观锁)</td>
</tr>
<tr>
<td>qrtz_paused_trigger_graps</td>
<td style="text-align:center">存储已暂停的Trigger组的信息</td>
</tr>
<tr>
<td>qrtz_scheduler_state</td>
<td style="text-align:center">存储少量的有关 Scheduler的状态信息，和别的 Scheduler 实例(假如是用于一个集群中)</td>
</tr>
<tr>
<td>qrtz_simple_triggers</td>
<td style="text-align:center">存储简单的 Trigger，包括重复次数，间隔，以及已触的次数</td>
</tr>
<tr>
<td>qrtz_triggers</td>
<td style="text-align:center">存储已配置的 Trigger的信息</td>
</tr>
<tr>
<td>qrzt_simprop_triggers</td>
</tr>
</tbody>
</table>
<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><pre><code>// 1、工厂模式 构建Scheduler的Factory，其中STD为Quartz默认的Factory  
//    开发者亦可自行实现自己的Factory;Job、Trigger等组件  
SchedulerFactory sf = new StdSchedulerFactory();  

// 2、通过SchedulerFactory构建Scheduler对象  
Scheduler sched = sf.getScheduler();  

// 3、org.quartz.DateBuilder.evenMinuteDate  -- 通过DateBuilder构建Date  
Date runTime = evenMinuteDate( new Date());  

// 4、org.quartz.JobBuilder.newJob &lt;下一分钟&gt; --通过JobBuilder构建Job  
JobDetail job = newJob(HelloJob.class).withIdentity(&quot;job1&quot;,&quot;group1&quot;).build();  

// 5、通过TriggerBuilder进行构建Trigger  
Trigger trigger = newTrigger().withIdentity(&quot;trigger1&quot;,&quot;group1&quot;)  
            .startAt(runTime).build();  

// 6、工厂模式，组装各个组件&lt;JOB，Trigger&gt;  
sched.scheduleJob (job, trigger);  

// 7、start   
sched.start();  

try {  
  Thread.sleep(65L * 1000L);  
} catch (Exception e) {  
}  

// 8、通过Scheduler销毁内置的Trigger和Job  
sched.shutdown(true);      
</code></pre><h2 id="一句话看懂Quartz"><a href="#一句话看懂Quartz" class="headerlink" title="一句话看懂Quartz"></a>一句话看懂Quartz</h2><ol>
<li>创建调度工厂();    //工厂模式</li>
<li>根据工厂取得调度器实例();  //工厂模式</li>
<li>Builder模式构建子组件<job,trigger>  // builder模式, 如JobBuilder、TriggerBuilder、DateBuilder</job,trigger></li>
<li>通过调度器组装子组件   调度器.组装&lt;子组件1,子组件2…&gt;  //工厂模式</li>
<li>调度器.start(); //工厂模式</li>
</ol>
<p>参考:<br><a href="http://blog.csdn.net/guolong1983811/article/details/51501346" target="_blank" rel="external">quartz详解2：quartz由浅入深</a><br><a href="https://www.cnblogs.com/drift-ice/p/3817269.html" target="_blank" rel="external">Quartz使用总结</a><br><a href="http://blog.csdn.net/chenweitang123/article/details/37777399" target="_blank" rel="external">Quartz深入浅出(一)</a><br><a href="http://blog.csdn.net/u010648555/article/details/54863144" target="_blank" rel="external">Quartz学习——Quartz大致介绍（一）</a><br><a href="https://www.tuicool.com/articles/3uQ7V3B" target="_blank" rel="external">深入解读Quartz任务调度器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：介绍&quot;&gt;&lt;a href=&quot;#一：介绍&quot; class=&quot;headerlink&quot; title=&quot;一：介绍&quot;&gt;&lt;/a&gt;一：介绍&lt;/h1&gt;&lt;p&gt;Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，是完全由java开发的一个开
    
    </summary>
    
      <category term="quartz" scheme="http://wangyuanjun.cn/categories/quartz/"/>
    
    
      <category term="quartz" scheme="http://wangyuanjun.cn/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>Oracle VM VirtualBox配置虚拟网卡(桥接),实现主机-虚拟机网络互通</title>
    <link href="http://wangyuanjun.cn/2017/12/25/Oracle-VM-VirtualBox%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1-%E6%A1%A5%E6%8E%A5-%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BA%92%E9%80%9A/"/>
    <id>http://wangyuanjun.cn/2017/12/25/Oracle-VM-VirtualBox配置虚拟网卡-桥接-实现主机-虚拟机网络互通/</id>
    <published>2017-12-25T09:01:52.000Z</published>
    <updated>2017-12-25T09:54:02.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桥接网卡"><a href="#桥接网卡" class="headerlink" title="桥接网卡"></a>桥接网卡</h2><ol>
<li>首先打开虚拟机</li>
<li>右键点击右下角 网络连接</li>
<li>在弹出框内点击 网络</li>
<li>在设置界面依次点击-网络-连接方式选择 -桥接网卡-确定</li>
</ol>
<p><img src="/2017/12/25/Oracle-VM-VirtualBox配置虚拟网卡-桥接-实现主机-虚拟机网络互通/桥接.png" alt="桥接"></p>
<h2 id="编辑网卡"><a href="#编辑网卡" class="headerlink" title="编辑网卡"></a>编辑网卡</h2><ol>
<li>打开centos虚拟机终端，就是命令行</li>
<li>切换到root用户，对网卡文件进行编辑</li>
<li>shell#cd /etc/sysconfig/network-scripts/</li>
<li>shell# vim ifcfg-enp0s3</li>
<li>BOOTPROTO=dhcp,ONBOOT=yes(dhcp为动态获取ip，ONBOOT=yes为开机启动)</li>
<li>保存退出！<br><img src="/2017/12/25/Oracle-VM-VirtualBox配置虚拟网卡-桥接-实现主机-虚拟机网络互通/修改网卡.png" alt="修改网卡"></li>
</ol>
<h2 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h2><pre><code>shell#service network restart
</code></pre><p>或者</p>
<pre><code>shell#systemctl restart network (centos7版本命令)
</code></pre><p>参考:<a href="https://jingyan.baidu.com/article/c843ea0ba8b70677931e4adc.html" target="_blank" rel="external">VirtualBox linux虚拟机如何实现“桥接”上网</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;桥接网卡&quot;&gt;&lt;a href=&quot;#桥接网卡&quot; class=&quot;headerlink&quot; title=&quot;桥接网卡&quot;&gt;&lt;/a&gt;桥接网卡&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先打开虚拟机&lt;/li&gt;
&lt;li&gt;右键点击右下角 网络连接&lt;/li&gt;
&lt;li&gt;在弹出框内点击 网络&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="linux" scheme="http://wangyuanjun.cn/categories/linux/"/>
    
    
      <category term="Oracle VM VirtualBox" scheme="http://wangyuanjun.cn/tags/Oracle-VM-VirtualBox/"/>
    
      <category term="linux" scheme="http://wangyuanjun.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>解决虚拟机安装linux后首次输入ifconfig IP地址显示为127.0.0.1</title>
    <link href="http://wangyuanjun.cn/2017/12/25/%E8%A7%A3%E5%86%B3%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85linux%E5%90%8E%E9%A6%96%E6%AC%A1%E8%BE%93%E5%85%A5ifconfig-IP%E5%9C%B0%E5%9D%80%E6%98%BE%E7%A4%BA%E4%B8%BA127-0-0-1/"/>
    <id>http://wangyuanjun.cn/2017/12/25/解决虚拟机安装linux后首次输入ifconfig-IP地址显示为127-0-0-1/</id>
    <published>2017-12-25T08:34:13.000Z</published>
    <updated>2017-12-25T08:52:53.821Z</updated>
    
    <content type="html"><![CDATA[<p>使用虚拟机Oracle VM VirtualBox安装linux首次输入ifconfig IP地址显示为127.0.0.1，解决方法如下:<br>在linux系统中输入命令:</p>
<pre><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0
</code></pre><p>显示如下:<br><img src="/2017/12/25/解决虚拟机安装linux后首次输入ifconfig-IP地址显示为127-0-0-1/图片.png" alt="图片"></p>
<p>将其中的ONBOOT=no改为yes,保存并退出。</p>
<p>最后输入命令:</p>
<pre><code>service network restart（重启服务命令）
</code></pre><p>重启服务器,会出现正在配置IP的提示,待自动配置成功后,输入命令ifconfig即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用虚拟机Oracle VM VirtualBox安装linux首次输入ifconfig IP地址显示为127.0.0.1，解决方法如下:&lt;br&gt;在linux系统中输入命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vi /etc/sysconfig/network-scripts/
    
    </summary>
    
      <category term="linux" scheme="http://wangyuanjun.cn/categories/linux/"/>
    
    
      <category term="Oracle VM VirtualBox" scheme="http://wangyuanjun.cn/tags/Oracle-VM-VirtualBox/"/>
    
      <category term="linux" scheme="http://wangyuanjun.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>解决项目war包部署到linux系统的tomcat中访问页面报404错误</title>
    <link href="http://wangyuanjun.cn/2017/12/25/%E8%A7%A3%E5%86%B3%E9%A1%B9%E7%9B%AEwar%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0linux%E7%B3%BB%E7%BB%9F%E7%9A%84tomcat%E4%B8%AD%E8%AE%BF%E9%97%AE%E9%A1%B5%E9%9D%A2%E6%8A%A5404%E9%94%99%E8%AF%AF/"/>
    <id>http://wangyuanjun.cn/2017/12/25/解决项目war包部署到linux系统的tomcat中访问页面报404错误/</id>
    <published>2017-12-25T05:56:46.000Z</published>
    <updated>2017-12-25T05:56:46.337Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java Web项目导出war包并部署到linux系统的tomcat中</title>
    <link href="http://wangyuanjun.cn/2017/12/25/Java-Web%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%87%BAwar%E5%8C%85%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0linux%E7%B3%BB%E7%BB%9F%E7%9A%84tomcat%E4%B8%AD/"/>
    <id>http://wangyuanjun.cn/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/</id>
    <published>2017-12-25T04:15:54.000Z</published>
    <updated>2017-12-25T08:24:19.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用eclpise导出war包"><a href="#使用eclpise导出war包" class="headerlink" title="使用eclpise导出war包"></a>使用eclpise导出war包</h2><p>右击项目–&gt;Export–&gt;选择WAR file–&gt;选择导出目录,导出，如下图所示:</p>
<p><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/eclipse导出war包.png" alt="eclipse导出war包"><br><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/eclipse导出war包选择WAR file.png" alt="eclipse导出war包选择WAR file"><br><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/eclipse导出war包finish.png" alt="eclipse导出war包finish"></p>
<h2 id="使用maven导出war包"><a href="#使用maven导出war包" class="headerlink" title="使用maven导出war包"></a>使用maven导出war包</h2><p>右击项目–&gt;Run as–&gt;Maven install，如下图所示:</p>
<p><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/maven导出war包.png" alt="maven导出war包"><br><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/maven导出war包finish.png" alt="maven导出war包finish"></p>
<h2 id="将war包部署至tomcat中"><a href="#将war包部署至tomcat中" class="headerlink" title="将war包部署至tomcat中"></a>将war包部署至tomcat中</h2><p>我的电脑系统是windows，为了模拟linux环境，使用Oracle VM VirtualBox虚拟机及centos6.9搭建linux环境。<br>在linux上安装tomcate及jdk，配置环境变量</p>
<ol>
<li>将spring-demo.war放到Tomcat的webapps目录下。<br>在windows上安装ssh,通过它将war包上传到linux上</li>
</ol>
<p><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/webapps放war包.png" alt="webapps放war包"></p>
<ol>
<li>启动tomcat<br>使用 ./catalina.sh run 命令可查看tomcate启动日志<br><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/启动tomcate1.png" alt="启动tomcate1"></li>
</ol>
<p>启动没报错，使用 ./startup.sh 命令启动tomcate，如果不能访问请关闭linux防火墙或者到防火墙中添加可访问的域名及端口。<br><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/浏览器输出.png" alt="浏览器输出"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用eclpise导出war包&quot;&gt;&lt;a href=&quot;#使用eclpise导出war包&quot; class=&quot;headerlink&quot; title=&quot;使用eclpise导出war包&quot;&gt;&lt;/a&gt;使用eclpise导出war包&lt;/h2&gt;&lt;p&gt;右击项目–&amp;gt;Export–&amp;g
    
    </summary>
    
      <category term="nginx" scheme="http://wangyuanjun.cn/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://wangyuanjun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot发布HttpClient服务和客户端调用HttpClient服务</title>
    <link href="http://wangyuanjun.cn/2017/12/23/SpringBoot%E5%8F%91%E5%B8%83HttpClient%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E7%94%A8HttpClient%E6%9C%8D%E5%8A%A1/"/>
    <id>http://wangyuanjun.cn/2017/12/23/SpringBoot发布HttpClient服务和客户端调用HttpClient服务/</id>
    <published>2017-12-23T06:28:27.000Z</published>
    <updated>2017-12-21T07:49:02.701Z</updated>
    
    <content type="html"><![CDATA[<p>之前在做公司项目的一个功能需要写WebSerice接口，写完之后我们老大说也可以用HttpClient来写接口，所以写了一个接口例子。</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.wyj&lt;/groupId&gt;
    &lt;artifactId&gt;wyj-interface-client&lt;/artifactId&gt;
    &lt;packaging&gt;war&lt;/packaging&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;wyj-interface-client Maven Webapp&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- http --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
            &lt;version&gt;4.5.4&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
            &lt;version&gt;1.1.41&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!--webservice cxf --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt;
            &lt;version&gt;3.1.8&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt;
            &lt;version&gt;3.1.8&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;finalName&gt;wyj-interface-client&lt;/finalName&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre><h2 id="HttpClient客户端"><a href="#HttpClient客户端" class="headerlink" title="HttpClient客户端"></a>HttpClient客户端</h2><p>可以传输json和map数据，可以使用get和post请求，详情见备注</p>
<pre><code>package http;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.junit.Test;

import com.alibaba.fastjson.JSON;

/**
 * http客户端
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月20日 下午8:26:51
 */
public class HttpClientTest {

    /**
     * post请求传输map数据
     * 
     * @param url
     * @param map
     * @param encoding
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public static String sendPostDataByMap(String url, Map&lt;String, String&gt; map, String encoding) throws ClientProtocolException, IOException {
        String result = &quot;&quot;;

        // 创建httpclient对象
        CloseableHttpClient httpClient = HttpClients.createDefault();
        // 创建post方式请求对象
        HttpPost httpPost = new HttpPost(url);

        // 装填参数
        List&lt;NameValuePair&gt; nameValuePairs = new ArrayList&lt;NameValuePair&gt;();
        if (map != null) {
            for (Entry&lt;String, String&gt; entry : map.entrySet()) {
                nameValuePairs.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
            }
        }

        // 设置参数到请求对象中
        httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, encoding));

        // 设置header信息
        // 指定报文头【Content-type】、【User-Agent】
        httpPost.setHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);
        httpPost.setHeader(&quot;User-Agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&quot;);

        // 执行请求操作，并拿到结果（同步阻塞）
        CloseableHttpResponse response = httpClient.execute(httpPost);
        // 获取结果实体
        // 判断网络连接状态码是否正常(0--200都数正常)
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            result = EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);
        }
        // 释放链接
        response.close();

        return result;
    }

    /**
     * post请求传输json数据
     * 
     * @param url
     * @param json
     * @param encoding
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public static String sendPostDataByJson(String url, String json, String encoding) throws ClientProtocolException, IOException {
        String result = &quot;&quot;;

        // 创建httpclient对象
        CloseableHttpClient httpClient = HttpClients.createDefault();

        // 创建post方式请求对象
        HttpPost httpPost = new HttpPost(url);

        // 设置参数到请求对象中
        StringEntity stringEntity = new StringEntity(json, ContentType.APPLICATION_JSON);
        stringEntity.setContentEncoding(&quot;utf-8&quot;);
        httpPost.setEntity(stringEntity);

        // 执行请求操作，并拿到结果（同步阻塞）
        CloseableHttpResponse response = httpClient.execute(httpPost);

        // 获取结果实体
        // 判断网络连接状态码是否正常(0--200都数正常)
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            result = EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);
        }
        // 释放链接
        response.close();

        return result;
    }

    /**
     * get请求传输数据
     * 
     * @param url
     * @param encoding
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public String sendGetData(String url, String encoding) throws ClientProtocolException, IOException {
        String result = &quot;&quot;;

        // 创建httpclient对象
        CloseableHttpClient httpClient = HttpClients.createDefault();

        // 创建get方式请求对象
        HttpGet httpGet = new HttpGet(url);
        httpGet.addHeader(&quot;Content-type&quot;, &quot;application/json&quot;);
        // 通过请求对象获取响应对象
        CloseableHttpResponse response = httpClient.execute(httpGet);

        // 获取结果实体
        // 判断网络连接状态码是否正常(0--200都数正常)
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            result = EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);
        }
        // 释放链接
        response.close();

        return result;
    }

    @Test
    public void testSendPostDataByMap() throws ClientProtocolException, IOException {
        String url = &quot;http://localhost:8080/httpService/sendPostDataByMap&quot;;
        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
        map.put(&quot;name&quot;, &quot;wyj&quot;);
        map.put(&quot;city&quot;, &quot;南京&quot;);
        String body = sendPostDataByMap(url, map, &quot;utf-8&quot;);
        System.out.println(&quot;响应结果：&quot; + body);
    }

    @Test
    public void testSendPostDataByJson() throws ClientProtocolException, IOException {
        String url = &quot;http://localhost:8080/httpService/sendPostDataByJson&quot;;
        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
        map.put(&quot;name&quot;, &quot;wyj&quot;);
        map.put(&quot;city&quot;, &quot;南京&quot;);
        String body = sendPostDataByJson(url, JSON.toJSONString(map), &quot;utf-8&quot;);
        System.out.println(&quot;响应结果：&quot; + body);
    }

    @Test
    public void testSendGetData() throws ClientProtocolException, IOException {
        String url = &quot;http://localhost:8080/httpService/sendGetData?name=wyj&amp;city=南京&quot;;
        String body = sendGetData(url, &quot;utf-8&quot;);
        System.out.println(&quot;响应结果：&quot; + body);
    }

}
</code></pre><h2 id="HttpClient服务端"><a href="#HttpClient服务端" class="headerlink" title="HttpClient服务端"></a>HttpClient服务端</h2><p>package com.wyj.http;</p>
<p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p>
<p>import org.springframework.web.bind.annotation.RequestBody;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestMethod;<br>import org.springframework.web.bind.annotation.RestController;</p>
<p>import com.alibaba.fastjson.JSON;<br>import com.alibaba.fastjson.JSONObject;</p>
<pre><code>/**
 * http服务端
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月21日 下午8:27:08
 */
@RestController
@RequestMapping(&quot;/httpService&quot;)
public class HttpServiceTest {

    @RequestMapping(value = &quot;/sendPostDataByMap&quot;, method = RequestMethod.POST)
    public String sendPostDataByMap(HttpServletRequest request, HttpServletResponse response) {
        String result = &quot;调用成功：数据是 &quot; + &quot;name:&quot; + request.getParameter(&quot;name&quot;) + &quot; city:&quot; + request.getParameter(&quot;city&quot;);
        return JSON.toJSONString(result);
    }

    @RequestMapping(value = &quot;/sendPostDataByJson&quot;, method = RequestMethod.POST)
    public String sendPostDataByJson(HttpServletRequest request, HttpServletResponse response, @RequestBody String requestBody) {
        JSONObject jsonObject = JSONObject.parseObject(requestBody);
        String result = &quot;调用成功：数据是 &quot; + &quot;name:&quot; + jsonObject.getString(&quot;name&quot;) + &quot; city:&quot; + jsonObject.getString(&quot;city&quot;);
        return JSON.toJSONString(result);
    }

    @RequestMapping(value = &quot;/sendGetData&quot;, method = RequestMethod.GET)
    public String sendGetData(HttpServletRequest request, HttpServletResponse response) {
        String result = &quot;调用成功：数据是 &quot; + &quot;name:&quot; + request.getParameter(&quot;name&quot;) + &quot; city:&quot; + request.getParameter(&quot;city&quot;);
        return JSON.toJSONString(result);
    }
}
</code></pre><h2 id="调用后返回结果输出为"><a href="#调用后返回结果输出为" class="headerlink" title="调用后返回结果输出为"></a>调用后返回结果输出为</h2><p><img src="/2017/12/23/SpringBoot发布HttpClient服务和客户端调用HttpClient服务/HttpClient-result.png" alt="HttpClient-result"></p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/wangyuanjun008/wyj-interface-client/blob/master/src/main/java/http/HttpClientTest.java" target="_blank" rel="external">SpringBoot整合的HttpClient客户端地址</a><br><a href="https://github.com/wangyuanjun008/wyj-interface-service/blob/master/src/main/java/com/wyj/http/HttpServiceTest.java" target="_blank" rel="external">SpringBoot整合的HttpClient服务端地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在做公司项目的一个功能需要写WebSerice接口，写完之后我们老大说也可以用HttpClient来写接口，所以写了一个接口例子。&lt;/p&gt;
&lt;h2 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="HttpClient" scheme="http://wangyuanjun.cn/categories/HttpClient/"/>
    
    
      <category term="HttpClient" scheme="http://wangyuanjun.cn/tags/HttpClient/"/>
    
      <category term="SpringBoot" scheme="http://wangyuanjun.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合cxf发布WebService服务和客户端调用WebService服务</title>
    <link href="http://wangyuanjun.cn/2017/12/21/SpringBoot%E6%95%B4%E5%90%88cxf%E5%8F%91%E5%B8%83WebService%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E7%94%A8WebService%E6%9C%8D%E5%8A%A1/"/>
    <id>http://wangyuanjun.cn/2017/12/21/SpringBoot整合cxf发布WebService服务和客户端调用WebService服务/</id>
    <published>2017-12-21T05:19:10.000Z</published>
    <updated>2017-12-21T07:47:32.037Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做公司项目的一个功能需要写WebSerice接口，为了系统得学习WebService，决定写一个测试接口的例子。<br>测试项目中使用的是SpringBoot(spring整合cxf需添加cxf-rt-frontend-jaxws，cxf-rt-transports-http依赖)</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.wyj&lt;/groupId&gt;
    &lt;artifactId&gt;wyj-interface-service&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;name&gt;wyj-interface-service&lt;/name&gt;
    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;
        &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- http --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
            &lt;version&gt;4.5.4&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
            &lt;version&gt;1.1.41&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 热部署模块 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 这个需要为 true 热部署才有效 --&gt;
        &lt;/dependency&gt;

        &lt;!-- CXF webservice --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-spring-boot-starter-jaxws&lt;/artifactId&gt;
            &lt;version&gt;3.1.11&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- CXF webservice --&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;
            &lt;artifactId&gt;scala-library&lt;/artifactId&gt;
            &lt;version&gt;2.11.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre><h2 id="服务端接口"><a href="#服务端接口" class="headerlink" title="服务端接口"></a>服务端接口</h2><pre><code>package com.wyj.webservice;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;

/**
 * webservice测试接口
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月19日 下午9:36:49
 */
@WebService(name = &quot;TestService&quot;, // 暴露服务名称
targetNamespace = &quot;http://service.wyj.com&quot;// 命名空间,一般是接口的包名倒序
)
public interface TestService {

    @WebMethod
    @WebResult(name = &quot;String&quot;, targetNamespace = &quot;&quot;)
    String sendMessage(@WebParam(name = &quot;username&quot;) String username);
}
</code></pre><h2 id="服务端接口实现"><a href="#服务端接口实现" class="headerlink" title="服务端接口实现"></a>服务端接口实现</h2><pre><code>package com.wyj.webservice;

import javax.jws.WebService;

import org.springframework.stereotype.Component;

    /**
     * webservice测试接口实现
     * 
     * 
     * @author：WangYuanJun
     * @date：2017年12月19日 下午9:37:20
     */
    @WebService(serviceName = &quot;TestService&quot;, // 与接口中指定的name一致
    targetNamespace = &quot;http://service.wyj.com&quot;, // 与接口中的命名空间一致,一般是接口的包名倒
    endpointInterface = &quot;com.wyj.webservice.TestService&quot;// 接口地址
    )
    @Component
    public class TestServiceImpl implements TestService {

        @Override
        public String sendMessage(String username) {

            return &quot;hello &quot;+username;
        }

    }
</code></pre><h2 id="cxf配置"><a href="#cxf配置" class="headerlink" title="cxf配置"></a>cxf配置</h2><pre><code>package com.wyj.webservice;

import javax.xml.ws.Endpoint;

import org.apache.cxf.Bus;
import org.apache.cxf.jaxws.EndpointImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
/**
 * cxf配置
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月19日 下午9:38:24
 */
@Configuration
public class CxfConfig {

    @Autowired
    private Bus bus;

    @Autowired
    private TestService testService;

    @Bean
    public Endpoint endpoint(){
        EndpointImpl endpoint = new EndpointImpl(bus, testService);
        endpoint.publish(&quot;/TestService&quot;);
        return endpoint;
    }
}
</code></pre><p>默认服务在Host:port/services/<em>*</em>路径下<br>将TestService接口发布在了路径/services/TestService下,wsdl文档路径为，<a href="http://localhost:8080/services/TestService?wsdl" target="_blank" rel="external">http://localhost:8080/services/TestService?wsdl</a></p>
<h2 id="TestService的wsdl信息"><a href="#TestService的wsdl信息" class="headerlink" title="TestService的wsdl信息"></a>TestService的wsdl信息</h2><pre><code>&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;&lt;wsdl:definitions xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:wsdl=&quot;http://schemas.xmlsoap.org/wsdl/&quot; xmlns:tns=&quot;http://service.wyj.com&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; xmlns:ns1=&quot;http://schemas.xmlsoap.org/soap/http&quot; name=&quot;TestService&quot; targetNamespace=&quot;http://service.wyj.com&quot;&gt;
  &lt;wsdl:types&gt;
&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:tns=&quot;http://service.wyj.com&quot; elementFormDefault=&quot;unqualified&quot; targetNamespace=&quot;http://service.wyj.com&quot; version=&quot;1.0&quot;&gt;

  &lt;xs:element name=&quot;sendMessage&quot; type=&quot;tns:sendMessage&quot;/&gt;

  &lt;xs:element name=&quot;sendMessageResponse&quot; type=&quot;tns:sendMessageResponse&quot;/&gt;

  &lt;xs:complexType name=&quot;sendMessage&quot;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element minOccurs=&quot;0&quot; name=&quot;username&quot; type=&quot;xs:string&quot;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;sendMessageResponse&quot;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element minOccurs=&quot;0&quot; name=&quot;String&quot; type=&quot;xs:string&quot;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

&lt;/xs:schema&gt;
  &lt;/wsdl:types&gt;
  &lt;wsdl:message name=&quot;sendMessage&quot;&gt;
    &lt;wsdl:part element=&quot;tns:sendMessage&quot; name=&quot;parameters&quot;&gt;
    &lt;/wsdl:part&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:message name=&quot;sendMessageResponse&quot;&gt;
    &lt;wsdl:part element=&quot;tns:sendMessageResponse&quot; name=&quot;parameters&quot;&gt;
    &lt;/wsdl:part&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:portType name=&quot;TestService&quot;&gt;
    &lt;wsdl:operation name=&quot;sendMessage&quot;&gt;
      &lt;wsdl:input message=&quot;tns:sendMessage&quot; name=&quot;sendMessage&quot;&gt;
    &lt;/wsdl:input&gt;
      &lt;wsdl:output message=&quot;tns:sendMessageResponse&quot; name=&quot;sendMessageResponse&quot;&gt;
    &lt;/wsdl:output&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:portType&gt;
  &lt;wsdl:binding name=&quot;TestServiceSoapBinding&quot; type=&quot;tns:TestService&quot;&gt;
    &lt;soap:binding style=&quot;document&quot; transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;
    &lt;wsdl:operation name=&quot;sendMessage&quot;&gt;
      &lt;soap:operation soapAction=&quot;&quot; style=&quot;document&quot;/&gt;
      &lt;wsdl:input name=&quot;sendMessage&quot;&gt;
        &lt;soap:body use=&quot;literal&quot;/&gt;
      &lt;/wsdl:input&gt;
      &lt;wsdl:output name=&quot;sendMessageResponse&quot;&gt;
        &lt;soap:body use=&quot;literal&quot;/&gt;
      &lt;/wsdl:output&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:binding&gt;
  &lt;wsdl:service name=&quot;TestService&quot;&gt;
    &lt;wsdl:port binding=&quot;tns:TestServiceSoapBinding&quot; name=&quot;TestServiceImplPort&quot;&gt;
      &lt;soap:address location=&quot;http://localhost:8080/services/TestService&quot;/&gt;
    &lt;/wsdl:port&gt;
  &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;
</code></pre><h2 id="基于cxf的客户端调用webservice接口"><a href="#基于cxf的客户端调用webservice接口" class="headerlink" title="基于cxf的客户端调用webservice接口"></a>基于cxf的客户端调用webservice接口</h2><pre><code>package webservice;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory;
import org.junit.Test;

/**
 * webservice客户端
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月19日 下午9:39:49
 */
public class WebServiceTest {

    @Test
    public void testSend1(){

        // 创建动态客户端
        JaxWsDynamicClientFactory dcf = JaxWsDynamicClientFactory.newInstance();
        Client client = dcf.createClient(&quot;http://localhost:8080/services/TestService?wsdl&quot;);

        // 需要密码的情况需要加上用户名和密码
        // client.getOutInterceptors().add(new ClientLoginInterceptor(USER_NAME,PASS_WORD));
        Object[] objects = new Object[0];
        try {

            // invoke(&quot;方法名&quot;,参数1,参数2,参数3....);
            objects = client.invoke(&quot;sendMessage&quot;, &quot;wyj&quot;);
            System.out.println(&quot;返回数据:&quot; + objects[0]);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre><h2 id="调用后返回结果输出为"><a href="#调用后返回结果输出为" class="headerlink" title="调用后返回结果输出为"></a>调用后返回结果输出为</h2><p><img src="/2017/12/21/SpringBoot整合cxf发布WebService服务和客户端调用WebService服务/TestService-result.png" alt="TestService-result"></p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/wangyuanjun008/wyj-interface-client/blob/master/src/main/java/webservice/WebServiceTest.java" target="_blank" rel="external">SpringBoot整合cxf的WebService客户端地址</a><br><a href="https://github.com/wangyuanjun008/wyj-interface-service/tree/master/src/main/java/com/wyj/webservice" target="_blank" rel="external">SpringBoot整合cxf的WebService服务端地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做公司项目的一个功能需要写WebSerice接口，为了系统得学习WebService，决定写一个测试接口的例子。&lt;br&gt;测试项目中使用的是SpringBoot(spring整合cxf需添加cxf-rt-frontend-jaxws，cxf-rt-transports-
    
    </summary>
    
      <category term="WebService" scheme="http://wangyuanjun.cn/categories/WebService/"/>
    
    
      <category term="SpringBoot" scheme="http://wangyuanjun.cn/tags/SpringBoot/"/>
    
      <category term="WebService" scheme="http://wangyuanjun.cn/tags/WebService/"/>
    
  </entry>
  
  <entry>
    <title>github-hexo搭建博客之hexo提交百度搜索引擎</title>
    <link href="http://wangyuanjun.cn/2017/12/18/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8Bhexo%E6%8F%90%E4%BA%A4%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <id>http://wangyuanjun.cn/2017/12/18/github-hexo搭建博客之hexo提交百度搜索引擎/</id>
    <published>2017-12-18T09:13:23.000Z</published>
    <updated>2017-12-18T14:35:25.791Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在整理自己的博客想添加一个评论的功能，希望我写的博客能被广大人员所知，突然发现自己写的博客在百度上搜索不到，那我添加评论功能就没有意义，百度一下才知道github禁止了百度爬虫，晕死。折腾了好久才解决，接下来我向大家介绍我的解决方法。</p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><h3 id="1-注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；"><a href="#1-注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；" class="headerlink" title="1.注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；"></a>1.注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；</h3><h3 id="2-绑定域名"><a href="#2-绑定域名" class="headerlink" title="2.绑定域名"></a>2.绑定域名</h3><pre><code>绑定域名分2种情况：CNAME和A记录。
A记录：A记录填写IP，由于不带www方式只能采用A记录，所以必须先才cmd的ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP
CNAME：将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问
</code></pre><p><img src="/2017/12/18/github-hexo搭建博客之hexo提交百度搜索引擎/绑定域名.png" alt="绑定域名"></p>
<h3 id="3-跳转"><a href="#3-跳转" class="headerlink" title="3.跳转"></a>3.跳转</h3><p>在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如 <a href="http://xxxx.com" target="_blank" rel="external">http://xxxx.com</a> ，注意前面没有 http:// ，也没有www，然后使用hexo g &amp;&amp; hexo d上传部署。在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。</p>
<h2 id="验证网站"><a href="#验证网站" class="headerlink" title="验证网站"></a>验证网站</h2><h3 id="1-百度搜索引擎入口："><a href="#1-百度搜索引擎入口：" class="headerlink" title="1.百度搜索引擎入口："></a>1.百度搜索引擎入口：</h3><p><a href="http://ziyuan.baidu.com/linksubmit/url" target="_blank" rel="external">百度搜索引擎入口</a></p>
<h3 id="2-文件验证"><a href="#2-文件验证" class="headerlink" title="2.文件验证:"></a>2.文件验证:</h3><p>先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的public/下面 。<br>然后部署到服务器,输入地址：<a href="http://wangyuanjun008.github.io/baidu_verify_oLfvXCaeZ4.html" target="_blank" rel="external">http://wangyuanjun008.github.io/baidu_verify_oLfvXCaeZ4.html</a> 能访问到就可以点验证按钮(按照百度的引导步骤就好)。</p>
<h3 id="3-网页抓取-1-主动推送-2-自动推送-3-sitemap-4-手动提交"><a href="#3-网页抓取-1-主动推送-2-自动推送-3-sitemap-4-手动提交" class="headerlink" title="3.网页抓取:(1.主动推送 2.自动推送 3.sitemap 4.手动提交 )"></a>3.网页抓取:(1.主动推送 2.自动推送 3.sitemap 4.手动提交 )</h3><p>我选择的是自动推送<br>    自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到\themes\landscape\layout_partial\after_footer.ejs中的最下面就行。<br>    代码如下：</p>
<pre><code>&lt;script&gt;
(function(){
    var bp = document.createElement(&apos;script&apos;);
    var curProtocol = window.location.protocol.split(&apos;:&apos;)[0];
    if (curProtocol === &apos;https&apos;) {
        bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        
    }
    else {
        bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;
    }
    var s = document.getElementsByTagName(&quot;script&quot;)[0];
    s.parentNode.insertBefore(bp, s);
})();
&lt;/script&gt;
</code></pre><p>参考: <a href="https://www.cnblogs.com/tengj/p/5357879.html" target="_blank" rel="external">hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天在整理自己的博客想添加一个评论的功能，希望我写的博客能被广大人员所知，突然发现自己写的博客在百度上搜索不到，那我添加评论功能就没有意义，百度一下才知道github禁止了百度爬虫，晕死。折腾了好久才解决，接下来我向大家介绍我的解决方法。&lt;/p&gt;
&lt;h2 id=&quot;域名&quot;&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://wangyuanjun.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://wangyuanjun.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
