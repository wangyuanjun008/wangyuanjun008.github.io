<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>守望的稻草人</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangyuanjun.cn/"/>
  <updated>2017-12-21T07:49:02.701Z</updated>
  <id>http://wangyuanjun.cn/</id>
  
  <author>
    <name>WangYuanJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot发布HttpClient服务和客户端调用HttpClient服务</title>
    <link href="http://wangyuanjun.cn/2017/12/23/SpringBoot%E5%8F%91%E5%B8%83HttpClient%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E7%94%A8HttpClient%E6%9C%8D%E5%8A%A1/"/>
    <id>http://wangyuanjun.cn/2017/12/23/SpringBoot发布HttpClient服务和客户端调用HttpClient服务/</id>
    <published>2017-12-23T06:28:27.000Z</published>
    <updated>2017-12-21T07:49:02.701Z</updated>
    
    <content type="html"><![CDATA[<p>之前在做公司项目的一个功能需要写WebSerice接口，写完之后我们老大说也可以用HttpClient来写接口，所以写了一个接口例子。</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.wyj&lt;/groupId&gt;
    &lt;artifactId&gt;wyj-interface-client&lt;/artifactId&gt;
    &lt;packaging&gt;war&lt;/packaging&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;wyj-interface-client Maven Webapp&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- http --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
            &lt;version&gt;4.5.4&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
            &lt;version&gt;1.1.41&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!--webservice cxf --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt;
            &lt;version&gt;3.1.8&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt;
            &lt;version&gt;3.1.8&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;finalName&gt;wyj-interface-client&lt;/finalName&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre><h2 id="HttpClient客户端"><a href="#HttpClient客户端" class="headerlink" title="HttpClient客户端"></a>HttpClient客户端</h2><p>可以传输json和map数据，可以使用get和post请求，详情见备注</p>
<pre><code>package http;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.junit.Test;

import com.alibaba.fastjson.JSON;

/**
 * http客户端
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月20日 下午8:26:51
 */
public class HttpClientTest {

    /**
     * post请求传输map数据
     * 
     * @param url
     * @param map
     * @param encoding
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public static String sendPostDataByMap(String url, Map&lt;String, String&gt; map, String encoding) throws ClientProtocolException, IOException {
        String result = &quot;&quot;;

        // 创建httpclient对象
        CloseableHttpClient httpClient = HttpClients.createDefault();
        // 创建post方式请求对象
        HttpPost httpPost = new HttpPost(url);

        // 装填参数
        List&lt;NameValuePair&gt; nameValuePairs = new ArrayList&lt;NameValuePair&gt;();
        if (map != null) {
            for (Entry&lt;String, String&gt; entry : map.entrySet()) {
                nameValuePairs.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
            }
        }

        // 设置参数到请求对象中
        httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, encoding));

        // 设置header信息
        // 指定报文头【Content-type】、【User-Agent】
        httpPost.setHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);
        httpPost.setHeader(&quot;User-Agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&quot;);

        // 执行请求操作，并拿到结果（同步阻塞）
        CloseableHttpResponse response = httpClient.execute(httpPost);
        // 获取结果实体
        // 判断网络连接状态码是否正常(0--200都数正常)
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            result = EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);
        }
        // 释放链接
        response.close();

        return result;
    }

    /**
     * post请求传输json数据
     * 
     * @param url
     * @param json
     * @param encoding
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public static String sendPostDataByJson(String url, String json, String encoding) throws ClientProtocolException, IOException {
        String result = &quot;&quot;;

        // 创建httpclient对象
        CloseableHttpClient httpClient = HttpClients.createDefault();

        // 创建post方式请求对象
        HttpPost httpPost = new HttpPost(url);

        // 设置参数到请求对象中
        StringEntity stringEntity = new StringEntity(json, ContentType.APPLICATION_JSON);
        stringEntity.setContentEncoding(&quot;utf-8&quot;);
        httpPost.setEntity(stringEntity);

        // 执行请求操作，并拿到结果（同步阻塞）
        CloseableHttpResponse response = httpClient.execute(httpPost);

        // 获取结果实体
        // 判断网络连接状态码是否正常(0--200都数正常)
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            result = EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);
        }
        // 释放链接
        response.close();

        return result;
    }

    /**
     * get请求传输数据
     * 
     * @param url
     * @param encoding
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public String sendGetData(String url, String encoding) throws ClientProtocolException, IOException {
        String result = &quot;&quot;;

        // 创建httpclient对象
        CloseableHttpClient httpClient = HttpClients.createDefault();

        // 创建get方式请求对象
        HttpGet httpGet = new HttpGet(url);
        httpGet.addHeader(&quot;Content-type&quot;, &quot;application/json&quot;);
        // 通过请求对象获取响应对象
        CloseableHttpResponse response = httpClient.execute(httpGet);

        // 获取结果实体
        // 判断网络连接状态码是否正常(0--200都数正常)
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            result = EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);
        }
        // 释放链接
        response.close();

        return result;
    }

    @Test
    public void testSendPostDataByMap() throws ClientProtocolException, IOException {
        String url = &quot;http://localhost:8080/httpService/sendPostDataByMap&quot;;
        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
        map.put(&quot;name&quot;, &quot;wyj&quot;);
        map.put(&quot;city&quot;, &quot;南京&quot;);
        String body = sendPostDataByMap(url, map, &quot;utf-8&quot;);
        System.out.println(&quot;响应结果：&quot; + body);
    }

    @Test
    public void testSendPostDataByJson() throws ClientProtocolException, IOException {
        String url = &quot;http://localhost:8080/httpService/sendPostDataByJson&quot;;
        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
        map.put(&quot;name&quot;, &quot;wyj&quot;);
        map.put(&quot;city&quot;, &quot;南京&quot;);
        String body = sendPostDataByJson(url, JSON.toJSONString(map), &quot;utf-8&quot;);
        System.out.println(&quot;响应结果：&quot; + body);
    }

    @Test
    public void testSendGetData() throws ClientProtocolException, IOException {
        String url = &quot;http://localhost:8080/httpService/sendGetData?name=wyj&amp;city=南京&quot;;
        String body = sendGetData(url, &quot;utf-8&quot;);
        System.out.println(&quot;响应结果：&quot; + body);
    }

}
</code></pre><h2 id="HttpClient服务端"><a href="#HttpClient服务端" class="headerlink" title="HttpClient服务端"></a>HttpClient服务端</h2><p>package com.wyj.http;</p>
<p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p>
<p>import org.springframework.web.bind.annotation.RequestBody;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestMethod;<br>import org.springframework.web.bind.annotation.RestController;</p>
<p>import com.alibaba.fastjson.JSON;<br>import com.alibaba.fastjson.JSONObject;</p>
<pre><code>/**
 * http服务端
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月21日 下午8:27:08
 */
@RestController
@RequestMapping(&quot;/httpService&quot;)
public class HttpServiceTest {

    @RequestMapping(value = &quot;/sendPostDataByMap&quot;, method = RequestMethod.POST)
    public String sendPostDataByMap(HttpServletRequest request, HttpServletResponse response) {
        String result = &quot;调用成功：数据是 &quot; + &quot;name:&quot; + request.getParameter(&quot;name&quot;) + &quot; city:&quot; + request.getParameter(&quot;city&quot;);
        return JSON.toJSONString(result);
    }

    @RequestMapping(value = &quot;/sendPostDataByJson&quot;, method = RequestMethod.POST)
    public String sendPostDataByJson(HttpServletRequest request, HttpServletResponse response, @RequestBody String requestBody) {
        JSONObject jsonObject = JSONObject.parseObject(requestBody);
        String result = &quot;调用成功：数据是 &quot; + &quot;name:&quot; + jsonObject.getString(&quot;name&quot;) + &quot; city:&quot; + jsonObject.getString(&quot;city&quot;);
        return JSON.toJSONString(result);
    }

    @RequestMapping(value = &quot;/sendGetData&quot;, method = RequestMethod.GET)
    public String sendGetData(HttpServletRequest request, HttpServletResponse response) {
        String result = &quot;调用成功：数据是 &quot; + &quot;name:&quot; + request.getParameter(&quot;name&quot;) + &quot; city:&quot; + request.getParameter(&quot;city&quot;);
        return JSON.toJSONString(result);
    }
}
</code></pre><h2 id="调用后返回结果输出为"><a href="#调用后返回结果输出为" class="headerlink" title="调用后返回结果输出为"></a>调用后返回结果输出为</h2><p><img src="/2017/12/23/SpringBoot发布HttpClient服务和客户端调用HttpClient服务/HttpClient-result.png" alt="HttpClient-result"></p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/wangyuanjun008/wyj-interface-client/blob/master/src/main/java/http/HttpClientTest.java" target="_blank" rel="external">SpringBoot整合的HttpClient客户端地址</a><br><a href="https://github.com/wangyuanjun008/wyj-interface-service/blob/master/src/main/java/com/wyj/http/HttpServiceTest.java" target="_blank" rel="external">SpringBoot整合的HttpClient服务端地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在做公司项目的一个功能需要写WebSerice接口，写完之后我们老大说也可以用HttpClient来写接口，所以写了一个接口例子。&lt;/p&gt;
&lt;h2 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="HttpClient" scheme="http://wangyuanjun.cn/categories/HttpClient/"/>
    
    
      <category term="SpringBoot" scheme="http://wangyuanjun.cn/tags/SpringBoot/"/>
    
      <category term="HttpClient" scheme="http://wangyuanjun.cn/tags/HttpClient/"/>
    
  </entry>
  
  <entry>
    <title>Spring Aop之AspectJ注解配置实现日志管理</title>
    <link href="http://wangyuanjun.cn/2017/12/21/Spring-Aop%E4%B9%8BAspectJ%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    <id>http://wangyuanjun.cn/2017/12/21/Spring-Aop之AspectJ注解配置实现日志管理/</id>
    <published>2017-12-21T08:26:44.000Z</published>
    <updated>2017-12-21T15:01:47.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建日志注解"><a href="#创建日志注解" class="headerlink" title="创建日志注解"></a>创建日志注解</h2><pre><code>package com.wyj.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * 日志注解
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年9月26日 下午8:25:35
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface SysLog {

    String action() default &quot;&quot;;//动作

}
</code></pre><h2 id="创建切面通知类"><a href="#创建切面通知类" class="headerlink" title="创建切面通知类"></a>创建切面通知类</h2><p>记录操作的方法名，参数和花费的时间，使用环绕通知<br>　　@Before 前置</p>
<p>　　@AfterReturning  后置，可以获得返回值，必须在注解中确定返回值参数名称。</p>
<p>　　@AfterThrowing 抛出异常，可以获得具体异常信息，必须在注解确定第二个参数名称</p>
<p>　　@Around 环绕[]</p>
<p>　　@After 最终</p>
<pre><code>package com.wyj.aspect;

import java.lang.reflect.Method;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.wyj.annotation.SysLog;
import com.wyj.entity.SysLogEntity;
import com.wyj.service.SysLogService;

/**
 * 日志切面通知
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年9月26日 下午10:28:57
 */
@Aspect
@Component
public class SysLogAspect {

    @Autowired
    private SysLogService sysLogService;

    /**
     * 切入点
     */
    @Pointcut(&quot;@annotation(com.wyj.annotation.SysLog)&quot;)
    public void pointCut() {}

    /**
     * 环绕通知
     * 
     * @param joinPoint
     * @return
     * @throws Throwable
     */
    @Around(&quot;pointCut()&quot;)
    public Object aroud(ProceedingJoinPoint joinPoint) throws Throwable {

        // 开始时间
        long beginTime = System.currentTimeMillis();

        // 执行目标方法
        Object result = joinPoint.proceed();

        // 执行时长(毫秒)
        long time = System.currentTimeMillis() - beginTime;

        // 保存日志
        saveSysLog(joinPoint, time);
        return result;
    }

    /**
     * 保存日志
     * 
     * @param joinPoint
     * @param time
     */
    private void saveSysLog(ProceedingJoinPoint joinPoint, long time) {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        Method method = signature.getMethod();
        SysLogEntity sysLogEntity = new SysLogEntity();
        SysLog sysLog = method.getAnnotation(SysLog.class);
        if (sysLog != null) {

            // 注解上的描述
            sysLogEntity.setOperation(sysLog.action());
        }

        // 获取目标类名
        String className = joinPoint.getTarget().getClass().getName();

        // 获取方法名
        String methodName = signature.getName();
        sysLogEntity.setMethod(className + &quot;.&quot; + methodName + &quot;()&quot;);

        // 请求的参数
        Object[] args = joinPoint.getArgs();
        if (args != null &amp;&amp; args.length != 0 &amp;&amp; args[0] != null) {
            sysLogEntity.setParams(args[0].toString());
        }
        sysLogEntity.setTime(time);

        // 保存系统日志
        sysLogService.save(sysLogEntity);
    }
}
</code></pre><h2 id="扫描和启动aop注解"><a href="#扫描和启动aop注解" class="headerlink" title="扫描和启动aop注解"></a>扫描和启动aop注解</h2><p><img src="/2017/12/21/Spring-Aop之AspectJ注解配置实现日志管理/启动aop注解.png" alt="启动aop注解"></p>
<h2 id="日志注解的应用"><a href="#日志注解的应用" class="headerlink" title="日志注解的应用"></a>日志注解的应用</h2><p><img src="/2017/12/21/Spring-Aop之AspectJ注解配置实现日志管理/应用注解.png" alt="应用注解"></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建日志注解&quot;&gt;&lt;a href=&quot;#创建日志注解&quot; class=&quot;headerlink&quot; title=&quot;创建日志注解&quot;&gt;&lt;/a&gt;创建日志注解&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;package com.wyj.annotation;

import java.lang.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring-Aop之xml配置实现日志管理</title>
    <link href="http://wangyuanjun.cn/2017/12/21/Spring-Aop%E4%B9%8Bxml%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    <id>http://wangyuanjun.cn/2017/12/21/Spring-Aop之xml配置实现日志管理/</id>
    <published>2017-12-21T08:25:55.000Z</published>
    <updated>2017-12-21T15:22:45.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建日志注解"><a href="#创建日志注解" class="headerlink" title="创建日志注解"></a>创建日志注解</h2><pre><code>package com.wyj.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * 日志注解
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年9月26日 下午8:25:35
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface SysLog {

    String action() default &quot;&quot;;//动作

}
</code></pre><h2 id="创建切面通知类"><a href="#创建切面通知类" class="headerlink" title="创建切面通知类"></a>创建切面通知类</h2><pre><code>package com.wyj.aspect;

import java.lang.reflect.Method;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.wyj.annotation.SysLog;
import com.wyj.entity.SysLogEntity;
import com.wyj.service.SysLogService;

/**
 * 日志切面通知
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年9月26日 下午10:28:57
 */
public class SysLogAspect {

    @Autowired
    private SysLogService sysLogService;

    /**
     * 环绕通知
     * 
     * @param joinPoint
     * @return
     * @throws Throwable
     */
    public Object aroud(ProceedingJoinPoint joinPoint) throws Throwable {

        // 开始时间
        long beginTime = System.currentTimeMillis();

        // 执行目标方法
        Object result = joinPoint.proceed();

        // 执行时长(毫秒)
        long time = System.currentTimeMillis() - beginTime;

        // 保存日志
        saveSysLog(joinPoint, time);
        return result;
    }

    /**
     * 保存日志
     * 
     * @param joinPoint
     * @param time
     */
    private void saveSysLog(ProceedingJoinPoint joinPoint, long time) {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        Method method = signature.getMethod();
        SysLogEntity sysLogEntity = new SysLogEntity();
        SysLog sysLog = method.getAnnotation(SysLog.class);
        if (sysLog != null) {

            // 注解上的描述
            sysLogEntity.setOperation(sysLog.action());
        }

        // 获取目标类名
        String className = joinPoint.getTarget().getClass().getName();

        // 获取方法名
        String methodName = signature.getName();
        sysLogEntity.setMethod(className + &quot;.&quot; + methodName + &quot;()&quot;);

        // 请求的参数
        Object[] args = joinPoint.getArgs();
        if (args != null &amp;&amp; args.length != 0 &amp;&amp; args[0] != null) {
            sysLogEntity.setParams(args[0].toString());
        }
        sysLogEntity.setTime(time);

        // 保存系统日志
        sysLogService.save(sysLogEntity);
    }
}
</code></pre><h2 id="AspectJ配置文件"><a href="#AspectJ配置文件" class="headerlink" title="AspectJ配置文件"></a>AspectJ配置文件</h2><pre><code>&lt;!-- 切面 --&gt;
&lt;bean id=&quot;sysLogAspect&quot; class=&quot;com.wyj.aspect.SysLogAspect&quot;&gt;&lt;/bean&gt;

&lt;aop:config&gt;
    &lt;aop:aspect ref=&quot;sysLogAspect&quot;&gt;
        &lt;aop:pointcut expression=&quot;@annotation(com.wyj.annotation.SysLog)&quot; id=&quot;sysLogPointcut&quot;/&gt;
        &lt;aop:around method=&quot;aroud&quot; pointcut-ref=&quot;sysLogPointcut&quot;/&gt;
    &lt;/aop:aspect&gt;
&lt;/aop:config&gt;
</code></pre><h2 id="日志注解的应用"><a href="#日志注解的应用" class="headerlink" title="日志注解的应用"></a>日志注解的应用</h2><p><img src="/2017/12/21/Spring-Aop之xml配置实现日志管理/应用注解.png" alt="应用注解"></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建日志注解&quot;&gt;&lt;a href=&quot;#创建日志注解&quot; class=&quot;headerlink&quot; title=&quot;创建日志注解&quot;&gt;&lt;/a&gt;创建日志注解&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;package com.wyj.annotation;

import java.lang.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Maven镜像更换为阿里云镜像</title>
    <link href="http://wangyuanjun.cn/2017/12/21/Maven%E9%95%9C%E5%83%8F%E6%9B%B4%E6%8D%A2%E4%B8%BA%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F/"/>
    <id>http://wangyuanjun.cn/2017/12/21/Maven镜像更换为阿里云镜像/</id>
    <published>2017-12-21T07:55:10.000Z</published>
    <updated>2017-12-21T08:08:39.110Z</updated>
    
    <content type="html"><![CDATA[<p>每次update Maven Project 的时候，下载速度非常慢，因为maven仓库默认在国外。<br>国内支持maven镜像的有阿里云，开源中国等，这里换为阿里云的，镜像地址: <a href="http://maven.aliyun.com/" target="_blank" rel="external">http://maven.aliyun.com/</a> 。</p>
<p>找到settings.xml文件的mirrors节点，接着在mirrors节点里面加上一个mirror子节点，内容如下:</p>
<pre><code>&lt;mirror&gt;
    &lt;id&gt;aliyun&lt;/id&gt;
    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
    &lt;name&gt;aliyun&lt;/name&gt;
    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;
&lt;/mirror&gt;
</code></pre><p>修改完毕之后，就可以体验下飞一般的感觉了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次update Maven Project 的时候，下载速度非常慢，因为maven仓库默认在国外。&lt;br&gt;国内支持maven镜像的有阿里云，开源中国等，这里换为阿里云的，镜像地址: &lt;a href=&quot;http://maven.aliyun.com/&quot; target=&quot;_b
    
    </summary>
    
      <category term="maven" scheme="http://wangyuanjun.cn/categories/maven/"/>
    
    
      <category term="maven" scheme="http://wangyuanjun.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合cxf发布WebService服务和客户端调用WebService服务</title>
    <link href="http://wangyuanjun.cn/2017/12/21/SpringBoot%E6%95%B4%E5%90%88cxf%E5%8F%91%E5%B8%83WebService%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E7%94%A8WebService%E6%9C%8D%E5%8A%A1/"/>
    <id>http://wangyuanjun.cn/2017/12/21/SpringBoot整合cxf发布WebService服务和客户端调用WebService服务/</id>
    <published>2017-12-21T05:19:10.000Z</published>
    <updated>2017-12-21T07:47:32.037Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做公司项目的一个功能需要写WebSerice接口，为了系统得学习WebService，决定写一个测试接口的例子。<br>测试项目中使用的是SpringBoot(spring整合cxf需添加cxf-rt-frontend-jaxws，cxf-rt-transports-http依赖)</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.wyj&lt;/groupId&gt;
    &lt;artifactId&gt;wyj-interface-service&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;name&gt;wyj-interface-service&lt;/name&gt;
    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;
        &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- http --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
            &lt;version&gt;4.5.4&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
            &lt;version&gt;1.1.41&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 热部署模块 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 这个需要为 true 热部署才有效 --&gt;
        &lt;/dependency&gt;

        &lt;!-- CXF webservice --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-spring-boot-starter-jaxws&lt;/artifactId&gt;
            &lt;version&gt;3.1.11&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- CXF webservice --&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;
            &lt;artifactId&gt;scala-library&lt;/artifactId&gt;
            &lt;version&gt;2.11.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre><h2 id="服务端接口"><a href="#服务端接口" class="headerlink" title="服务端接口"></a>服务端接口</h2><pre><code>package com.wyj.webservice;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;

/**
 * webservice测试接口
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月19日 下午9:36:49
 */
@WebService(name = &quot;TestService&quot;, // 暴露服务名称
targetNamespace = &quot;http://service.wyj.com&quot;// 命名空间,一般是接口的包名倒序
)
public interface TestService {

    @WebMethod
    @WebResult(name = &quot;String&quot;, targetNamespace = &quot;&quot;)
    String sendMessage(@WebParam(name = &quot;username&quot;) String username);
}
</code></pre><h2 id="服务端接口实现"><a href="#服务端接口实现" class="headerlink" title="服务端接口实现"></a>服务端接口实现</h2><pre><code>package com.wyj.webservice;

import javax.jws.WebService;

import org.springframework.stereotype.Component;

    /**
     * webservice测试接口实现
     * 
     * 
     * @author：WangYuanJun
     * @date：2017年12月19日 下午9:37:20
     */
    @WebService(serviceName = &quot;TestService&quot;, // 与接口中指定的name一致
    targetNamespace = &quot;http://service.wyj.com&quot;, // 与接口中的命名空间一致,一般是接口的包名倒
    endpointInterface = &quot;com.wyj.webservice.TestService&quot;// 接口地址
    )
    @Component
    public class TestServiceImpl implements TestService {

        @Override
        public String sendMessage(String username) {

            return &quot;hello &quot;+username;
        }

    }
</code></pre><h2 id="cxf配置"><a href="#cxf配置" class="headerlink" title="cxf配置"></a>cxf配置</h2><pre><code>package com.wyj.webservice;

import javax.xml.ws.Endpoint;

import org.apache.cxf.Bus;
import org.apache.cxf.jaxws.EndpointImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
/**
 * cxf配置
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月19日 下午9:38:24
 */
@Configuration
public class CxfConfig {

    @Autowired
    private Bus bus;

    @Autowired
    private TestService testService;

    @Bean
    public Endpoint endpoint(){
        EndpointImpl endpoint = new EndpointImpl(bus, testService);
        endpoint.publish(&quot;/TestService&quot;);
        return endpoint;
    }
}
</code></pre><p>默认服务在Host:port/services/<em>*</em>路径下<br>将TestService接口发布在了路径/services/TestService下,wsdl文档路径为，<a href="http://localhost:8080/services/TestService?wsdl" target="_blank" rel="external">http://localhost:8080/services/TestService?wsdl</a></p>
<h2 id="TestService的wsdl信息"><a href="#TestService的wsdl信息" class="headerlink" title="TestService的wsdl信息"></a>TestService的wsdl信息</h2><pre><code>&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;&lt;wsdl:definitions xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:wsdl=&quot;http://schemas.xmlsoap.org/wsdl/&quot; xmlns:tns=&quot;http://service.wyj.com&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; xmlns:ns1=&quot;http://schemas.xmlsoap.org/soap/http&quot; name=&quot;TestService&quot; targetNamespace=&quot;http://service.wyj.com&quot;&gt;
  &lt;wsdl:types&gt;
&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:tns=&quot;http://service.wyj.com&quot; elementFormDefault=&quot;unqualified&quot; targetNamespace=&quot;http://service.wyj.com&quot; version=&quot;1.0&quot;&gt;

  &lt;xs:element name=&quot;sendMessage&quot; type=&quot;tns:sendMessage&quot;/&gt;

  &lt;xs:element name=&quot;sendMessageResponse&quot; type=&quot;tns:sendMessageResponse&quot;/&gt;

  &lt;xs:complexType name=&quot;sendMessage&quot;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element minOccurs=&quot;0&quot; name=&quot;username&quot; type=&quot;xs:string&quot;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;sendMessageResponse&quot;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element minOccurs=&quot;0&quot; name=&quot;String&quot; type=&quot;xs:string&quot;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

&lt;/xs:schema&gt;
  &lt;/wsdl:types&gt;
  &lt;wsdl:message name=&quot;sendMessage&quot;&gt;
    &lt;wsdl:part element=&quot;tns:sendMessage&quot; name=&quot;parameters&quot;&gt;
    &lt;/wsdl:part&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:message name=&quot;sendMessageResponse&quot;&gt;
    &lt;wsdl:part element=&quot;tns:sendMessageResponse&quot; name=&quot;parameters&quot;&gt;
    &lt;/wsdl:part&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:portType name=&quot;TestService&quot;&gt;
    &lt;wsdl:operation name=&quot;sendMessage&quot;&gt;
      &lt;wsdl:input message=&quot;tns:sendMessage&quot; name=&quot;sendMessage&quot;&gt;
    &lt;/wsdl:input&gt;
      &lt;wsdl:output message=&quot;tns:sendMessageResponse&quot; name=&quot;sendMessageResponse&quot;&gt;
    &lt;/wsdl:output&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:portType&gt;
  &lt;wsdl:binding name=&quot;TestServiceSoapBinding&quot; type=&quot;tns:TestService&quot;&gt;
    &lt;soap:binding style=&quot;document&quot; transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;
    &lt;wsdl:operation name=&quot;sendMessage&quot;&gt;
      &lt;soap:operation soapAction=&quot;&quot; style=&quot;document&quot;/&gt;
      &lt;wsdl:input name=&quot;sendMessage&quot;&gt;
        &lt;soap:body use=&quot;literal&quot;/&gt;
      &lt;/wsdl:input&gt;
      &lt;wsdl:output name=&quot;sendMessageResponse&quot;&gt;
        &lt;soap:body use=&quot;literal&quot;/&gt;
      &lt;/wsdl:output&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:binding&gt;
  &lt;wsdl:service name=&quot;TestService&quot;&gt;
    &lt;wsdl:port binding=&quot;tns:TestServiceSoapBinding&quot; name=&quot;TestServiceImplPort&quot;&gt;
      &lt;soap:address location=&quot;http://localhost:8080/services/TestService&quot;/&gt;
    &lt;/wsdl:port&gt;
  &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;
</code></pre><h2 id="基于cxf的客户端调用webservice接口"><a href="#基于cxf的客户端调用webservice接口" class="headerlink" title="基于cxf的客户端调用webservice接口"></a>基于cxf的客户端调用webservice接口</h2><pre><code>package webservice;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory;
import org.junit.Test;

/**
 * webservice客户端
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月19日 下午9:39:49
 */
public class WebServiceTest {

    @Test
    public void testSend1(){

        // 创建动态客户端
        JaxWsDynamicClientFactory dcf = JaxWsDynamicClientFactory.newInstance();
        Client client = dcf.createClient(&quot;http://localhost:8080/services/TestService?wsdl&quot;);

        // 需要密码的情况需要加上用户名和密码
        // client.getOutInterceptors().add(new ClientLoginInterceptor(USER_NAME,PASS_WORD));
        Object[] objects = new Object[0];
        try {

            // invoke(&quot;方法名&quot;,参数1,参数2,参数3....);
            objects = client.invoke(&quot;sendMessage&quot;, &quot;wyj&quot;);
            System.out.println(&quot;返回数据:&quot; + objects[0]);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre><h2 id="调用后返回结果输出为"><a href="#调用后返回结果输出为" class="headerlink" title="调用后返回结果输出为"></a>调用后返回结果输出为</h2><p><img src="/2017/12/21/SpringBoot整合cxf发布WebService服务和客户端调用WebService服务/TestService-result.png" alt="TestService-result"></p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/wangyuanjun008/wyj-interface-client/blob/master/src/main/java/webservice/WebServiceTest.java" target="_blank" rel="external">SpringBoot整合cxf的WebService客户端地址</a><br><a href="https://github.com/wangyuanjun008/wyj-interface-service/tree/master/src/main/java/com/wyj/webservice" target="_blank" rel="external">SpringBoot整合cxf的WebService服务端地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做公司项目的一个功能需要写WebSerice接口，为了系统得学习WebService，决定写一个测试接口的例子。&lt;br&gt;测试项目中使用的是SpringBoot(spring整合cxf需添加cxf-rt-frontend-jaxws，cxf-rt-transports-
    
    </summary>
    
      <category term="WebService" scheme="http://wangyuanjun.cn/categories/WebService/"/>
    
    
      <category term="WebService" scheme="http://wangyuanjun.cn/tags/WebService/"/>
    
      <category term="SpringBoot" scheme="http://wangyuanjun.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>github-hexo搭建博客之hexo提交百度搜索引擎</title>
    <link href="http://wangyuanjun.cn/2017/12/18/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8Bhexo%E6%8F%90%E4%BA%A4%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <id>http://wangyuanjun.cn/2017/12/18/github-hexo搭建博客之hexo提交百度搜索引擎/</id>
    <published>2017-12-18T09:13:23.000Z</published>
    <updated>2017-12-18T14:35:25.791Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在整理自己的博客想添加一个评论的功能，希望我写的博客能被广大人员所知，突然发现自己写的博客在百度上搜索不到，那我添加评论功能就没有意义，百度一下才知道github禁止了百度爬虫，晕死。折腾了好久才解决，接下来我向大家介绍我的解决方法。</p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><h3 id="1-注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；"><a href="#1-注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；" class="headerlink" title="1.注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；"></a>1.注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；</h3><h3 id="2-绑定域名"><a href="#2-绑定域名" class="headerlink" title="2.绑定域名"></a>2.绑定域名</h3><pre><code>绑定域名分2种情况：CNAME和A记录。
A记录：A记录填写IP，由于不带www方式只能采用A记录，所以必须先才cmd的ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP
CNAME：将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问
</code></pre><p><img src="/2017/12/18/github-hexo搭建博客之hexo提交百度搜索引擎/绑定域名.png" alt="绑定域名"></p>
<h3 id="3-跳转"><a href="#3-跳转" class="headerlink" title="3.跳转"></a>3.跳转</h3><p>在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如 <a href="http://xxxx.com" target="_blank" rel="external">http://xxxx.com</a> ，注意前面没有 http:// ，也没有www，然后使用hexo g &amp;&amp; hexo d上传部署。在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。</p>
<h2 id="验证网站"><a href="#验证网站" class="headerlink" title="验证网站"></a>验证网站</h2><h3 id="1-百度搜索引擎入口："><a href="#1-百度搜索引擎入口：" class="headerlink" title="1.百度搜索引擎入口："></a>1.百度搜索引擎入口：</h3><p><a href="http://ziyuan.baidu.com/linksubmit/url" target="_blank" rel="external">百度搜索引擎入口</a></p>
<h3 id="2-文件验证"><a href="#2-文件验证" class="headerlink" title="2.文件验证:"></a>2.文件验证:</h3><p>先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的public/下面 。<br>然后部署到服务器,输入地址：<a href="http://wangyuanjun008.github.io/baidu_verify_oLfvXCaeZ4.html" target="_blank" rel="external">http://wangyuanjun008.github.io/baidu_verify_oLfvXCaeZ4.html</a> 能访问到就可以点验证按钮(按照百度的引导步骤就好)。</p>
<h3 id="3-网页抓取-1-主动推送-2-自动推送-3-sitemap-4-手动提交"><a href="#3-网页抓取-1-主动推送-2-自动推送-3-sitemap-4-手动提交" class="headerlink" title="3.网页抓取:(1.主动推送 2.自动推送 3.sitemap 4.手动提交 )"></a>3.网页抓取:(1.主动推送 2.自动推送 3.sitemap 4.手动提交 )</h3><p>我选择的是自动推送<br>    自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到\themes\landscape\layout_partial\after_footer.ejs中的最下面就行。<br>    代码如下：</p>
<pre><code>&lt;script&gt;
(function(){
    var bp = document.createElement(&apos;script&apos;);
    var curProtocol = window.location.protocol.split(&apos;:&apos;)[0];
    if (curProtocol === &apos;https&apos;) {
        bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        
    }
    else {
        bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;
    }
    var s = document.getElementsByTagName(&quot;script&quot;)[0];
    s.parentNode.insertBefore(bp, s);
})();
&lt;/script&gt;
</code></pre><p>参考: <a href="https://www.cnblogs.com/tengj/p/5357879.html" target="_blank" rel="external">hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天在整理自己的博客想添加一个评论的功能，希望我写的博客能被广大人员所知，突然发现自己写的博客在百度上搜索不到，那我添加评论功能就没有意义，百度一下才知道github禁止了百度爬虫，晕死。折腾了好久才解决，接下来我向大家介绍我的解决方法。&lt;/p&gt;
&lt;h2 id=&quot;域名&quot;&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://wangyuanjun.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://wangyuanjun.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>github-hexo搭建博客之畅言实现博客的评论</title>
    <link href="http://wangyuanjun.cn/2017/12/18/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E7%95%85%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%84%E8%AE%BA/"/>
    <id>http://wangyuanjun.cn/2017/12/18/github-hexo搭建博客之畅言实现博客的评论/</id>
    <published>2017-12-18T07:16:28.000Z</published>
    <updated>2017-12-18T14:48:46.573Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在整理自己的博客想添加一个评论的功能，希望我写的博客能被广大人员所知，解决了域名添加百度搜索引擎之后，我决定用畅言作为我的评论插件。</p>
<h2 id="注册畅言"><a href="#注册畅言" class="headerlink" title="注册畅言"></a>注册畅言</h2><pre><code>进入畅言官网 , 点击右上角 “免费注册”，并填写注册信息
</code></pre><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>详情见之前的博客<br><a href="(http://wangyuanjun.cn/2017/12/18/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8Bhexo%E6%8F%90%E4%BA%A4%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/">github-hexo搭建博客之hexo提交百度搜索引擎</a></p>
<h2 id="登录并进入畅言后台"><a href="#登录并进入畅言后台" class="headerlink" title="登录并进入畅言后台"></a>登录并进入畅言后台</h2><pre><code>注册完后，登录进入畅言官网，获取你的畅言 app id 和 app key。
</code></pre><p><img src="/2017/12/18/github-hexo搭建博客之畅言实现博客的评论/畅言.png" alt="畅言"></p>
<h2 id="使用畅言系统"><a href="#使用畅言系统" class="headerlink" title="使用畅言系统"></a>使用畅言系统</h2><pre><code>在主题的目录下_config.yml，添加上changyan_appid和changyan_conf的值。

#Cmments
comment:
  cloudTie: ## 网易云跟帖(productKey)
  changyan: ## 畅言需在下方配置两个参数，此处不填。
    appid: xxxxxxxxxxx
    appkey: xxxxxxxxxxxxxxxxxxxxxxxx
</code></pre><p>效果:<br><img src="/2017/12/18/github-hexo搭建博客之畅言实现博客的评论/评论.png" alt="评论"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天在整理自己的博客想添加一个评论的功能，希望我写的博客能被广大人员所知，解决了域名添加百度搜索引擎之后，我决定用畅言作为我的评论插件。&lt;/p&gt;
&lt;h2 id=&quot;注册畅言&quot;&gt;&lt;a href=&quot;#注册畅言&quot; class=&quot;headerlink&quot; title=&quot;注册畅言&quot;&gt;&lt;
    
    </summary>
    
      <category term="hexo" scheme="http://wangyuanjun.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://wangyuanjun.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用element ui select下拉框多选，编辑状态下回显数据</title>
    <link href="http://wangyuanjun.cn/2017/12/07/%E4%BD%BF%E7%94%A8element-ui-select%E4%B8%8B%E6%8B%89%E6%A1%86%E5%A4%9A%E9%80%89%EF%BC%8C%E7%BC%96%E8%BE%91%E7%8A%B6%E6%80%81%E4%B8%8B%E5%9B%9E%E6%98%BE%E6%95%B0%E6%8D%AE/"/>
    <id>http://wangyuanjun.cn/2017/12/07/使用element-ui-select下拉框多选，编辑状态下回显数据/</id>
    <published>2017-12-07T14:55:20.000Z</published>
    <updated>2017-12-18T14:58:51.069Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,使用webpack构建vue-cli全家桶<br>在项目中使用的是 element ui 组件库，在使用select多选下拉框时，编辑页面不知道怎么为其赋值回显数据。<br>下拉框的代码如下:</p>
<pre><code>&lt;el-form-item label=&quot;可选角色&quot;&gt;
    &lt;el-select v-model=&quot;commonForm.roles&quot; multiple placeholder=&quot;请选择&quot;&gt;
        &lt;el-option v-for=&quot;item in rolesItems&quot; :key=&quot;item.id&quot; :label=&quot;item.text&quot; :value=&quot;item.id&quot; &gt;&lt;/el-option&gt;
    &lt;/el-select&gt; 
&lt;/el-form-item&gt;
</code></pre><p>猜想:<br>多选下拉框是多条数据，将数据放到数组里面，将数据赋值给多选下拉框，就会有效果。</p>
<p>验证:<br>将多选数据以数组的形式从后台返回到前台，后台字段类型是List<br>返回结果如下:</p>
<p><img src="/2017/12/07/使用element-ui-select下拉框多选，编辑状态下回显数据/ElementUI多选下拉回显数据.png" alt="ElementUI多选下拉回显数据"></p>
<p>查看页面多选回显数据成功</p>
<p>参考地址: <a href="https://github.com/wangyuanjun008/wyj-vue-security/blob/master/src/view/user/user.vue" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security/blob/master/src/view/user/user.vue</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="element ui" scheme="http://wangyuanjun.cn/categories/element-ui/"/>
    
    
      <category term="element ui" scheme="http://wangyuanjun.cn/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>webpack引入jquery以及插件的方法(如ztree)</title>
    <link href="http://wangyuanjun.cn/2017/12/06/webpack%E5%BC%95%E5%85%A5jquery%E4%BB%A5%E5%8F%8A%E6%8F%92%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95-%E5%A6%82ztree/"/>
    <id>http://wangyuanjun.cn/2017/12/06/webpack引入jquery以及插件的方法-如ztree/</id>
    <published>2017-12-06T15:27:16.000Z</published>
    <updated>2017-12-18T15:07:15.350Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,使用webpack构建vue-cli全家桶<br>在项目中需要用到树插件，但是我觉得element ui 自带的树组件不好用，最主要的问题就是后台返回到前台的数据用到递归，不太好做，所以想到了用ztree树插件来做。</p>
<p>安装 ztree (会自动下载依赖的 jquery ，所以不用下 jquery )</p>
<pre><code>npm install ztree --save-dev
</code></pre><p>在需要的地方引入资源</p>
<pre><code>import $ from &apos;jquery&apos;
import &apos;ztree&apos;
</code></pre><p>但是报错说ztree找不到jquery，报错如下:<br><img src="/2017/12/06/webpack引入jquery以及插件的方法-如ztree/webpack引入插件问题.png" alt="webpack引入插件问题"></p>
<p>配置jquery<br>由于 ztree 依赖于 jQuery，所以在代码中 import jQuery from ‘jquery’ 是不够的，这只是解决了自己代码对 jQuery 的依赖，在此处使用了webpack.ProvidePlugin</p>
<p>解决方案：<br><img src="/2017/12/06/webpack引入jquery以及插件的方法-如ztree/解决webpack引入插件问题.png" alt="解决webpack引入插件问题"><br>在 webpack.base.conf.js 头部添加</p>
<pre><code>var webpack = require(&apos;webpack&apos;)
</code></pre><p>在 resolve 后边添加</p>
<pre><code>plugins: [
    new webpack.ProvidePlugin({
          $: &quot;jquery&quot;,
          jQuery: &quot;jquery&quot;,
          &quot;window.jQuery&quot;: &quot;jquery&quot;
    })
] 
</code></pre><p>引入ztree<br>在 main.js 中，加入如下代码</p>
<pre><code>import &apos;ztree/css/zTreeStyle/zTreeStyle.css&apos;
import &apos;ztree&apos;
</code></pre><p>项目效果:<br><img src="/2017/12/06/webpack引入jquery以及插件的方法-如ztree/webpack引入ztree插件.png" alt="webpack引入ztree插件"> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="webpack" scheme="http://wangyuanjun.cn/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangyuanjun.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>解决element ui select下拉框不回显数据问题</title>
    <link href="http://wangyuanjun.cn/2017/12/05/%E8%A7%A3%E5%86%B3element-ui-select%E4%B8%8B%E6%8B%89%E6%A1%86%E4%B8%8D%E5%9B%9E%E6%98%BE%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://wangyuanjun.cn/2017/12/05/解决element-ui-select下拉框不回显数据问题/</id>
    <published>2017-12-05T14:06:34.000Z</published>
    <updated>2017-12-18T15:00:18.635Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,使用webpack构建vue-cli全家桶<br>在项目中用到 el-select 时遇到一个问题，就是在编辑表单时，下拉框的不显示数据，前台代码如下:</p>
<pre><code>&lt;el-select v-model=&quot;commonForm.status&quot; clearable placeholder=&quot;请选择&quot;&gt;
    &lt;el-option v-for=&quot;item in items&quot; :key=&quot;item.id&quot; :label=&quot;item.text&quot; :value=&quot;item.id&quot; &gt;&lt;/el-option&gt;
&lt;/el-select&gt; 
</code></pre><p>在浏览器中查看列表返回的数据:<br><img src="/2017/12/05/解决element-ui-select下拉框不回显数据问题/el-select下拉不显示数据.png" alt="el-select下拉不显示数据"></p>
<p>在浏览器中查看下拉框数据源的数据:<br><img src="/2017/12/05/解决element-ui-select下拉框不回显数据问题/el-select下拉不显示数据1.png" alt="el-select下拉不显示数据1"></p>
<p>发现select下拉的id和v-model里边的id类型不一致，修改后台下拉框数据源返回类型，下拉框显示数据成功。<br><img src="/2017/12/05/解决element-ui-select下拉框不回显数据问题/el-select下拉不显示数据2.png" alt="el-select下拉不显示数据2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="element ui" scheme="http://wangyuanjun.cn/categories/element-ui/"/>
    
    
      <category term="element ui" scheme="http://wangyuanjun.cn/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>解决SpringMVC接收不到axios发送post请求的数据问题</title>
    <link href="http://wangyuanjun.cn/2017/12/04/%E8%A7%A3%E5%86%B3SpringMVC%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%88%B0axios%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E7%9A%84%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://wangyuanjun.cn/2017/12/04/解决SpringMVC接收不到axios发送post请求的数据问题/</id>
    <published>2017-12-04T13:10:03.000Z</published>
    <updated>2017-12-18T14:55:23.795Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,使用webpack构建vue-cli全家桶<br>在项目中需要用到axios与后端接口交互的时候，使用POST请求时，后台接收不到前台传的数据<br>js代码如下:</p>
<pre><code>export const addDataGroup = params =&gt; { return axios.post(`/remote/dataGroup/add`, params ); };
</code></pre><p>请求的数据是:</p>
<p><img src="/2017/12/04/解决SpringMVC接收不到axios发送post请求的数据问题/axios请求post的数据.png" alt="axios请求post的数据.png"></p>
<p>后台代码代码如下:<br><img src="/2017/12/04/解决SpringMVC接收不到axios发送post请求的数据问题/axios请求post接收不到数据.png" alt="axios请求post接收不到数据"></p>
<p>解决如下:<br>方法一 ：在项目中安装qs库作为格式化的依赖： </p>
<pre><code>npm install qs --save-dev 

修改js代码:

export const addDataGroup = params =&gt; { return axios.post(`/remote/dataGroup/add`, qs.stringify(params) ); };
</code></pre><p>方法二：如果不想修改前端代码的话，需要对后台的代码做修改：<br>通过翻看axios的文档得知：在axios使用Post发送数据时，默认是直接把json放到请求体中提交到后端的，而后端获取数据的方式有两种，一种是@RequestParam（通过字符串中解析出参数）,另一种是@ResponseBody（从请求体中取参数），很显然，我们的后端用了第一种方式。</p>
<p>参考文档：<a href="http://www.jzdlink.com/studynotes/201709141385.html" target="_blank" rel="external">http://www.jzdlink.com/studynotes/201709141385.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="axios" scheme="http://wangyuanjun.cn/categories/axios/"/>
    
    
      <category term="axios" scheme="http://wangyuanjun.cn/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>在vue中使用axios跨域访问数据，用proxyTable解决跨域问题</title>
    <link href="http://wangyuanjun.cn/2017/12/04/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8axios%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%94%A8proxyTable%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://wangyuanjun.cn/2017/12/04/在vue中使用axios跨域访问数据，用proxyTable解决跨域问题/</id>
    <published>2017-12-04T13:04:58.000Z</published>
    <updated>2017-12-18T14:52:21.129Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,使用webpack构建vue-cli全家桶<br>在项目中需要用到axios与后端接口交互的时候，遇到了跨域的问题，浏览器报错如下:</p>
<p><img src="/2017/12/04/在vue中使用axios跨域访问数据，用proxyTable解决跨域问题/axios跨域报错.png" alt="axios跨域报错"></p>
<p><img src="/2017/12/04/在vue中使用axios跨域访问数据，用proxyTable解决跨域问题/axios跨域返回数据.png" alt="axios跨域返回数据"></p>
<p>能看到是有数据数据返回到前台的，说明前台没有接收到</p>
<p>解决方法:</p>
<p>进入你的vue项目下 -&gt; config -&gt; index.js，里面的dev对象下有一个proxyTable的属性，这个参数主要是一个地址映射表，可以帮助我们将复杂的url简化。</p>
<p><img src="/2017/12/04/在vue中使用axios跨域访问数据，用proxyTable解决跨域问题/axios解决跨域.png" alt="axios解决跨域"></p>
<p>如果请求的地址是 <a href="http://127.0.0.1:8081/remote/1" target="_blank" rel="external">http://127.0.0.1:8081/remote/1</a> ，使用proxyTable配置，请求的地址变为 /remote/1。在proxyTable中有个参数是changeOrigin，如果设置为true,那么本地会虚拟一个服务端接收你的请求并代你发送该请求，这样就不会有跨域问题了，当然这只适用于开发环境。</p>
<p>参考文档：<a href="https://vuejs-templates.github.io/webpack/proxy.html" target="_blank" rel="external">https://vuejs-templates.github.io/webpack/proxy.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="axios" scheme="http://wangyuanjun.cn/categories/axios/"/>
    
    
      <category term="axios" scheme="http://wangyuanjun.cn/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>使用webpack构建vue-cli项目,写scss脚本语言报错</title>
    <link href="http://wangyuanjun.cn/2017/11/28/%E4%BD%BF%E7%94%A8webpack%E6%9E%84%E5%BB%BAvue-cli%E9%A1%B9%E7%9B%AE-%E5%86%99scss%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E6%8A%A5%E9%94%99/"/>
    <id>http://wangyuanjun.cn/2017/11/28/使用webpack构建vue-cli项目-写scss脚本语言报错/</id>
    <published>2017-11-28T06:44:20.000Z</published>
    <updated>2017-12-18T01:52:29.277Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,但是我在使用webpack构建vue项目的时候，使用scss脚本语言是报错,错误如下:</p>
<pre><code>error  in ./src/components/home.vue

Syntax Error: Unclosed block


 @ ./node_modules/vue-style-loader!./node_modules/css-loader?{&quot;sourceMap&quot;:false}!./node_modules/vue-loader/lib/style-compiler?{&quot;vue&quot;:true,&quot;id&quot;:&quot;data-v-7cbbe74f&quot;,&quot;scoped&quot;:false,&quot;hasInlineConfig&quot;:false}!./node_modules/vue-loader/lib/selector.js?type=styles&amp;index=0&amp;bustCache!./src/components/home.vue 4:14-317 13:3-17:5 14:22-325
 @ ./src/components/home.vue
 @ ./src/router/index.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://localhost:8080 webpack/hot/dev-server ./src/main.js
</code></pre><p>后来上网查询，如果你需要使用sass/scss定义样式，那么为了能正常编译，还需要做如下配置：　</p>
<pre><code>//因为sass-loader依赖于node-sass，所以还要安装node-sass
npm install --save-dev node-sass
//在项目下，运行下列命令行
npm install --save-dev scss-loader
npm install --save-dev sass-loader
</code></pre><p>因为资源是到国外下载的，如果长时间未响应或者报错，可以试用淘宝镜像</p>
<pre><code>npm install --save node-sass --registry=https://registry.npm.taobao.org --disturl=https://npm.taobao.org/dist --sass-binary-site=http://npm.taobao.org/mirrors/node-sass
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="webpack" scheme="http://wangyuanjun.cn/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangyuanjun.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Springboot RedisTemplate 报No qualifying bean of type... 不能按类型装配注入</title>
    <link href="http://wangyuanjun.cn/2017/11/23/Springboot-RedisTemplate-%E6%8A%A5No-qualifying-bean-of-type-%E4%B8%8D%E8%83%BD%E6%8C%89%E7%B1%BB%E5%9E%8B%E8%A3%85%E9%85%8D%E6%B3%A8%E5%85%A5/"/>
    <id>http://wangyuanjun.cn/2017/11/23/Springboot-RedisTemplate-报No-qualifying-bean-of-type-不能按类型装配注入/</id>
    <published>2017-11-23T09:40:09.000Z</published>
    <updated>2017-12-18T01:52:00.255Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>在项目中与redis集成，使用的依赖是:</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;    
</code></pre><p>在Controller中使用如下:</p>
<pre><code>@Autowired
private RedisTemplate&lt;String, DataGroup&gt; redisTemplate;
</code></pre><p>项目启动报错如下:</p>
<pre><code>Description:

Field redisTemplate in com.wyj.controller.data.DataGroupController required a bean of type &apos;org.springframework.data.redis.core.RedisTemplate&apos; that could not be found.
    - Bean method &apos;redisTemplate&apos; in &apos;RedisAutoConfiguration.RedisConfiguration&apos; not loaded because @ConditionalOnMissingBean (names: redisTemplate; SearchStrategy: all) found bean &apos;redisTemplate&apos;


Action:

Consider revisiting the conditions above or defining a bean of type &apos;org.springframework.data.redis.core.RedisTemplate&apos; in your configuration.

2017-11-23 17:36:38.299 ERROR 5784 --- [           main] o.s.test.context.TestContextManager      : Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener@3b2cf7ab] to prepare test instance [com.wyj.WyjSpringbootApplicationTests@6cc8adff]

java.lang.IllegalStateException: Failed to load ApplicationContext
    at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:189) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:131) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.12.jar:4.12]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [junit-4.12.jar:4.12]
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [junit-4.12.jar:4.12]
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [junit-4.12.jar:4.12]
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [junit-4.12.jar:4.12]
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [junit-4.12.jar:4.12]
    at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283) [surefire-junit4-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173) [surefire-junit4-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) [surefire-junit4-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128) [surefire-junit4-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) [surefire-booter-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) [surefire-booter-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) [surefire-booter-2.18.1.jar:2.18.1]
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;dataGroupController&apos;: Unsatisfied dependency expressed through field &apos;redisTemplate&apos;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &apos;org.springframework.data.redis.core.RedisTemplate&lt;java.lang.String, com.wyj.entity.data.DataGroup&gt;&apos; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:588) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) ~[spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) ~[spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) ~[spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:120) ~[spring-boot-test-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    ... 26 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &apos;org.springframework.data.redis.core.RedisTemplate&lt;java.lang.String, com.wyj.entity.data.DataGroup&gt;&apos; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1493) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1104) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    ... 44 common frames omitted    
</code></pre><p>苦思冥想多时，上网查阅资料，看springboot文档，结果如下</p>
<pre><code>If you add a @Bean of your own of any of the auto-configured types it will replace the default (except in the case of RedisTemplate the exclusion is based on the bean name ‘redisTemplate’ not its type). 
</code></pre><p>将代码改成:</p>
<pre><code>@Resource 
private RedisTemplate&lt;String, DataGroup&gt; redisTemplate;        
</code></pre><p>项目启动不报错，完美解决!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wa
    
    </summary>
    
      <category term="SpringBoot" scheme="http://wangyuanjun.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://wangyuanjun.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC中使用aop注解无效的问题</title>
    <link href="http://wangyuanjun.cn/2017/09/28/SpringMVC%E4%B8%AD%E4%BD%BF%E7%94%A8aop%E6%B3%A8%E8%A7%A3%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://wangyuanjun.cn/2017/09/28/SpringMVC中使用aop注解无效的问题/</id>
    <published>2017-09-28T06:47:46.000Z</published>
    <updated>2017-12-18T01:50:02.871Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目地址: <a href="https://github.com/wangyuanjun008/wyj-parent.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-parent.git</a><br>写日志注解完，进行测试时，发现日志注解没有生效，代码如下:</p>
<p>定义注解:</p>
<pre><code>@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface SysLog {

    String action() default &quot;&quot;;//动作

}    
</code></pre><p>切面:</p>
<pre><code>@Aspect
@Component
public class SysLogAspect {

    @Autowired
    private SysLogService sysLogService;

    @Pointcut(&quot;@annotation(com.wyj.annotation.SysLog)&quot;)
    public void pointCut(){}

    @Around(&quot;pointCut()&quot;)
    public Object aroud(ProceedingJoinPoint joinPoint) throws Throwable{

        // 开始时间
        long beginTime = System.currentTimeMillis();

        //执行目标方法
        Object result = joinPoint.proceed();

        //执行时长(毫秒)
        long time = System.currentTimeMillis() - beginTime;

        //保存日志
        saveSysLog(joinPoint, time);
        return result;
    }
}
</code></pre><p>applicationContext.xml 配置:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;   
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd   
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;&gt;

    &lt;bean id=&quot;propertyConfigurer&quot;
        class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;
        &lt;property name=&quot;locations&quot;&gt;
            &lt;list&gt;
                &lt;value&gt;classpath:jdbc.properties&lt;/value&gt;
            &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;

    &lt;context:annotation-config /&gt;

    &lt;context:component-scan base-package=&quot;com.wyj&quot; use-default-filters=&quot;false&quot;&gt;
        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;
        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.web.bind.annotation.ControllerAdvice&quot; /&gt;
    &lt;/context:component-scan&gt;

    &lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot; /&gt;
&lt;/beans&gt;
</code></pre><p>controller代码:</p>
<pre><code>@Controller
@RequestMapping(value = &quot;/user&quot;)
public class UserController {
    private Logger logger = LoggerFactory.getLogger(this.getClass());
    @Autowired
    private UserService userService;

    @SysLog(action=&quot;新增/编辑用户&quot;)
    @ResponseBody
    @RequestMapping(value = &quot;/add&quot;, method = RequestMethod.POST)
    public Retval save(User user) {
        Retval retval = Retval.newInstance();
        try {
            if (user.getUserId() == null) {
                userService.saveUser(user);
            } else {
                userService.updateUser(user);
            }
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
        return retval;
    }
}
</code></pre><p>和别人讨论了下，大致是Spring上下文的问题<br>我的AOP配置是这样的：AOP命名空间和<aop:aspectj-autoproxy proxy-target-class="true />这两个都配在了ApplicationContext.xml里面了，而不是SpringMVC框架自己约定的配置文件中（我这个项目里面，这个配置文件叫做springmvc-servlet.xml），正因为这样，出问题了。后来，我把AOP命名空间和<aop:aspectj-autoproxy  proxy-target-class=" true="">挪到SpringMVC自己的配置文件里面，AOP就生效了。</aop:aspectj-autoproxy></p>
<p>代码如下:<br>springmvc-servlet.xml:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
                    http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd&quot;
    default-lazy-init=&quot;true&quot;&gt;

    &lt;mvc:annotation-driven /&gt;

    &lt;mvc:annotation-driven
        content-negotiation-manager=&quot;contentNegotiationManager&quot;&gt;
        &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;
            &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;
                &lt;constructor-arg value=&quot;UTF-8&quot; /&gt;
            &lt;/bean&gt;
            &lt;bean
                class=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;
                &lt;property name=&quot;prettyPrint&quot; value=&quot;true&quot; /&gt;
            &lt;/bean&gt;
        &lt;/mvc:message-converters&gt;
    &lt;/mvc:annotation-driven&gt;

    &lt;bean id=&quot;contentNegotiationManager&quot;
        class=&quot;org.springframework.web.accept.ContentNegotiationManagerFactoryBean&quot;&gt;
        &lt;property name=&quot;ignoreAcceptHeader&quot; value=&quot;true&quot; /&gt;
        &lt;property name=&quot;defaultContentType&quot; value=&quot;application/json&quot; /&gt;
        &lt;property name=&quot;mediaTypes&quot;&gt;
            &lt;value&gt;
                json=application/json
                xml=application/xml
            &lt;/value&gt;
        &lt;/property&gt;
    &lt;/bean&gt;

    &lt;context:component-scan base-package=&quot;com.wyj&quot;&gt;&lt;/context:component-scan&gt;

    &lt;bean id=&quot;viewResolver&quot;
        class=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&gt;
        &lt;property name=&quot;viewClass&quot;
            value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;
        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot; /&gt;
        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;
    &lt;/bean&gt;

    &lt;mvc:resources location=&quot;/resources/**&quot; mapping=&quot;/resources/**&quot; /&gt;

    &lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot; /&gt;
&lt;/beans&gt;
</code></pre><p>另外以上所述的是对controller进行切面时的配置，如果是对service进行切面，那么</p>
<p><context:component-scan base-package="com.wyj"></context:component-scan></p>
<aop:aspectj-autoproxy>

<p>这两个注释就要用在ApplicationContext.xml里面了，注意此时不要开启aop的cglib代理模式。</p>
<p>解释：</p>
<p>1.SpringMVC这个框架简化了很多的配置，但是请注意@Controller和@Service都是SpringMVC框架包里面的，也就是说，这些类的实例化以及注入也是由SpringMVC这个框架完成的（确切的来说是这个框架自己有的上下文的IoC容器完成的）。</p>
<p>2.而对AOP和事务的支持是Spring框架本身完成的，是Spring框架的应用上下文所扫描并处理的。</p>
<p>从1.2可以得出一个结论，如果SpringMVC和Spring本身用的是一个应用上下文，一个Ioc容器，那随便你的<aop:aspectj-autoproxy>和命名空间配置在哪里，无论是Spring的ApplicationContext.xml还是SpringMVC的springmvc-servlet.xml里面，反正都是一个容器，怎么扫描，怎么处理都能找到。</aop:aspectj-autoproxy></p>
<p>但关键的是以上假设不成立，总的来说SpringMVC的应用上下文的 “ 父 ” 上下文才是Spring的应用上下文。那么这个也就是说Spring的应用上下文初始化完成的时候，它开始扫描到底哪些Bean用了AspectJ的注解，哪些用了Transactional的注解，但是利用SpringMVC注解配置的这些Bean它是找不到的，因为用了这些注解的Bean还没有被实例化甚至是还没有被装载，为什么呢？因为管理这些bean的SpringMVC的上下文可能还没有完成初始化。OK，既然Spring的上下文找不到到底哪些Bean应用了注解，那他自然也没有办法给这些Bean提供声明式AOP和事务的支持了。</p>
<p>至于为什么SpringMVC的应用上下文的 “ 父 ” 上下文才是Spring的应用上下文，这里有大牛为我们详解：<a href="http://blog.csdn.net/c289054531/article/details/9196149" target="_blank" rel="external">http://blog.csdn.net/c289054531/article/details/9196149</a></p>
<p>另外，Spring中的切面类固然要用@Aspect标注，但也不要忘了用@Componet标注，这样才能被注册到容器中</p>
</aop:aspectj-autoproxy>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-parent.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wangyuanjun00
    
    </summary>
    
      <category term="spring" scheme="http://wangyuanjun.cn/categories/spring/"/>
    
    
      <category term="SpringMVC" scheme="http://wangyuanjun.cn/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring配置shiro时,自定义Realm中属性无法使用注解注入解决办法</title>
    <link href="http://wangyuanjun.cn/2017/09/21/%E4%BD%BF%E7%94%A8Spring%E9%85%8D%E7%BD%AEshiro%E6%97%B6-%E8%87%AA%E5%AE%9A%E4%B9%89Realm%E4%B8%AD%E5%B1%9E%E6%80%A7%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%B3%A8%E5%85%A5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://wangyuanjun.cn/2017/09/21/使用Spring配置shiro时-自定义Realm中属性无法使用注解注入解决办法/</id>
    <published>2017-09-21T15:30:17.000Z</published>
    <updated>2017-12-18T15:04:30.739Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址: <a href="https://github.com/wangyuanjun008/wyj-parent.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-parent.github.com</a><br>最近在使用shiro框架与系统集成的时候，启动报错如下:</p>
<pre><code>org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;shiroFilter&apos; defined in class path resource [spring-context-shiro.xml]: Cannot resolve reference to bean &apos;securityManager&apos; while setting bean property &apos;securityManager&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;securityManager&apos; defined in class path resource [spring-context-shiro.xml]: Cannot resolve reference to bean &apos;userRealm&apos; while setting bean property &apos;realm&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userRealm&apos;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.wyj.service.system.UserService com.wyj.shiro.realm.UserRealm.userService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.wyj.service.system.UserService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1456) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1197) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:232) ~[spring-context-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:618) ~[spring-context-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:467) ~[spring-context-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403) ~[spring-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) ~[spring-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) [spring-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]
at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4729) [catalina.jar:na]
at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5167) [catalina.jar:na]
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:na]
at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725) [catalina.jar:na]
at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701) [catalina.jar:na]
at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717) [catalina.jar:na]
at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:586) [catalina.jar:8.0.26.B]
at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1750) [catalina.jar:8.0.26.B]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_77]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_77]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_77]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_77]
at java.lang.Thread.run(Thread.java:745) [na:1.8.0_77]
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;securityManager&apos; defined in class path resource [spring-context-shiro.xml]: Cannot resolve reference to bean &apos;userRealm&apos; while setting bean property &apos;realm&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userRealm&apos;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.wyj.service.system.UserService com.wyj.shiro.realm.UserRealm.userService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.wyj.service.system.UserService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1456) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1197) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:320) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    ... 28 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userRealm&apos;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.wyj.service.system.UserService com.wyj.shiro.realm.UserRealm.userService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.wyj.service.system.UserService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:320) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    ... 38 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.wyj.service.system.UserService com.wyj.shiro.realm.UserRealm.userService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.wyj.service.system.UserService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    ... 46 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.wyj.service.system.UserService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1100) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:855) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
... 48 common frames omitted
</code></pre><p>在shiro.xml的配置是:</p>
<pre><code>&lt;bean id=&quot;userRealm&quot; class=&quot;com.wyj.shiro.realm.UserRealm&quot;/&gt;
</code></pre><p>UserRealm.java的代码是:</p>
<pre><code>public class UserRealm extends AuthorizingRealm{

    @Autowired
    private UserService userService;

    @Autowired
    private RoleService roleService;

    @Autowired
    private MenuService menuService;

    /**
     * 授权(验证权限时调用)
     * 为当前登陆成功的用户授予权限和角色，已经登陆成功了
     */
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        ...
        return info;
    }

    /**
     * 认证(登录时调用)
     * 验证当前登录的用户，获取认证信息
     */
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
        ...
        return info;
    }

}
</code></pre><p>纠结了几个小时终于找到了问题所在,因为shiro的realm属于Filter,简单说就是初始化realm时,spring还未加载相关业务Bean,那么解决办法就是将springmvc的配置文件加载提前。</p>
<p>解决办法<br>打开web.xml文件</p>
<p><img src="/2017/09/21/使用Spring配置shiro时-自定义Realm中属性无法使用注解注入解决办法/shiro无法实例化bean-1.png" alt="shiro无法实例化bean-1"><br><img src="/2017/09/21/使用Spring配置shiro时-自定义Realm中属性无法使用注解注入解决办法/shiro无法实例化bean-2.png" alt="shiro无法实例化bean-2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-parent.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wangyuanjun008/
    
    </summary>
    
      <category term="shiro" scheme="http://wangyuanjun.cn/categories/shiro/"/>
    
    
      <category term="shiro" scheme="http://wangyuanjun.cn/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>树插件ztree异步加载数据与一次性加载全部数据的写法</title>
    <link href="http://wangyuanjun.cn/2017/09/18/%E6%A0%91%E6%8F%92%E4%BB%B6ztree%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%B8%80%E6%AC%A1%E6%80%A7%E5%8A%A0%E8%BD%BD%E5%85%A8%E9%83%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E5%86%99%E6%B3%95/"/>
    <id>http://wangyuanjun.cn/2017/09/18/树插件ztree异步加载数据与一次性加载全部数据的写法/</id>
    <published>2017-09-18T13:12:47.000Z</published>
    <updated>2017-12-18T01:51:32.288Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目地址: <a href="https://github.com/wangyuanjun008/wyj-parent.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-parent.github.com</a><br>用到了ztree树，给大家分享异步加载数据与一次性加载数据的写法</p>
<p>异步加载数据是为了防止大数据量而造成树卡死的情况,代码如下:<br>前台js:</p>
<pre><code>&lt;div class=&quot;col-lg-12&quot; style=&quot;height:300px; overflow:scroll;&quot;&gt;
    &lt;ul id=&quot;treeDemo&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;
&lt;/div&gt;
function setting() {
    var setting = {
        async : {
            enable : true,
            type : &quot;get&quot;,
            url : &apos;${ctx}/menu/renderTree&apos;,
            autoParam : [ &quot;id&quot;, &quot;type&quot; ]
        },
        callback : {
            onClick : zTreeOnClick
        }
    };
    return setting;
}
$.fn.zTree.init($(&quot;#treeDemo&quot;), setting(treeUrl));
</code></pre><p>后台java:</p>
<pre><code>@ResponseBody
@RequestMapping(value = &quot;/renderTree&quot;, method = RequestMethod.GET)
public List&lt;Map&lt;String, Object&gt;&gt; renderTree1(Long id, String type) {
    List&lt;Map&lt;String, Object&gt;&gt; returnList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();
    // 加载根节点
    if (StringUtils.isEmpty(id)) {
        Map&lt;String, Object&gt; root = new HashMap&lt;String, Object&gt;();

        root.put(&quot;id&quot;, 0);// 根节点的ID
        root.put(&quot;name&quot;, &quot;权限管理系统&quot;); // 根节点的名字
        root.put(&quot;isParent&quot;, true);//// 设置根节点为父节点

        // 加载一级节点
        List&lt;Map&lt;String, Object&gt;&gt; returnList1 = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();

        List&lt;Menu&gt; menus = menuService.listOneNodeMenus();
        for (Menu menu : menus) {
            Map&lt;String, Object&gt; node = new HashMap&lt;String, Object&gt;();
            node.put(&quot;id&quot;, menu.getMenuId());
            node.put(&quot;name&quot;, menu.getName());
            node.put(&quot;isParent&quot;, menuService.isSubNodeById(menu.getMenuId()));
            returnList1.add(node);
        }

        root.put(&quot;children&quot;, returnList1);
        returnList.add(root);
        return returnList;
    }

    // 加载子节点
    List&lt;Menu&gt; menus = null;
    if (id != null &amp;&amp; id &gt; 0L) {
        menus = menuService.listSubMenuByParentId(id);
        for (Menu menu : menus) {
            Map&lt;String, Object&gt; node = new HashMap&lt;String, Object&gt;();
            node.put(&quot;id&quot;, menu.getMenuId());
            node.put(&quot;name&quot;, menu.getName());
            node.put(&quot;isParent&quot;, menuService.isSubNodeById(menu.getMenuId()));
            returnList.add(node);
        }
    }
    return returnList;
}
</code></pre><p>加载全部数据:<br>前台js</p>
<pre><code>&lt;div class=&quot;col-lg-12&quot; style=&quot;height:300px; overflow:scroll;&quot;&gt;
    &lt;ul id=&quot;treeDemo&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;
&lt;/div&gt;
function setting() {
        var setting = {
            data : {
                simpleData : {
                    enable : true,
                    idKey : &quot;menuId&quot;,
                    pIdKey : &quot;parentId&quot;,
                    rootPId : null
                },
            check: {
                enable: true,
                chkStyle: &quot;checkbox&quot;,
                chkboxType: { &quot;Y&quot;: &quot;ps&quot;, &quot;N&quot;: &quot;ps&quot; }
            }
        };
        return setting;
    }
}
var jsonTree = getDataStore(&apos;${ctx}/auth/renderTree&apos;);//获得所有节点
var ztree=$.fn.zTree.init($(&quot;#treeDemo&quot;), setting(),jsonTree);
</code></pre><p>后台java:</p>
<pre><code>@ResponseBody
@RequestMapping(value = &quot;/renderTree&quot;, method = RequestMethod.GET)
public List&lt;Menu&gt; renderTree() {
    return menuService.listTree();
}
</code></pre><p>希望能对大家有所帮助!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-parent.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wangyu
    
    </summary>
    
      <category term="jquery插件" scheme="http://wangyuanjun.cn/categories/jquery%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="ztree" scheme="http://wangyuanjun.cn/tags/ztree/"/>
    
  </entry>
  
  <entry>
    <title>在java中调用存储过程</title>
    <link href="http://wangyuanjun.cn/2017/09/14/%E5%9C%A8java%E4%B8%AD%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://wangyuanjun.cn/2017/09/14/在java中调用存储过程/</id>
    <published>2017-09-14T01:57:48.000Z</published>
    <updated>2017-12-18T01:49:37.303Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个需要调用存储过程的功能，大多数的写法是:</p>
<pre><code>Connection conn=null;
    CallableStatement csmt=null;
    try {
        conn=JDBCUtils.getConnection();
        conn.setAutoCommit(false);
        csmt=conn.prepareCall(&quot;call prc_1(?,?,?)&quot;);
        csmt.setInt(1,80);
        csmt.setString(2,&quot;ioc&quot;);
        csmt.setString(3,&quot;fhp&quot;);
        csmt.execute();
        conn.commit();
        System.out.println(&quot;success insert data&quot;);
    } catch (SQLException e) {
        e.printStackTrace();
}
</code></pre><p>但是在运用的过程是没有效果的，后来找了另外的方法，使用了jpa注解，代码如下:</p>
<ol>
<li>存储过程需要依赖在实体上，在实体上加上@NamedStoredProcedureQueries注解，@NamedStoredProcedureQuery中name为java的方法名，procedureName为存储过程的名字，@StoredProcedureParameter中mode代表入参，name是参数名，type是参数类型</li>
</ol>
<pre><code>@Entity
Table(name = &quot;d_cp_delivery&quot;)
@NamedStoredProcedureQueries({ @NamedStoredProcedureQuery(name = &quot;closePurchaseorder&quot;, procedureName = &quot;SRMANLI.closePurchaseorder&quot;, parameters = { @StoredProcedureParameter(mode = ParameterMode.IN, name = &quot;i_deliveryid&quot;, type = Long.class) }) })    
</code></pre><p>2.调用方法如下</p>
<pre><code>//java代码
EntityManager em;

@Override
@PersistenceContext(unitName = &quot;srment&quot;)
public void setEntityManager(EntityManager em) {
    super.setEntityManager(em);
    this.em = em;
}

@Override
public void closePurchaseorder(Long deliveryId) {
    Query qry = em.createNativeQuery(&quot;{call srmanli.closePurchaseorder(?1)}&quot;);
    qry.setParameter(1, deliveryId);
    qry.executeUpdate();
    em.clear();
}

//存储过程
  procedure closePurchaseorder(i_deliveryid in number) is
v_PurchaseorderDtlNum number; --
v_reqtime             date := sysdate; --请求时间
v_err_msg             clob; --异常

begin

end;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个需要调用存储过程的功能，大多数的写法是:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connection conn=null;
    CallableStatement csmt=null;
    try {
        conn=JDBCUtils.getConn
    
    </summary>
    
      <category term="java" scheme="http://wangyuanjun.cn/categories/java/"/>
    
    
      <category term="java" scheme="http://wangyuanjun.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用select2下拉框ajax加载数据时,编辑赋值的方法</title>
    <link href="http://wangyuanjun.cn/2017/09/14/%E4%BD%BF%E7%94%A8select2%E4%B8%8B%E6%8B%89%E6%A1%86ajax%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E6%97%B6-%E7%BC%96%E8%BE%91%E8%B5%8B%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://wangyuanjun.cn/2017/09/14/使用select2下拉框ajax加载数据时-编辑赋值的方法/</id>
    <published>2017-09-13T16:19:44.000Z</published>
    <updated>2017-12-18T01:51:14.168Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目地址: <a href="https://github.com/wangyuanjun008/wyj-parent.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-parent.github.com</a><br>使用bootstrap select2下拉框插件，ajax从后台加载数据，保存编辑后，不知道怎么为下拉框赋值，下拉框代码如下:</p>
<pre><code>&lt;label class=&quot;col-sm-1 control-label&quot;&gt;使用状态:&lt;/label&gt;
&lt;select id=&quot;sel_status&quot; name=&quot;status&quot; class=&quot;col-sm-3 form-control select2&quot;&gt;&lt;/select&gt;

$(&quot;#sel_status&quot;).select2({
    placeholder : &quot;--请选择--&quot;,
    dropdownParent : $(&quot;#myModal&quot;),
    allowClear : true,
    width : 150,
    ajax : {
        url : &apos;${ctx}/dataDict/getData?groupCode=&apos;+&apos;yesOrNo&apos;,
        dataType : &apos;json&apos;,
        type : &apos;get&apos;,
        data: function (params) {
            return {
                q: params.term, // search term 请求参数
                page: params.page
            };
        },
        processResults: function (data, params) {
            params.page = params.page || 1;
            return {
                results: data,//itemList
                pagination: {
                    more: (params.page * 30) &lt; data.total_count
                }
            };
        },
        cache: true
    }
 });
</code></pre><p>通过查询api知道，在select4.0之后可以使用 $(“select”).val(“id”).trigger(“change”);为下拉框赋值<br>你会发现下拉框中的数据是点击之后才会加载数据的，使用如上方法 ‘id’是未知的，原因是在编辑的时候下拉框的数据还没有加载出来</p>
<p>解决方法如下:</p>
<pre><code>function getDataByGroupCode(groupCode){
    var dataStore;
    $.ajax({
        dataType : &apos;json&apos;,
        type : &apos;get&apos;,
        url : model.dataURL+groupCode,
        async : false,
        success: function(data){
            dataStore=data;
        }
     });
    return dataStore;
}    
var dataStore = getDataByGroupCode(&apos;yesOrNo&apos;);

$(&quot;#sel_status&quot;).select2({
    placeholder : &quot;--请选择--&quot;,
    dropdownParent : $(&quot;#myModal&quot;),
    allowClear : true,
    width : 150,
    minimumResultsForSearch: -1,
    data : dataStore
});
</code></pre><p>在页面加载的时候就加载下拉框数据，在编辑时就能为其赋值，问题解决!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-parent.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wangyu
    
    </summary>
    
      <category term="jquery插件" scheme="http://wangyuanjun.cn/categories/jquery%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="select2" scheme="http://wangyuanjun.cn/tags/select2/"/>
    
  </entry>
  
  <entry>
    <title>mybatis使用PageHelper插件报错Error creating bean with name sqlSessionFactory defined in class path resource [spring-mybatis.xml]</title>
    <link href="http://wangyuanjun.cn/2017/08/17/mybatis%E4%BD%BF%E7%94%A8PageHelper%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99Error-creating-bean-with-name-sqlSessionFactory-defined-in-class-path-resource-spring-mybatis-xml/"/>
    <id>http://wangyuanjun.cn/2017/08/17/mybatis使用PageHelper插件报错Error-creating-bean-with-name-sqlSessionFactory-defined-in-class-path-resource-spring-mybatis-xml/</id>
    <published>2017-08-17T13:23:57.000Z</published>
    <updated>2017-12-18T01:51:46.919Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目地址: <a href="https://github.com/wangyuanjun008/wyj-parent.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-parent.github.com</a><br>在项目中使用mybatis的分页插件:PageHelper，整合spring后在启动后报错，错误如下:</p>
<pre><code>2017-08-17 21:20:16.618 [ContainerBackgroundProcessor[StandardEngine[Catalina]]] ERROR org.springframework.web.context.ContextLoader -
                Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;sqlSessionFactory&apos; defined in class path resource [spring-mybatis.xml]: Invocation of init method failed; nested exception is org.springframework.core.NestedIOException: Failed to parse config resource: class path resource [mybatis-config.xml]; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.lang.ClassCastException: com.github.pagehelper.PageHelper cannot be cast to org.apache.ibatis.plugin.Interceptor
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1553) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:681) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760) ~[spring-context-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482) ~[spring-context-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403) ~[spring-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) ~[spring-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) [spring-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4729) [catalina.jar:na]
    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5167) [catalina.jar:na]
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:na]
    at org.apache.catalina.core.StandardContext.reload(StandardContext.java:3746) [catalina.jar:na]
    at org.apache.catalina.loader.WebappLoader.backgroundProcess(WebappLoader.java:292) [catalina.jar:na]
    at org.apache.catalina.core.StandardContext.backgroundProcess(StandardContext.java:5528) [catalina.jar:na]
    at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1377) [catalina.jar:na]
    at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1381) [catalina.jar:na]
    at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1381) [catalina.jar:na]
    at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1349) [catalina.jar:na]
    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_77]
Caused by: org.springframework.core.NestedIOException: Failed to parse config resource: class path resource [mybatis-config.xml]; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.lang.ClassCastException: com.github.pagehelper.PageHelper cannot be cast to org.apache.ibatis.plugin.Interceptor
    at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:434) ~[mybatis-spring-1.2.2.jar:1.2.2]
    at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:340) ~[mybatis-spring-1.2.2.jar:1.2.2]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1612) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1549) ~[spring-beans-4.0.2.RELEASE.jar:4.0.2.RELEASE]
    ... 23 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.lang.ClassCastException: com.github.pagehelper.PageHelper cannot be cast to org.apache.ibatis.plugin.Interceptor
    at org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration(XMLConfigBuilder.java:109) ~[mybatis-3.2.6.jar:3.2.6]
    at org.apache.ibatis.builder.xml.XMLConfigBuilder.parse(XMLConfigBuilder.java:92) ~[mybatis-3.2.6.jar:3.2.6]
    at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:428) ~[mybatis-spring-1.2.2.jar:1.2.2]
    ... 26 common frames omitted
Caused by: java.lang.ClassCastException: com.github.pagehelper.PageHelper cannot be cast to org.apache.ibatis.plugin.Interceptor
    at org.apache.ibatis.builder.xml.XMLConfigBuilder.pluginElement(XMLConfigBuilder.java:142) ~[mybatis-3.2.6.jar:3.2.6]
    at org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration(XMLConfigBuilder.java:100) ~[mybatis-3.2.6.jar:3.2.6]
    ... 28 common frames omitted
</code></pre><p>spring与mybaits集成的配置文件 spring-mybaits.xml</p>
<pre><code>&lt;!-- =======================================================================引入配置文件============================================ --&gt;
&lt;bean id=&quot;propertyConfigurer&quot;
    class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;
    &lt;property name=&quot;locations&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;classpath:jdbc.properties&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;!-- =======================================================================配置数据源============================================ --&gt;
&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;${driver}&quot; /&gt;
    &lt;property name=&quot;url&quot; value=&quot;${url}&quot; /&gt;
    &lt;property name=&quot;username&quot; value=&quot;${username}&quot; /&gt;
    &lt;property name=&quot;password&quot; value=&quot;${password}&quot; /&gt;
    &lt;!-- 初始化连接大小 --&gt;
    &lt;property name=&quot;initialSize&quot; value=&quot;${initialSize}&quot;&gt;&lt;/property&gt;
    &lt;!-- 连接池最大数量 --&gt;
    &lt;property name=&quot;maxActive&quot; value=&quot;${maxActive}&quot;&gt;&lt;/property&gt;
    &lt;!-- 连接池最大空闲 --&gt;
    &lt;property name=&quot;maxIdle&quot; value=&quot;${maxIdle}&quot;&gt;&lt;/property&gt;
    &lt;!-- 连接池最小空闲 --&gt;
    &lt;property name=&quot;minIdle&quot; value=&quot;${minIdle}&quot;&gt;&lt;/property&gt;
    &lt;!-- 获取连接最大等待时间 --&gt;
    &lt;property name=&quot;maxWait&quot; value=&quot;${maxWait}&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!-- ================================================配置sessionfactory============================================================================== --&gt;
&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
    &lt;!-- 自动扫描mapping.xml文件 --&gt;
    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/wyj/mapping/auth/*.xml&quot;&gt;&lt;/property&gt;
    &lt;!-- 引入配置文件 --&gt;
    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot; /&gt; 
&lt;/bean&gt;


&lt;!-- =================================================装配dao接口================================================================================== --&gt;
&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
    &lt;property name=&quot;basePackage&quot; value=&quot;com.wyj.dao.auth&quot; /&gt;&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;
    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- =================================================声明式事务管理================================================================================== --&gt;
&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;
&lt;bean id=&quot;transactionManager&quot;
    class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
&lt;/bean&gt;
</code></pre><p>mybatis-config.xml 配置文件(分页插件)</p>
<pre><code>&lt;configuration&gt;  
    &lt;plugins&gt;  
        &lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;  
        &lt;plugin interceptor=&quot;com.github.pagehelper.PageHelper&quot;&gt;  
            &lt;!-- 设置数据库类型 Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库 --&gt;  
            &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot; /&gt;  
            &lt;!-- 该参数默认为false --&gt;  
            &lt;!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 --&gt;  
            &lt;!-- 和startPage中的pageNum效果一样--&gt;  
            &lt;property name=&quot;offsetAsPageNum&quot; value=&quot;true&quot;/&gt;  
            &lt;!-- 该参数默认为false --&gt;  
            &lt;!-- 设置为true时，使用RowBounds分页会进行count查询 --&gt;  
            &lt;property name=&quot;rowBoundsWithCount&quot; value=&quot;true&quot;/&gt;  
            &lt;!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 --&gt;  
            &lt;!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）--&gt;  
            &lt;property name=&quot;pageSizeZero&quot; value=&quot;true&quot;/&gt;  
            &lt;!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 --&gt;  
            &lt;!-- 启用合理化时，如果pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页 --&gt;  
            &lt;!-- 禁用合理化时，如果pageNum&lt;1或pageNum&gt;pages会返回空数据 --&gt;  
            &lt;property name=&quot;reasonable&quot; value=&quot;true&quot;/&gt;  
            &lt;!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 --&gt;  
            &lt;!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 --&gt;  
            &lt;!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 --&gt;  
            &lt;!-- 不理解该含义的前提下，不要随便复制该配置 --&gt;  
            &lt;property name=&quot;params&quot; value=&quot;pageNum=start;pageSize=limit;&quot;/&gt;  
            &lt;!-- 支持通过Mapper接口参数来传递分页参数 --&gt;  
            &lt;property name=&quot;supportMethodsArguments&quot; value=&quot;true&quot;/&gt;  
            &lt;!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page --&gt;  
            &lt;property name=&quot;returnPageInfo&quot; value=&quot;check&quot;/&gt;  
        &lt;/plugin&gt;  
    &lt;/plugins&gt;  
&lt;/configuration&gt;
</code></pre><p>经过查找，原来是与mybaitis的jar包版本相差过大，项目运用的是4.1.1的版本，换上5.0.4的版本，重新运行项目，不再抛错。</p>
<pre><code>修改spring-mybatis.xml配置文件如下
修改 sqlSessionFactory

    &lt;!-- ================================================配置sessionfactory============================================================================== --&gt;
&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
    &lt;!-- 自动扫描mapping.xml文件 --&gt;
    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/wyj/mapping/auth/*.xml&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;plugins&quot;&gt;
        &lt;array&gt;
            &lt;bean class=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;
                &lt;property name=&quot;properties&quot;&gt;
                    &lt;value&gt;
                    &lt;!-- helperDialect：有别于3.0+版本，现在必须是helperDialect，否则spring启动加载时会报错 --&gt;
                        helperDialect=mysql
                    &lt;/value&gt;
                &lt;/property&gt;
            &lt;/bean&gt;
        &lt;/array&gt;
    &lt;/property&gt;
&lt;/bean&gt;

启动不再报错!!!
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-parent.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wangyu
    
    </summary>
    
      <category term="mybatis" scheme="http://wangyuanjun.cn/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://wangyuanjun.cn/tags/mybatis/"/>
    
  </entry>
  
</feed>
