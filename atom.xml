<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>守望的稻草人</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangyuanjun.cn/"/>
  <updated>2018-01-08T06:34:41.225Z</updated>
  <id>http://wangyuanjun.cn/</id>
  
  <author>
    <name>WangYuanJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Quartz学习——Quartz简单入门Demo(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/03/Quartz%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Quartz%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8Demo-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/03/Quartz学习——Quartz简单入门Demo-二/</id>
    <published>2018-01-03T07:50:18.000Z</published>
    <updated>2018-01-08T06:34:41.225Z</updated>
    
    <content type="html"><![CDATA[<p>下面介绍Quartz入门的示例，项目地址: <font color="red" size="5" face="微软雅黑"><a href="https://github.com/wangyuanjun008/wyj-quartz-demo" target="_blank" rel="external">quartz-demo</a></font><br>由于Quartz的存储方式分为RAM和JDBC，分别对这两种进行简单的说明。并附上代码！<br>首先需要添加Quartz的依赖 ，我使用的是quartz.2.2.3版本！ </p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
    &lt;artifactId&gt;quartz&lt;/artifactId&gt;
    &lt;version&gt;2.2.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
    &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;
    &lt;version&gt;2.2.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><h2 id="RAM方式"><a href="#RAM方式" class="headerlink" title="RAM方式"></a>RAM方式</h2><p>要测试RAMdemo的代码，请先删除demo中这个quartz.properties文件，或者重命名！否则会测试不成功！<br>（1）：Job</p>
<pre><code>package com.wyj.exampleRAM;

import java.util.Date;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * RAMjob
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:03:31
 */
public class RAMJob implements Job{

    private Logger logger = LoggerFactory.getLogger(RAMJob.class);

    public void execute(JobExecutionContext arg0) throws JobExecutionException {
        logger.debug(&quot;hello world ! hello Quartz - &quot;+new Date());
    }

}
</code></pre><p>（2）：JobTest</p>
<pre><code>package com.wyj.exampleRAM;

import java.util.Date;

import org.quartz.CronScheduleBuilder;
import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * RAMtest
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:03:50
 */
public class RAMQuartzTest {

    private static Logger logger = LoggerFactory.getLogger(RAMJob.class);

    public static void main(String[] args) throws SchedulerException {
        //1.创建Scheduler的工厂
        SchedulerFactory sf = new StdSchedulerFactory();

        //2.从工厂中获取调度器实例
        Scheduler scheduler = sf.getScheduler();

        //3.创建JobDetail
        JobDetail jb = JobBuilder.newJob(RAMJob.class)
                .withDescription(&quot;this is hello job&quot;)//job的描述
                .withIdentity(&quot;helloJob&quot;, &quot;helloGroup&quot;)//job 的name和group
                .build();

         //任务运行的时间，SimpleSchedle类型触发器有效
        long time=  System.currentTimeMillis() + 3*1000L; //3秒后启动任务
        Date statTime = new Date(time);
        //4.创建Trigger
        //使用SimpleScheduleBuilder或者CronScheduleBuilder
        Trigger trigger = TriggerBuilder.newTrigger()
                            .withDescription(&quot;&quot;)
                            .withIdentity(&quot;helloTrigger&quot;, &quot;helloTriggerGroup&quot;)
                            .startAt(statTime)//默认当前时间启动
                            .withSchedule(CronScheduleBuilder.cronSchedule(&quot;0/2 * * * * ?&quot;))//两秒执行一次
                            .build();

        //5.注册任务和定时器
        scheduler.scheduleJob(jb, trigger);

        //6.启动 调度器
        scheduler.start();
        logger.debug(&quot;启动时间 ：&quot;+new Date());
    }
}
</code></pre><p>运行结果：<br>SimpleScheduleBuilder：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/SimpleRAMTest.png" alt="SimpleRAMTest"></p>
<p>CronScheduleBuilder：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/CronRAMTest.png" alt="CronRAMTest"></p>
<h2 id="JDBC方式"><a href="#JDBC方式" class="headerlink" title="JDBC方式"></a>JDBC方式</h2><p>使用jdbc方式，就要配置quartz.properties文件，并且在开始的时候在数据库中新增表！<br>我使用的数据库是mysql，数据库中表在wyj-quartz-demo项目里面有，需要的请在里面下载！<br>运行 tables_mysql.sql 这个文件。</p>
<pre><code>#配置数据源属性  
org.quartz.dataSource.qzDS.driver:com.mysql.jdbc.Driver
org.quartz.dataSource.qzDS.URL:jdbc:mysql://192.168.99.100:3306/quartz_test?useUnicode=true&amp;characterEncoding=utf-8
org.quartz.dataSource.qzDS.user:root
org.quartz.dataSource.qzDS.password:admin
org.quartz.dataSource.qzDS.maxConnections:10
</code></pre><p>（1）job</p>
<pre><code>package com.wyj.exampleJDBC;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * JdbcJob
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:04:03
 */
public class JdbcJob implements Job{

    private Logger logger = LoggerFactory.getLogger(JdbcJob.class);

    public void execute(JobExecutionContext arg0) throws JobExecutionException {

        logger.debug(&quot;MyJDBCJob is start ...&quot;);

        logger.debug(&quot;MyJDBCJob quzrtz &quot;+new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss &quot;).format(new Date()));

        logger.debug(&quot;MyJDBCJob is end ...&quot;);
    }
}
</code></pre><p>（2）jobTest</p>
<pre><code>package com.wyj.exampleJDBC;

import java.util.List;

import org.quartz.CronScheduleBuilder;
import org.quartz.CronTrigger;
import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.JobKey;
import org.quartz.Scheduler;
import org.quartz.SchedulerFactory;
import org.quartz.SimpleTrigger;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;
/**
 * JdbcJobtest
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:04:14
 */
public class QuartzJdbcTest {

    public static void main(String[] args) {
        testStartSchedule();
//        resumeJob();
    }


    /**
     *  开始一个simpleSchedule()调度
     */
    public static void testStartSchedule(){

        try {
            // 1、创建一个JobDetail实例，指定Quartz
            JobDetail jobDetail = JobBuilder.newJob(JdbcJob.class)
                    // 任务执行类
                    .withIdentity(&quot;job_1&quot;, &quot;jGroup1&quot;)// 任务名，任务组
                    .build();
            //触发器类型
//            SimpleScheduleBuilder builder = SimpleScheduleBuilder.simpleSchedule().repeatSecondlyForTotalCount(5); // 设置执行次数

            CronScheduleBuilder builder = CronScheduleBuilder.cronSchedule(&quot;0/2 * * * * ?&quot;);
            //  2、创建Trigger

            Trigger trigger = TriggerBuilder.newTrigger()
                    .withIdentity(&quot;trigger_1&quot;,&quot;triggerGroup1&quot;)
                    .withSchedule(builder)
                    .build();

            // 3、创建Scheduler
            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();
            scheduler.start();

            // 4、调度执行
            scheduler.scheduleJob(jobDetail,trigger);

            try {
                Thread.sleep(60000);
            } catch (Exception e) {
                e.printStackTrace();
            }

            //关闭调度器
            scheduler.shutdown();


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 从数据库中找到已经存在的job，并重新开户调度
     */
    public static void resumeJob(){
        try {
            SchedulerFactory schedulerFactory = new StdSchedulerFactory();
            Scheduler scheduler = schedulerFactory.getScheduler();
            JobKey jobKey = new JobKey(&quot;job1_1&quot;, &quot;jGroup1&quot;);
            List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);
            //SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?
            // 重新恢复在jGroup1组中，名为job1_1的 job的触发器运行
            if(triggers.size() &gt; 0){
                for (Trigger tg : triggers) {
                    // 根据类型判断
                    if ((tg instanceof CronTrigger) || (tg instanceof SimpleTrigger)) {
                        // 恢复job运行
                        scheduler.resumeJob(jobKey);
                    }
                }
                scheduler.start();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre><p>运行结果：<br>数据库信息：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/jdbcTest1.png" alt="jdbcTest1"></p>
<p>控制台信息：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/jdbcTest2.png" alt="jdbcTest2"></p>
<p><strong>注意</strong>:<font color="red">Cron和Simple类型，Simple类型的如果JobDetail没有设置.storeDurably(true)，则job在运行完成之后会在数据库中删除！</font></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面介绍Quartz入门的示例，项目地址: &lt;font color=&quot;red&quot; size=&quot;5&quot; face=&quot;微软雅黑&quot;&gt;&lt;a href=&quot;https://github.com/wangyuanjun008/wyj-quartz-demo&quot; target=&quot;_blank&quot; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker之创建并进入mysql容器</title>
    <link href="http://wangyuanjun.cn/2018/01/03/Docker%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%BF%9B%E5%85%A5mysql%E5%AE%B9%E5%99%A8/"/>
    <id>http://wangyuanjun.cn/2018/01/03/Docker之创建并进入mysql容器/</id>
    <published>2018-01-03T02:11:52.000Z</published>
    <updated>2018-01-03T02:39:59.678Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍docker如何创建并进入MYSQL容器。</p>
<h2 id="运行”docker-pull-mysql”获取mysql镜像"><a href="#运行”docker-pull-mysql”获取mysql镜像" class="headerlink" title="运行”docker pull mysql”获取mysql镜像"></a>运行”docker pull mysql”获取mysql镜像</h2><pre><code>[root@localhost ~]# docker pull mysql  
Using default tag: latest  
latest: Pulling from library/mysql  
85b1f47fba49: Pull complete   
5671503d4f93: Pull complete   
3b43b3b913cb: Pull complete   
4fbb803665d0: Pull complete   
05808866e6f9: Pull complete   
1d8c65d48cfa: Pull complete   
e189e187b2b5: Pull complete   
02d3e6011ee8: Pull complete   
d43b32d5ce04: Pull complete   
2a809168ab45: Pull complete   
Digest: sha256:1a2f9361228e9b10b4c77a651b460828514845dc7ac51735b919c2c4aec864b7  
Status: Downloaded newer image for mysql:latest  
</code></pre><h2 id="在后台启动mysql容器-–name指定了容器的名称，方便之后进入容器的命令行，MYSQL-ROOT-PASSWORD-admin指定了mysql的root密码，-d表示在后台运行"><a href="#在后台启动mysql容器-–name指定了容器的名称，方便之后进入容器的命令行，MYSQL-ROOT-PASSWORD-admin指定了mysql的root密码，-d表示在后台运行" class="headerlink" title="在后台启动mysql容器(–name指定了容器的名称，方便之后进入容器的命令行，MYSQL_ROOT_PASSWORD=admin指定了mysql的root密码，-d表示在后台运行)"></a>在后台启动mysql容器(–name指定了容器的名称，方便之后进入容器的命令行，MYSQL_ROOT_PASSWORD=admin指定了mysql的root密码，-d表示在后台运行)</h2><pre><code>Administrator@SKY-20170607FIJ MINGW64 ~
$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=admin -d mysql
c6215e8c1fd73bc395a0c92e93f7e7145baedbe99c7ff639ccc9f5641bddf583
</code></pre><h2 id="进入容器bash并进入mysql命令行："><a href="#进入容器bash并进入mysql命令行：" class="headerlink" title="进入容器bash并进入mysql命令行："></a>进入容器bash并进入mysql命令行：</h2><pre><code>Administrator@SKY-20170607FIJ MINGW64 ~
$ docker exec -it mysql bash
root@c6215e8c1fd7:/# mysql -uroot -padmin
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 5
Server version: 5.7.20 MySQL Community Server (GPL)

Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)

mysql&gt;
</code></pre><h2 id="退出mysql镜像"><a href="#退出mysql镜像" class="headerlink" title="退出mysql镜像"></a>退出mysql镜像</h2><p>输入</p>
<pre><code>exit
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍docker如何创建并进入MYSQL容器。&lt;/p&gt;
&lt;h2 id=&quot;运行”docker-pull-mysql”获取mysql镜像&quot;&gt;&lt;a href=&quot;#运行”docker-pull-mysql”获取mysql镜像&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="docker" scheme="http://wangyuanjun.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://wangyuanjun.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>常用mysql命令大全</title>
    <link href="http://wangyuanjun.cn/2018/01/03/%E5%B8%B8%E7%94%A8mysql%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://wangyuanjun.cn/2018/01/03/常用mysql命令大全/</id>
    <published>2018-01-03T01:40:56.000Z</published>
    <updated>2018-01-03T02:40:13.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、连接Mysql"><a href="#1、连接Mysql" class="headerlink" title="1、连接Mysql"></a>1、连接Mysql</h1><p>格式： mysql -h主机地址 -u用户名 －p用户密码</p>
<h2 id="1、连接到本机上的MYSQL。"><a href="#1、连接到本机上的MYSQL。" class="headerlink" title="1、连接到本机上的MYSQL。"></a>1、连接到本机上的MYSQL。</h2><p>首先打开DOS窗口，然后进入目录mysql\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码。</p>
<p>如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;</p>
<h2 id="2、连接到远程主机上的MYSQL。"><a href="#2、连接到远程主机上的MYSQL。" class="headerlink" title="2、连接到远程主机上的MYSQL。"></a>2、连接到远程主机上的MYSQL。</h2><p>假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：<br>    mysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）</p>
<h2 id="3、退出MYSQL命令"><a href="#3、退出MYSQL命令" class="headerlink" title="3、退出MYSQL命令"></a>3、退出MYSQL命令</h2><pre><code>exit （回车）
</code></pre><h1 id="2、修改密码"><a href="#2、修改密码" class="headerlink" title="2、修改密码"></a>2、修改密码</h1><p>格式：mysqladmin -u用户名 -p旧密码 password 新密码</p>
<h2 id="1、给root加个密码ab12。"><a href="#1、给root加个密码ab12。" class="headerlink" title="1、给root加个密码ab12。"></a>1、给root加个密码ab12。</h2><p>首先在DOS下进入目录mysql\bin，然后键入以下命令</p>
<pre><code>mysqladmin -u root -password ab12
</code></pre><p>注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。</p>
<h2 id="2、再将root的密码改为djg345。"><a href="#2、再将root的密码改为djg345。" class="headerlink" title="2、再将root的密码改为djg345。"></a>2、再将root的密码改为djg345。</h2><pre><code>mysqladmin -u root -p ab12 password djg345
</code></pre><h1 id="3、增加新用户"><a href="#3、增加新用户" class="headerlink" title="3、增加新用户"></a>3、增加新用户</h1><p>注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符</p>
<p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p>
<h2 id="1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令："><a href="#1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：" class="headerlink" title="1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令："></a>1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：</h2><pre><code>grant select,insert,update,delete on *.* to [email=test1@”%]test1@”%[/email]” Identified by “abc”;
</code></pre><p>但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</p>
<h2 id="2、增加一个用户test2密码为abc-让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。"><a href="#2、增加一个用户test2密码为abc-让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。" class="headerlink" title="2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。"></a>2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</h2><pre><code>grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “abc”;
</code></pre><p>如果你不想test2有密码，可以再打一个命令将密码消掉。</p>
<pre><code>grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “”;
</code></pre><h1 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4 数据库"></a>4 数据库</h1><h2 id="4-1-创建数据库"><a href="#4-1-创建数据库" class="headerlink" title="4.1 创建数据库"></a>4.1 创建数据库</h2><p>注意：创建数据库之前要先连接Mysql服务器</p>
<p>命令：create database &lt;数据库名&gt;</p>
<p>例1：建立一个名为xhkdb的数据库</p>
<p>   mysql&gt; create database xhkdb;</p>
<p>例2：创建数据库并分配用户</p>
<p>①CREATE DATABASE 数据库名;</p>
<p>②GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON 数据库名.* TO 数据库名@localhost IDENTIFIED BY ‘密码’;</p>
<p>③SET PASSWORD FOR ‘数据库名’@’localhost’ = OLD_PASSWORD(‘密码’);</p>
<p>依次执行3个命令完成数据库创建。注意：中文 “密码”和“数据库”是户自己需要设置的。</p>
<h2 id="4-2-显示数据库"><a href="#4-2-显示数据库" class="headerlink" title="4.2 显示数据库"></a>4.2 显示数据库</h2><p>命令：show databases （注意：最后有个s）</p>
<pre><code>mysql&gt; show databases;
</code></pre><p>注意：为了不再显示的时候乱码，要修改数据库默认编码。以下以GBK编码页面为例进行说明：</p>
<p>1、修改MYSQL的配置文件：my.ini里面修改default-character-set=gbk<br>2、代码运行时修改：<br>   ①Java代码：jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=gbk<br>   ②PHP代码：header(“Content-Type:text/html;charset=gb2312”);<br>   ③C语言代码：int mysql_set_character_set( MYSQL <em> mysql, char </em> csname)；<br>该函数用于为当前连接设置默认的字符集。字符串csname指定了1个有效的字符集名称。连接校对成为字符集的默认校对。该函数的工作方式与SET NAMES语句类似，但它还能设置mysql- &gt; charset的值，从而影响了由mysql_real_escape_string() 设置的字符集。</p>
<h2 id="4-3-删除数据库"><a href="#4-3-删除数据库" class="headerlink" title="4.3 删除数据库"></a>4.3 删除数据库</h2><p>命令：drop database &lt;数据库名&gt;<br>例如：删除名为 xhkdb的数据库</p>
<pre><code>mysql&gt; drop database xhkdb;
</code></pre><p>例子1：删除一个已经确定存在的数据库</p>
<p>   mysql&gt; drop database drop_database;<br>   Query OK, 0 rows affected (0.00 sec)</p>
<p>例子2：删除一个不确定存在的数据库</p>
<p>   mysql&gt; drop database drop_database;<br>   ERROR 1008 (HY000): Can’t drop database ‘drop_database’; database doesn’t exist<br>      //发生错误，不能删除’drop_database’数据库，该数据库不存在。<br>   mysql&gt; drop database if exists drop_database;<br>   Query OK, 0 rows affected, 1 warning (0.00 sec)//产生一个警告说明此数据库不存在<br>   mysql&gt; create database drop_database;<br>   Query OK, 1 row affected (0.00 sec)<br>   mysql&gt; drop database if exists drop_database;//if exists 判断数据库是否存在，不存在也不产生错误<br>   Query OK, 0 rows affected (0.00 sec)</p>
<h2 id="4-4-连接数据库"><a href="#4-4-连接数据库" class="headerlink" title="4.4 连接数据库"></a>4.4 连接数据库</h2><p>命令： use &lt;数据库名&gt;</p>
<p>例如：如果xhkdb数据库存在，尝试存取它：</p>
<p>   mysql&gt; use xhkdb;</p>
<p>屏幕提示：Database changed</p>
<p>use 语句可以通告MySQL把db_name数据库作为默认（当前）数据库使用，用于后续语句。该数据库保持为默认数据库，直到语段的结尾，或者直到发布一个不同的USE语句：</p>
<p>   mysql&gt; USE db1;<br>   mysql&gt; SELECT COUNT(<em>) FROM mytable;   # selects from db1.mytable<br>   mysql&gt; USE db2;<br>   mysql&gt; SELECT COUNT(</em>) FROM mytable;   # selects from db2.mytable</p>
<p>使用USE语句为一个特定的当前的数据库做标记，不会阻碍您访问其它数据库中的表。下面的例子可以从db1数据库访问作者表，并从db2数据库访问编辑表：</p>
<p>   mysql&gt; USE db1;<br>   mysql&gt; SELECT author_name,editor_name FROM author,db2.editor<br>       -&gt;        WHERE author.editor_id = db2.editor.editor_id;</p>
<p>USE语句被设立出来，用于与Sybase相兼容。</p>
<p>有些网友问到，连接以后怎么退出。其实，不用退出来，use 数据库后，使用show databases就能查询所有数据库，如果想跳到其他数据库，用<br>   use 其他数据库名字<br>就可以了。</p>
<h2 id="4-5-当前选择的数据库"><a href="#4-5-当前选择的数据库" class="headerlink" title="4.5 当前选择的数据库"></a>4.5 当前选择的数据库</h2><p>命令：mysql&gt; select database();</p>
<p>MySQL中SELECT命令类似于其他编程语言里的print或者write，你可以用它来显示一个字符串、数字、数学表达式的结果等等。如何使用MySQL中SELECT命令的特殊功能？</p>
<p>1.显示MYSQL的版本</p>
<pre><code>mysql&gt; select version(); 
+-----------------------+ 
| version()             | 
+-----------------------+ 
| 6.0.4-alpha-community | 
+-----------------------+ 
1 row in set (0.02 sec) 
</code></pre><p>2.显示当前时间</p>
<pre><code>mysql&gt; select now(); 
+---------------------+ 
| now()               | 
+---------------------+ 
| 2009-09-15 22:35:32 | 
+---------------------+ 
1 row in set (0.04 sec) 
</code></pre><p>3.显示年月日</p>
<pre><code>SELECT DAYOFMONTH(CURRENT_DATE); 
+--------------------------+ 
| DAYOFMONTH(CURRENT_DATE) | 
+--------------------------+ 
|                       15 | 
+--------------------------+ 
1 row in set (0.01 sec) 

SELECT MONTH(CURRENT_DATE); 
+---------------------+ 
| MONTH(CURRENT_DATE) | 
+---------------------+ 
|                   9 | 
+---------------------+ 
1 row in set (0.00 sec) 

SELECT YEAR(CURRENT_DATE); 
+--------------------+ 
| YEAR(CURRENT_DATE) | 
+--------------------+ 
|               2009 | 
+--------------------+ 
1 row in set (0.00 sec) 
</code></pre><p>4.显示字符串</p>
<pre><code>mysql&gt; SELECT &quot;welecome to my blog!&quot;; 
+----------------------+ 
| welecome to my blog! | 
+----------------------+ 
| welecome to my blog! | 
+----------------------+ 
1 row in set (0.00 sec) 
</code></pre><p>5.当计算器用</p>
<pre><code>select ((4 * 4) / 10 ) + 25; 
+----------------------+ 
| ((4 * 4) / 10 ) + 25 | 
+----------------------+ 
|                26.60 | 
+----------------------+ 
1 row in set (0.00 sec) 
</code></pre><p>6.串接字符串</p>
<pre><code>select CONCAT(f_name, &quot; &quot;, l_name) 
AS Name 
from employee_data 
where title = &apos;Marketing Executive&apos;; 
+---------------+ 
| Name          | 
+---------------+ 
| Monica Sehgal | 
| Hal Simlai    | 
| Joseph Irvine | 
+---------------+ 
3 rows in set (0.00 sec) 
</code></pre><p>注意：这里用到CONCAT()函数，用来把字符串串接起来。另外，我们还用到以前学到的AS给结果列’CONCAT(f_name, “ “, l_name)’起了个假名。</p>
<h1 id="5-数据库表"><a href="#5-数据库表" class="headerlink" title="5 数据库表"></a>5 数据库表</h1><h2 id="5-1-创建数据表"><a href="#5-1-创建数据表" class="headerlink" title="5.1 创建数据表"></a>5.1 创建数据表</h2><p>命令：create table &lt;表名&gt; ( &lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]);</p>
<p>例如，建立一个名为MyClass的表，<br>字段名    数字类型    数据宽度    是否为空    是否主键    自动增加    默认值<br>id    int    4    否    primary key    auto_increment<br>name    char    20    否<br>sex    int    4    否              0<br>degree    double    16    是    </p>
<pre><code>mysql&gt; create table MyClass(
&gt; id int(4) not null primary key auto_increment,
&gt; name char(20) not null,
&gt; sex int(4) not null default &apos;0&apos;,
&gt; degree double(16,2));
</code></pre><h2 id="5-2-删除数据表"><a href="#5-2-删除数据表" class="headerlink" title="5.2 删除数据表"></a>5.2 删除数据表</h2><p>命令：drop table &lt;表名&gt;</p>
<p>例如：删除表名为 MyClass 的表</p>
<pre><code>mysql&gt; drop table MyClass;
</code></pre><p>DROP TABLE用于取消一个或多个表。您必须有每个表的DROP权限。所有的表数据和表定义会被取消，所以使用本语句要小心！</p>
<p>注意：对于一个带分区的表，DROP TABLE会永久性地取消表定义，取消各分区，并取消储存在这些分区中的所有数据。DROP TABLE还会取消与被取消的表有关联的分区定义（.par）文件。</p>
<p>对与不存在的表，使用IF EXISTS用于防止错误发生。当使用IF EXISTS时，对于每个不存在的表，会生成一个NOTE。</p>
<p>RESTRICT和CASCADE可以使分区更容易。目前，RESTRICT和CASCADE不起作用。</p>
<h2 id="5-3-表插入数据"><a href="#5-3-表插入数据" class="headerlink" title="5.3 表插入数据"></a>5.3 表插入数据</h2><p>命令：insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]</p>
<p>例如：往表 MyClass中插入二条记录, 这二条记录表示：编号为1的名为Tom的成绩为96.45, 编号为2 的名为Joan 的成绩为82.99， 编号为3 的名为Wang 的成绩为96.5。<br>   mysql&gt; insert into MyClass values(1,’Tom’,96.45),(2,’Joan’,82.99), (2,’Wang’, 96.59);</p>
<p>注意：insert into每次只能向表中插入一条记录。</p>
<h2 id="5-4-查询表中的数据"><a href="#5-4-查询表中的数据" class="headerlink" title="5.4 查询表中的数据"></a>5.4 查询表中的数据</h2><p>1)、查询所有行<br>命令： select &lt;字段1，字段2，…&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;<br>例如：查看表 MyClass 中所有数据</p>
<pre><code>mysql&gt; select * from MyClass;
</code></pre><p>2）、查询前几行数据<br>例如：查看表 MyClass 中前2行数据</p>
<pre><code>mysql&gt; select * from MyClass order by id limit 0,2;
</code></pre><p>select一般配合where使用，以查询更精确更复杂的数据。</p>
<h2 id="5-5-删除表中数据"><a href="#5-5-删除表中数据" class="headerlink" title="5.5 删除表中数据"></a>5.5 删除表中数据</h2><p>命令：delete from 表名 where 表达式</p>
<p>例如：删除表 MyClass中编号为1 的记录<br>mysql&gt; delete from MyClass where id=1;</p>
<p>下面是一个删除数据前后表的对比。<br>FirstName    LastName    Age<br>Peter    Griffin    35<br>Glenn    Quagmire    33<br>下面以PHP代码为例删除 “Persons” 表中所有 LastName=’Griffin’ 的记录：</p>
<pre><code>&lt;?php 
   $con = mysql_connect(&quot;localhost&quot;,&quot;peter&quot;,&quot;abc123&quot;); 
   if (!$con) 
   {
      die(&apos;Could not connect: &apos; . mysql_error()); 
   } 
   mysql_select_db(&quot;my_db&quot;, $con); 
   mysql_query(&quot;DELETE FROM Persons WHERE LastName=&apos;Griffin&apos;&quot;); mysql_close($con); 
?&gt;
</code></pre><p>在这次删除之后，表是这样的：</p>
<pre><code>FirstName    LastName    Age
Glenn    Quagmire    33
</code></pre><h2 id="5-6-修改表中数据"><a href="#5-6-修改表中数据" class="headerlink" title="5.6 修改表中数据"></a>5.6 修改表中数据</h2><p>语法：update 表名 set 字段=新值,… where 条件</p>
<pre><code>mysql&gt; update MyClass set name=&apos;Mary&apos; where id=1;
</code></pre><p>例子1：单表的MySQL UPDATE语句：</p>
<pre><code>UPDATE [LOW_PRIORITY] [IGNORE] tbl_name SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]
</code></pre><p>例子2：多表的UPDATE语句：</p>
<pre><code>UPDATE [LOW_PRIORITY] [IGNORE] table_references SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition]
</code></pre><p>UPDATE语法可以用新值更新原有表行中的各列。SET子句指示要修改哪些列和要给予哪些值。WHERE子句指定应更新哪些行。如果没有WHERE子句，则更新所有的行。如果指定了ORDER BY子句，则按照被指定的顺序对行进行更新。LIMIT子句用于给定一个限值，限制可以被更新的行的数目。</p>
<h2 id="5-7-增加字段"><a href="#5-7-增加字段" class="headerlink" title="5.7 增加字段"></a>5.7 增加字段</h2><p>命令：alter table 表名 add字段 类型 其他;<br>例如：在表MyClass中添加了一个字段passtest，类型为int(4)，默认值为0</p>
<pre><code>mysql&gt; alter table MyClass add passtest int(4) default &apos;0&apos;
</code></pre><p>加索引</p>
<pre><code>  mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);

例子： mysql&gt; alter table employee add index emp_name (name);
</code></pre><p>加主关键字的索引</p>
<pre><code> mysql&gt; alter table 表名 add primary key (字段名);

例子： mysql&gt; alter table employee add primary key(id);
</code></pre><p>加唯一限制条件的索引</p>
<pre><code>   mysql&gt; alter table 表名 add unique 索引名 (字段名);

例子： mysql&gt; alter table employee add unique emp_name2(cardnumber);
</code></pre><p>删除某个索引</p>
<pre><code>   mysql&gt; alter table 表名 drop index 索引名;

例子： mysql&gt;alter table employee drop index emp_name;
</code></pre><p>增加字段：</p>
<pre><code>mysql&gt; ALTER TABLE table_name ADD field_name field_type;
</code></pre><p>修改原字段名称及类型：</p>
<pre><code>mysql&gt; ALTER TABLE table_name CHANGE old_field_name new_field_name field_type;
</code></pre><p>删除字段：</p>
<pre><code>MySQL ALTER TABLE table_name DROP field_name;
</code></pre><h2 id="5-8-修改表名"><a href="#5-8-修改表名" class="headerlink" title="5.8 修改表名"></a>5.8 修改表名</h2><p>命令：rename table 原表名 to 新表名;</p>
<p>例如：在表MyClass名字更改为YouClass</p>
<pre><code>mysql&gt; rename table MyClass to YouClass;
</code></pre><p>当你执行 RENAME 时，你不能有任何锁定的表或活动的事务。你同样也必须有对原初表的 ALTER 和 DROP 权限，以及对新表的 CREATE 和 INSERT 权限。</p>
<p>如果在多表更名中，MySQL 遭遇到任何错误，它将对所有被更名的表进行倒退更名，将每件事物退回到最初状态。</p>
<p>RENAME TABLE 在 MySQL 3.23.23 中被加入。</p>
<h1 id="6、备份数据库"><a href="#6、备份数据库" class="headerlink" title="6、备份数据库"></a>6、备份数据库</h1><p>命令在DOS的[url=file://\mysql\bin]\mysql\bin[/url]目录下执行</p>
<p>1.导出整个数据库<br>导出文件默认是存在mysql\bin目录下</p>
<pre><code>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名
mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql
</code></pre><p>2.导出一个表</p>
<pre><code>mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名
mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql
</code></pre><p>3.导出一个数据库结构</p>
<pre><code>mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql
-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table
</code></pre><p>4.带语言参数导出</p>
<pre><code>mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile_name.sql
</code></pre><p>例如，将aaa库备份到文件back_aaa中：<br>　　[root@test1 root]# cd　/home/data/mysql<br>　　[root@test1 mysql]# mysqldump -u root -p –opt aaa &gt; back_aaa</p>
<h1 id="7-1-一个建库和建表的实例1"><a href="#7-1-一个建库和建表的实例1" class="headerlink" title="7.1 一个建库和建表的实例1"></a>7.1 一个建库和建表的实例1</h1><pre><code>drop database if exists school; //如果存在SCHOOL则删除
create database school; //建立库SCHOOL
use school; //打开库SCHOOL
create table teacher //建立表TEACHER
(
    id int(3) auto_increment not null primary key,
    name char(10) not null,
    address varchar(50) default ‘深圳’,
    year date
); //建表结束

//以下为插入字段
insert into teacher values(”,’allen’,&apos;大连一中’,&apos;1976-10-10′);
insert into teacher values(”,’jack’,&apos;大连二中’,&apos;1975-12-23′);
</code></pre><p>如果你在mysql提示符键入上面的命令也可以，但不方便调试。<br>1、你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c:\下，并在DOS状态进入目录[url=file://\mysql\bin]\mysql\bin[/url]，然后键入以下命令：</p>
<pre><code>mysql -uroot -p密码 &lt; c:\\school.sql
</code></pre><p>如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。</p>
<p>2、或者进入命令行后使用 mysql&gt; source c:\school.sql; 也可以将school.sql文件导入数据库中。</p>
<h1 id="7-2-一个建库和建表的实例2"><a href="#7-2-一个建库和建表的实例2" class="headerlink" title="7.2 一个建库和建表的实例2"></a>7.2 一个建库和建表的实例2</h1><pre><code>drop database if exists school; //如果存在SCHOOL则删除
create database school; //建立库SCHOOL
use school; //打开库SCHOOL
create table teacher //建立表TEACHER
(
    id int(3) auto_increment not null primary key,
    name char(10) not null,
    address varchar(50) default &apos;&apos;深圳&apos;&apos;,
    year date
); //建表结束

//以下为插入字段
insert into teacher values(&apos;&apos;&apos;&apos;,&apos;&apos;glchengang&apos;&apos;,&apos;&apos;深圳一中&apos;&apos;,&apos;&apos;1976-10-10&apos;&apos;);
insert into teacher values(&apos;&apos;&apos;&apos;,&apos;&apos;jack&apos;&apos;,&apos;&apos;深圳一中&apos;&apos;,&apos;&apos;1975-12-23&apos;&apos;);
</code></pre><p>注：在建表中<br>1、将ID设为长度为3的数字字段:int(3)；并让它每个记录自动加一:auto_increment；并不能为空:not null；而且让他成为主字段primary key。</p>
<p>2、将NAME设为长度为10的字符字段</p>
<p>3、将ADDRESS设为长度50的字符字段，而且缺省值为深圳。</p>
<p>4、将YEAR设为日期字段。</p>
<p>转载:<a href="https://www.cnblogs.com/zhangzhu/archive/2013/07/04/3172486.html" target="_blank" rel="external">Mysql命令大全</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1、连接Mysql&quot;&gt;&lt;a href=&quot;#1、连接Mysql&quot; class=&quot;headerlink&quot; title=&quot;1、连接Mysql&quot;&gt;&lt;/a&gt;1、连接Mysql&lt;/h1&gt;&lt;p&gt;格式： mysql -h主机地址 -u用户名 －p用户密码&lt;/p&gt;
&lt;h2 id=&quot;
    
    </summary>
    
      <category term="mysql" scheme="http://wangyuanjun.cn/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://wangyuanjun.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo学习——Dubbo介绍(一)</title>
    <link href="http://wangyuanjun.cn/2017/12/28/Dubbo%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Dubbo%E4%BB%8B%E7%BB%8D-%E4%B8%80/"/>
    <id>http://wangyuanjun.cn/2017/12/28/Dubbo学习——Dubbo介绍-一/</id>
    <published>2017-12-28T01:40:51.000Z</published>
    <updated>2017-12-28T01:40:51.070Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Quartz学习———Quartz介绍(一)</title>
    <link href="http://wangyuanjun.cn/2017/12/27/Quartz%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Quartz%E4%BB%8B%E7%BB%8D-%E4%B8%80/"/>
    <id>http://wangyuanjun.cn/2017/12/27/Quartz学习——Quartz介绍-一/</id>
    <published>2017-12-27T15:02:10.000Z</published>
    <updated>2018-01-08T06:34:38.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，是完全由java开发的一个开源的任务日程管理系统，“任务进度管理器”就是一个在预先确定（被纳入日程）的时间到达时，负责执行（或者通知）其他软件组件的系统。<br>Quartz用一个小Java库发布文件（.jar文件），这个库文件包含了所有Quartz核心功能。这些功能的主要接口(API)是Scheduler接口。它提供了简单的操作，例如：将任务纳入日程或者从日程中取消，开始/停止/暂停日程进度。</p>
<h2 id="quartz核心概念"><a href="#quartz核心概念" class="headerlink" title="quartz核心概念"></a>quartz核心概念</h2><p>先来看一张图：<br><img src="/2017/12/27/Quartz学习——Quartz介绍-一/quartz.png" alt="quartz"></p>
<ul>
<li><p>Job( 任务，即被调度的任务)：要由表示要执行的“作业”的类实现的接口。只有一个方法 void execute(jobExecutionContext context) (jobExecutionContext 提供调度上下文各种信息，运行时数据保存在jobDataMap中) Job有个子接口StatefulJob ,代表有状态任务。</p>
</li>
<li><p>JobDetail：Quartz在每次执行Job时，都重新创建一个Job实例，所以它不直接接受一个Job的实例，相反它接收一个Job实现类，以便运行时通过newInstance()的反射机制实例化Job。因此需要通过一个类来描述Job的实现类及其它相关的静态信息，如Job名字、描述、关联监听器等信息，JobDetail承担了这一角色。<br>  传递给定作业实例的详细信息属性。 JobDetails将使用JobBuilder创建/定义。 </p>
</li>
<li><p>Trigger(触发器)：用于定义任务调度时间规则。是一个类，描述触发Job执行的时间触发规则。使用TriggerBuilder实例化实际触发器。主要有SimpleTrigger和CronTrigger这两个子类。当仅需触发一次或者以固定时间间隔周期执行，SimpleTrigger是最适合的选择；而CronTrigger则可以通过Cron表达式定义出各种复杂时间规则的调度方案：如每早晨9:00执行，周一、周三、周五下午5:00执行等；</p>
</li>
<li><p>Calendar：org.quartz.Calendar和java.util.Calendar不同，它是一些日历特定时间点的集合（可以简单地将org.quartz.Calendar看作java.util.Calendar的集合——java.util.Calendar代表一个日历时间点，无特殊说明后面的Calendar即指org.quartz.Calendar）。一个Trigger可以和多个Calendar关联，以便排除或包含某些时间点。假设，我们安排每周星期一早上10:00执行任务，但是如果碰到法定的节日，任务则不执行，这时就需要在Trigger触发机制的基础上使用Calendar进行定点排除。</p>
</li>
<li><p>Scheduler(任务调度器)：这是Quartz Scheduler的主要接口，代表一个Quartz的独立运行容器，Trigger和JobDetail可以注册到Scheduler中，两者在Scheduler中拥有各自的组及名称，组及名称是Scheduler查找定位容器中某一对象的依据，Trigger的组及名称必须唯一，JobDetail的组和名称也必须唯一（但可以和Trigger的组和名称相同，因为它们是不同类型的）。Scheduler定义了多个接口方法，允许外部通过组及名称访问和控制容器中Trigger和JobDetail。<br>一旦注册，调度程序负责执行作业，当他们的相关联的触发器触发（当他们的预定时间到达时）。</p>
</li>
<li><p>QuartzSchedulerThread ：负责执行向QuartzScheduler注册的触发Trigger的工作的线程。 </p>
</li>
<li><p>ThreadPool：Scheduler使用一个线程池作为任务运行的基础设施，任务通过共享线程池中的线程提供运行效率。 </p>
</li>
<li><p>QuartzSchedulerResources：包含创建QuartzScheduler实例所需的所有资源（JobStore，ThreadPool等）。 </p>
</li>
<li><p>SchedulerFactory( 调度程序工厂) ：提供用于获取调度程序实例的客户端可用句柄的机制。 </p>
</li>
<li><p>JobStore： 通过类实现的接口，这些类要为org.quartz.core.QuartzScheduler的使用提供一个org.quartz.Job和org.quartz.Trigger存储机制。作业和触发器的存储应该以其名称和组的组合为唯一性。</p>
</li>
<li><p>QuartzScheduler ：这是Quartz的核心，它是org.quartz.Scheduler接口的间接实现，包含调度org.quartz.Jobs，注册org.quartz.JobListener实例等的方法。  </p>
</li>
</ul>
<h2 id="定时器种类"><a href="#定时器种类" class="headerlink" title="定时器种类"></a>定时器种类</h2><p>Quartz 中五种类型的 Trigger：SimpleTrigger，CronTirgger，DateIntervalTrigger，NthIncludedDayTrigger和Calendar 类（ org.quartz.Calendar）。<br>最常用的：<br>SimpleTrigger：用来触发只需执行一次或者在给定时间触发并且重复N次且每次执行延迟一定时间的任务。<br>CronTrigger：按照日历触发，例如“每个周五”，每个月10日中午或者10：15分。</p>
<h2 id="Quartz中的设计模式"><a href="#Quartz中的设计模式" class="headerlink" title="Quartz中的设计模式"></a>Quartz中的设计模式</h2><ol>
<li>Builder模式<br>所有关键组件都有Builder模式来构建  <builder> 如:JobBuilder、TriggerBuilder</builder></li>
<li>Factory模式<br>最终由Scheduler的来进行组合各种组件  <factory> 如SchedulerFactory</factory></li>
<li>Quartz项目中大量使用组件模式，插件式设计，可插拔，耦合性低，易扩展，开发者可自行定义自己的Job、Trigger等组件</li>
<li>链式写法,Quartz中大量使用链式写法，与jQuery的写法有几分相似，实现也比较简单，如：<pre><code> $(this).addClass(&quot;divCurrColor&quot;).next(&quot;.divContent&quot;).css(&quot;display&quot;,&quot;block&quot;);  
newTrigger().withIdentity( &quot;trigger3&quot;, &quot;group1&quot;).startAt( startTime)
.withSchedule(simpleSchedule().withIntervalInSeconds(10).withRepeatCount(10)).build();
</code></pre></li>
</ol>
<h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>RAMJobStore:<br>优点：不要外部数据库，配置容易，运行速度快<br>缺点：因为调度程序信息是存储在被分配给JVM的内存里面，所以，当应用程序停止运行时，所有调度信息将被丢失。另外因为存储到JVM内存里面，所以可以存储多少个Job和Trigger将会受到限制<br>JDBCJobStore:<br>优点：支持集群，因为所有的任务信息都会保存到数据库中，可以控制事物，还有就是如果应用服务器关闭或者重启，任务信息都不会丢失，并且可以恢复因服务器关闭或者重启而导致执行失败的任务<br>缺点：运行速度的快慢取决与连接数据库的快慢</p>
<h2 id="表关系和解释"><a href="#表关系和解释" class="headerlink" title="表关系和解释"></a>表关系和解释</h2><p><img src="/2017/12/27/Quartz学习——Quartz介绍-一/quartz表结构.png" alt="quartz表结构"></p>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Means</th>
</tr>
</thead>
<tbody>
<tr>
<td>qrtz_blob_triggers</td>
<td style="text-align:center">Trigger作为Blob类型存储(用于Quartz用户用JDBC创建他们自己定制的Trigger类型，JobStore 并不知道如何存储实例的时候)</td>
</tr>
<tr>
<td>qrtz_calendars</td>
<td style="text-align:center">以Blob类型存储Quartz的Calendar日历信息， quartz可配置一个日历来指定一个时间范围</td>
</tr>
<tr>
<td>qrtz_cron_triggers</td>
<td style="text-align:center">存储Cron Trigger，包括Cron表达式和时区信息。</td>
</tr>
<tr>
<td>qrtz_fired_triggers</td>
<td style="text-align:center">存储与已触发的Trigger相关的状态信息，以及相联Job的执行信息</td>
</tr>
<tr>
<td>qrtz_job_details</td>
<td style="text-align:center">存储每一个已配置的Job的详细信息</td>
</tr>
<tr>
<td>qrtz_locks</td>
<td style="text-align:center">存储程序的非观锁的信息(假如使用了悲观锁)</td>
</tr>
<tr>
<td>qrtz_paused_trigger_graps</td>
<td style="text-align:center">存储已暂停的Trigger组的信息</td>
</tr>
<tr>
<td>qrtz_scheduler_state</td>
<td style="text-align:center">存储少量的有关 Scheduler的状态信息，和别的 Scheduler 实例(假如是用于一个集群中)</td>
</tr>
<tr>
<td>qrtz_simple_triggers</td>
<td style="text-align:center">存储简单的 Trigger，包括重复次数，间隔，以及已触的次数</td>
</tr>
<tr>
<td>qrtz_triggers</td>
<td style="text-align:center">存储已配置的 Trigger的信息</td>
</tr>
<tr>
<td>qrzt_simprop_triggers</td>
</tr>
</tbody>
</table>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre><code>quartz.properties 
//调度标识名 集群中每一个实例都必须使用相同的名称 （区分特定的调度器实例） 
org.quartz.scheduler.instanceName：DefaultQuartzScheduler 
//ID设置为自动获取 每一个必须不同 （所有调度器实例中是唯一的） 
org.quartz.scheduler.instanceId ：AUTO 
//数据保存方式为持久化 
org.quartz.jobStore.class ：org.quartz.impl.jdbcjobstore.JobStoreTX 
//表的前缀 
org.quartz.jobStore.tablePrefix ： QRTZ_ 
//设置为TRUE不会出现序列化非字符串类到 BLOB 时产生的类版本问题 
//org.quartz.jobStore.useProperties ： true 
//加入集群 true 为集群 false不是集群 
org.quartz.jobStore.isClustered ： false 
//调度实例失效的检查时间间隔 
org.quartz.jobStore.clusterCheckinInterval：20000 
//容许的最大作业延长时间 
org.quartz.jobStore.misfireThreshold ：60000 
//ThreadPool 实现的类名 
org.quartz.threadPool.class：org.quartz.simpl.SimpleThreadPool 
//线程数量 
org.quartz.threadPool.threadCount ： 10 
//线程优先级 
org.quartz.threadPool.threadPriority ： 5（threadPriority 属性的最大值是常量 java.lang.Thread.MAX_PRIORITY，等于10。最小值为常量 java.lang.Thread.MIN_PRIORITY，为1） 
//自创建父线程 
//org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread： true 
//数据库别名 
org.quartz.jobStore.dataSource ： qzDS 
//设置数据源 
org.quartz.dataSource.qzDS.driver:com.mysql.jdbc.Driver 
org.quartz.dataSource.qzDS.URL:jdbc:mysql://localhost:3306/quartz 
org.quartz.dataSource.qzDS.user:root 
org.quartz.dataSource.qzDS.password:123456 
org.quartz.dataSource.qzDS.maxConnection:10
</code></pre><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><pre><code>// 1、工厂模式 构建Scheduler的Factory，其中STD为Quartz默认的Factory  
//    开发者亦可自行实现自己的Factory;Job、Trigger等组件  
SchedulerFactory sf = new StdSchedulerFactory();  

// 2、通过SchedulerFactory构建Scheduler对象  
Scheduler sched = sf.getScheduler();  

// 3、org.quartz.DateBuilder.evenMinuteDate  -- 通过DateBuilder构建Date  
Date runTime = evenMinuteDate( new Date());  

// 4、org.quartz.JobBuilder.newJob &lt;下一分钟&gt; --通过JobBuilder构建Job  
JobDetail job = newJob(HelloJob.class).withIdentity(&quot;job1&quot;,&quot;group1&quot;).build();  

// 5、通过TriggerBuilder进行构建Trigger  
Trigger trigger = newTrigger().withIdentity(&quot;trigger1&quot;,&quot;group1&quot;)  
            .startAt(runTime).build();  

// 6、工厂模式，组装各个组件&lt;JOB，Trigger&gt;  
sched.scheduleJob (job, trigger);  

// 7、start   
sched.start();  

try {  
  Thread.sleep(65L * 1000L);  
} catch (Exception e) {  
}  

// 8、通过Scheduler销毁内置的Trigger和Job  
sched.shutdown(true);      
</code></pre><h2 id="一句话看懂Quartz"><a href="#一句话看懂Quartz" class="headerlink" title="一句话看懂Quartz"></a>一句话看懂Quartz</h2><ol>
<li>创建调度工厂();    //工厂模式</li>
<li>根据工厂取得调度器实例();  //工厂模式</li>
<li>Builder模式构建子组件<job,trigger>  // builder模式, 如JobBuilder、TriggerBuilder、DateBuilder</job,trigger></li>
<li>通过调度器组装子组件   调度器.组装&lt;子组件1,子组件2…&gt;  //工厂模式</li>
<li>调度器.start(); //工厂模式</li>
</ol>
<p>参考:<br><a href="http://blog.csdn.net/guolong1983811/article/details/51501346" target="_blank" rel="external">quartz详解2：quartz由浅入深</a><br><a href="https://www.cnblogs.com/drift-ice/p/3817269.html" target="_blank" rel="external">Quartz使用总结</a><br><a href="http://blog.csdn.net/chenweitang123/article/details/37777399" target="_blank" rel="external">Quartz深入浅出(一)</a><br><a href="http://blog.csdn.net/u010648555/article/details/54863144" target="_blank" rel="external">Quartz学习——Quartz大致介绍（一）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，是完全由java开发的一个开源的任务日程管理
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Oracle VM VirtualBox配置虚拟网卡(桥接),实现主机-虚拟机网络互通</title>
    <link href="http://wangyuanjun.cn/2017/12/25/Oracle-VM-VirtualBox%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1-%E6%A1%A5%E6%8E%A5-%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BA%92%E9%80%9A/"/>
    <id>http://wangyuanjun.cn/2017/12/25/Oracle-VM-VirtualBox配置虚拟网卡-桥接-实现主机-虚拟机网络互通/</id>
    <published>2017-12-25T09:01:52.000Z</published>
    <updated>2017-12-25T09:54:02.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桥接网卡"><a href="#桥接网卡" class="headerlink" title="桥接网卡"></a>桥接网卡</h2><ol>
<li>首先打开虚拟机</li>
<li>右键点击右下角 网络连接</li>
<li>在弹出框内点击 网络</li>
<li>在设置界面依次点击-网络-连接方式选择 -桥接网卡-确定</li>
</ol>
<p><img src="/2017/12/25/Oracle-VM-VirtualBox配置虚拟网卡-桥接-实现主机-虚拟机网络互通/桥接.png" alt="桥接"></p>
<h2 id="编辑网卡"><a href="#编辑网卡" class="headerlink" title="编辑网卡"></a>编辑网卡</h2><ol>
<li>打开centos虚拟机终端，就是命令行</li>
<li>切换到root用户，对网卡文件进行编辑</li>
<li>shell#cd /etc/sysconfig/network-scripts/</li>
<li>shell# vim ifcfg-enp0s3</li>
<li>BOOTPROTO=dhcp,ONBOOT=yes(dhcp为动态获取ip，ONBOOT=yes为开机启动)</li>
<li>保存退出！<br><img src="/2017/12/25/Oracle-VM-VirtualBox配置虚拟网卡-桥接-实现主机-虚拟机网络互通/修改网卡.png" alt="修改网卡"></li>
</ol>
<h2 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h2><pre><code>shell#service network restart
</code></pre><p>或者</p>
<pre><code>shell#systemctl restart network (centos7版本命令)
</code></pre><p>参考:<a href="https://jingyan.baidu.com/article/c843ea0ba8b70677931e4adc.html" target="_blank" rel="external">VirtualBox linux虚拟机如何实现“桥接”上网</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;桥接网卡&quot;&gt;&lt;a href=&quot;#桥接网卡&quot; class=&quot;headerlink&quot; title=&quot;桥接网卡&quot;&gt;&lt;/a&gt;桥接网卡&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先打开虚拟机&lt;/li&gt;
&lt;li&gt;右键点击右下角 网络连接&lt;/li&gt;
&lt;li&gt;在弹出框内点击 网络&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="linux" scheme="http://wangyuanjun.cn/categories/linux/"/>
    
    
      <category term="Oracle VM VirtualBox" scheme="http://wangyuanjun.cn/tags/Oracle-VM-VirtualBox/"/>
    
      <category term="linux" scheme="http://wangyuanjun.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>解决虚拟机安装linux后首次输入ifconfig IP地址显示为127.0.0.1</title>
    <link href="http://wangyuanjun.cn/2017/12/25/%E8%A7%A3%E5%86%B3%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85linux%E5%90%8E%E9%A6%96%E6%AC%A1%E8%BE%93%E5%85%A5ifconfig-IP%E5%9C%B0%E5%9D%80%E6%98%BE%E7%A4%BA%E4%B8%BA127-0-0-1/"/>
    <id>http://wangyuanjun.cn/2017/12/25/解决虚拟机安装linux后首次输入ifconfig-IP地址显示为127-0-0-1/</id>
    <published>2017-12-25T08:34:13.000Z</published>
    <updated>2017-12-25T08:52:53.821Z</updated>
    
    <content type="html"><![CDATA[<p>使用虚拟机Oracle VM VirtualBox安装linux首次输入ifconfig IP地址显示为127.0.0.1，解决方法如下:<br>在linux系统中输入命令:</p>
<pre><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0
</code></pre><p>显示如下:<br><img src="/2017/12/25/解决虚拟机安装linux后首次输入ifconfig-IP地址显示为127-0-0-1/图片.png" alt="图片"></p>
<p>将其中的ONBOOT=no改为yes,保存并退出。</p>
<p>最后输入命令:</p>
<pre><code>service network restart（重启服务命令）
</code></pre><p>重启服务器,会出现正在配置IP的提示,待自动配置成功后,输入命令ifconfig即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用虚拟机Oracle VM VirtualBox安装linux首次输入ifconfig IP地址显示为127.0.0.1，解决方法如下:&lt;br&gt;在linux系统中输入命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vi /etc/sysconfig/network-scripts/
    
    </summary>
    
      <category term="linux" scheme="http://wangyuanjun.cn/categories/linux/"/>
    
    
      <category term="Oracle VM VirtualBox" scheme="http://wangyuanjun.cn/tags/Oracle-VM-VirtualBox/"/>
    
      <category term="linux" scheme="http://wangyuanjun.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>解决项目war包部署到linux系统的tomcat中访问页面报404错误</title>
    <link href="http://wangyuanjun.cn/2017/12/25/%E8%A7%A3%E5%86%B3%E9%A1%B9%E7%9B%AEwar%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0linux%E7%B3%BB%E7%BB%9F%E7%9A%84tomcat%E4%B8%AD%E8%AE%BF%E9%97%AE%E9%A1%B5%E9%9D%A2%E6%8A%A5404%E9%94%99%E8%AF%AF/"/>
    <id>http://wangyuanjun.cn/2017/12/25/解决项目war包部署到linux系统的tomcat中访问页面报404错误/</id>
    <published>2017-12-25T05:56:46.000Z</published>
    <updated>2017-12-25T05:56:46.337Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java Web项目导出war包并部署到linux系统的tomcat中</title>
    <link href="http://wangyuanjun.cn/2017/12/25/Java-Web%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%87%BAwar%E5%8C%85%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0linux%E7%B3%BB%E7%BB%9F%E7%9A%84tomcat%E4%B8%AD/"/>
    <id>http://wangyuanjun.cn/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/</id>
    <published>2017-12-25T04:15:54.000Z</published>
    <updated>2017-12-25T08:24:19.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用eclpise导出war包"><a href="#使用eclpise导出war包" class="headerlink" title="使用eclpise导出war包"></a>使用eclpise导出war包</h2><p>右击项目–&gt;Export–&gt;选择WAR file–&gt;选择导出目录,导出，如下图所示:</p>
<p><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/eclipse导出war包.png" alt="eclipse导出war包"><br><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/eclipse导出war包选择WAR file.png" alt="eclipse导出war包选择WAR file"><br><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/eclipse导出war包finish.png" alt="eclipse导出war包finish"></p>
<h2 id="使用maven导出war包"><a href="#使用maven导出war包" class="headerlink" title="使用maven导出war包"></a>使用maven导出war包</h2><p>右击项目–&gt;Run as–&gt;Maven install，如下图所示:</p>
<p><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/maven导出war包.png" alt="maven导出war包"><br><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/maven导出war包finish.png" alt="maven导出war包finish"></p>
<h2 id="将war包部署至tomcat中"><a href="#将war包部署至tomcat中" class="headerlink" title="将war包部署至tomcat中"></a>将war包部署至tomcat中</h2><p>我的电脑系统是windows，为了模拟linux环境，使用Oracle VM VirtualBox虚拟机及centos6.9搭建linux环境。<br>在linux上安装tomcate及jdk，配置环境变量</p>
<ol>
<li>将spring-demo.war放到Tomcat的webapps目录下。<br>在windows上安装ssh,通过它将war包上传到linux上</li>
</ol>
<p><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/webapps放war包.png" alt="webapps放war包"></p>
<ol>
<li>启动tomcat<br>使用 ./catalina.sh run 命令可查看tomcate启动日志<br><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/启动tomcate1.png" alt="启动tomcate1"></li>
</ol>
<p>启动没报错，使用 ./startup.sh 命令启动tomcate，如果不能访问请关闭linux防火墙或者到防火墙中添加可访问的域名及端口。<br><img src="/2017/12/25/Java-Web项目导出war包并部署到linux系统的tomcat中/浏览器输出.png" alt="浏览器输出"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用eclpise导出war包&quot;&gt;&lt;a href=&quot;#使用eclpise导出war包&quot; class=&quot;headerlink&quot; title=&quot;使用eclpise导出war包&quot;&gt;&lt;/a&gt;使用eclpise导出war包&lt;/h2&gt;&lt;p&gt;右击项目–&amp;gt;Export–&amp;g
    
    </summary>
    
      <category term="nginx" scheme="http://wangyuanjun.cn/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://wangyuanjun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot发布HttpClient服务和客户端调用HttpClient服务</title>
    <link href="http://wangyuanjun.cn/2017/12/23/SpringBoot%E5%8F%91%E5%B8%83HttpClient%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E7%94%A8HttpClient%E6%9C%8D%E5%8A%A1/"/>
    <id>http://wangyuanjun.cn/2017/12/23/SpringBoot发布HttpClient服务和客户端调用HttpClient服务/</id>
    <published>2017-12-23T06:28:27.000Z</published>
    <updated>2017-12-21T07:49:02.701Z</updated>
    
    <content type="html"><![CDATA[<p>之前在做公司项目的一个功能需要写WebSerice接口，写完之后我们老大说也可以用HttpClient来写接口，所以写了一个接口例子。</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.wyj&lt;/groupId&gt;
    &lt;artifactId&gt;wyj-interface-client&lt;/artifactId&gt;
    &lt;packaging&gt;war&lt;/packaging&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;wyj-interface-client Maven Webapp&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- http --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
            &lt;version&gt;4.5.4&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
            &lt;version&gt;1.1.41&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!--webservice cxf --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt;
            &lt;version&gt;3.1.8&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt;
            &lt;version&gt;3.1.8&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;finalName&gt;wyj-interface-client&lt;/finalName&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre><h2 id="HttpClient客户端"><a href="#HttpClient客户端" class="headerlink" title="HttpClient客户端"></a>HttpClient客户端</h2><p>可以传输json和map数据，可以使用get和post请求，详情见备注</p>
<pre><code>package http;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.junit.Test;

import com.alibaba.fastjson.JSON;

/**
 * http客户端
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月20日 下午8:26:51
 */
public class HttpClientTest {

    /**
     * post请求传输map数据
     * 
     * @param url
     * @param map
     * @param encoding
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public static String sendPostDataByMap(String url, Map&lt;String, String&gt; map, String encoding) throws ClientProtocolException, IOException {
        String result = &quot;&quot;;

        // 创建httpclient对象
        CloseableHttpClient httpClient = HttpClients.createDefault();
        // 创建post方式请求对象
        HttpPost httpPost = new HttpPost(url);

        // 装填参数
        List&lt;NameValuePair&gt; nameValuePairs = new ArrayList&lt;NameValuePair&gt;();
        if (map != null) {
            for (Entry&lt;String, String&gt; entry : map.entrySet()) {
                nameValuePairs.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
            }
        }

        // 设置参数到请求对象中
        httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, encoding));

        // 设置header信息
        // 指定报文头【Content-type】、【User-Agent】
        httpPost.setHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);
        httpPost.setHeader(&quot;User-Agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&quot;);

        // 执行请求操作，并拿到结果（同步阻塞）
        CloseableHttpResponse response = httpClient.execute(httpPost);
        // 获取结果实体
        // 判断网络连接状态码是否正常(0--200都数正常)
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            result = EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);
        }
        // 释放链接
        response.close();

        return result;
    }

    /**
     * post请求传输json数据
     * 
     * @param url
     * @param json
     * @param encoding
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public static String sendPostDataByJson(String url, String json, String encoding) throws ClientProtocolException, IOException {
        String result = &quot;&quot;;

        // 创建httpclient对象
        CloseableHttpClient httpClient = HttpClients.createDefault();

        // 创建post方式请求对象
        HttpPost httpPost = new HttpPost(url);

        // 设置参数到请求对象中
        StringEntity stringEntity = new StringEntity(json, ContentType.APPLICATION_JSON);
        stringEntity.setContentEncoding(&quot;utf-8&quot;);
        httpPost.setEntity(stringEntity);

        // 执行请求操作，并拿到结果（同步阻塞）
        CloseableHttpResponse response = httpClient.execute(httpPost);

        // 获取结果实体
        // 判断网络连接状态码是否正常(0--200都数正常)
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            result = EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);
        }
        // 释放链接
        response.close();

        return result;
    }

    /**
     * get请求传输数据
     * 
     * @param url
     * @param encoding
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public String sendGetData(String url, String encoding) throws ClientProtocolException, IOException {
        String result = &quot;&quot;;

        // 创建httpclient对象
        CloseableHttpClient httpClient = HttpClients.createDefault();

        // 创建get方式请求对象
        HttpGet httpGet = new HttpGet(url);
        httpGet.addHeader(&quot;Content-type&quot;, &quot;application/json&quot;);
        // 通过请求对象获取响应对象
        CloseableHttpResponse response = httpClient.execute(httpGet);

        // 获取结果实体
        // 判断网络连接状态码是否正常(0--200都数正常)
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            result = EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);
        }
        // 释放链接
        response.close();

        return result;
    }

    @Test
    public void testSendPostDataByMap() throws ClientProtocolException, IOException {
        String url = &quot;http://localhost:8080/httpService/sendPostDataByMap&quot;;
        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
        map.put(&quot;name&quot;, &quot;wyj&quot;);
        map.put(&quot;city&quot;, &quot;南京&quot;);
        String body = sendPostDataByMap(url, map, &quot;utf-8&quot;);
        System.out.println(&quot;响应结果：&quot; + body);
    }

    @Test
    public void testSendPostDataByJson() throws ClientProtocolException, IOException {
        String url = &quot;http://localhost:8080/httpService/sendPostDataByJson&quot;;
        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
        map.put(&quot;name&quot;, &quot;wyj&quot;);
        map.put(&quot;city&quot;, &quot;南京&quot;);
        String body = sendPostDataByJson(url, JSON.toJSONString(map), &quot;utf-8&quot;);
        System.out.println(&quot;响应结果：&quot; + body);
    }

    @Test
    public void testSendGetData() throws ClientProtocolException, IOException {
        String url = &quot;http://localhost:8080/httpService/sendGetData?name=wyj&amp;city=南京&quot;;
        String body = sendGetData(url, &quot;utf-8&quot;);
        System.out.println(&quot;响应结果：&quot; + body);
    }

}
</code></pre><h2 id="HttpClient服务端"><a href="#HttpClient服务端" class="headerlink" title="HttpClient服务端"></a>HttpClient服务端</h2><p>package com.wyj.http;</p>
<p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p>
<p>import org.springframework.web.bind.annotation.RequestBody;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestMethod;<br>import org.springframework.web.bind.annotation.RestController;</p>
<p>import com.alibaba.fastjson.JSON;<br>import com.alibaba.fastjson.JSONObject;</p>
<pre><code>/**
 * http服务端
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月21日 下午8:27:08
 */
@RestController
@RequestMapping(&quot;/httpService&quot;)
public class HttpServiceTest {

    @RequestMapping(value = &quot;/sendPostDataByMap&quot;, method = RequestMethod.POST)
    public String sendPostDataByMap(HttpServletRequest request, HttpServletResponse response) {
        String result = &quot;调用成功：数据是 &quot; + &quot;name:&quot; + request.getParameter(&quot;name&quot;) + &quot; city:&quot; + request.getParameter(&quot;city&quot;);
        return JSON.toJSONString(result);
    }

    @RequestMapping(value = &quot;/sendPostDataByJson&quot;, method = RequestMethod.POST)
    public String sendPostDataByJson(HttpServletRequest request, HttpServletResponse response, @RequestBody String requestBody) {
        JSONObject jsonObject = JSONObject.parseObject(requestBody);
        String result = &quot;调用成功：数据是 &quot; + &quot;name:&quot; + jsonObject.getString(&quot;name&quot;) + &quot; city:&quot; + jsonObject.getString(&quot;city&quot;);
        return JSON.toJSONString(result);
    }

    @RequestMapping(value = &quot;/sendGetData&quot;, method = RequestMethod.GET)
    public String sendGetData(HttpServletRequest request, HttpServletResponse response) {
        String result = &quot;调用成功：数据是 &quot; + &quot;name:&quot; + request.getParameter(&quot;name&quot;) + &quot; city:&quot; + request.getParameter(&quot;city&quot;);
        return JSON.toJSONString(result);
    }
}
</code></pre><h2 id="调用后返回结果输出为"><a href="#调用后返回结果输出为" class="headerlink" title="调用后返回结果输出为"></a>调用后返回结果输出为</h2><p><img src="/2017/12/23/SpringBoot发布HttpClient服务和客户端调用HttpClient服务/HttpClient-result.png" alt="HttpClient-result"></p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/wangyuanjun008/wyj-interface-client/blob/master/src/main/java/http/HttpClientTest.java" target="_blank" rel="external">SpringBoot整合的HttpClient客户端地址</a><br><a href="https://github.com/wangyuanjun008/wyj-interface-service/blob/master/src/main/java/com/wyj/http/HttpServiceTest.java" target="_blank" rel="external">SpringBoot整合的HttpClient服务端地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在做公司项目的一个功能需要写WebSerice接口，写完之后我们老大说也可以用HttpClient来写接口，所以写了一个接口例子。&lt;/p&gt;
&lt;h2 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="HttpClient" scheme="http://wangyuanjun.cn/categories/HttpClient/"/>
    
    
      <category term="SpringBoot" scheme="http://wangyuanjun.cn/tags/SpringBoot/"/>
    
      <category term="HttpClient" scheme="http://wangyuanjun.cn/tags/HttpClient/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合cxf发布WebService服务和客户端调用WebService服务</title>
    <link href="http://wangyuanjun.cn/2017/12/21/SpringBoot%E6%95%B4%E5%90%88cxf%E5%8F%91%E5%B8%83WebService%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E7%94%A8WebService%E6%9C%8D%E5%8A%A1/"/>
    <id>http://wangyuanjun.cn/2017/12/21/SpringBoot整合cxf发布WebService服务和客户端调用WebService服务/</id>
    <published>2017-12-21T05:19:10.000Z</published>
    <updated>2017-12-21T07:47:32.037Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做公司项目的一个功能需要写WebSerice接口，为了系统得学习WebService，决定写一个测试接口的例子。<br>测试项目中使用的是SpringBoot(spring整合cxf需添加cxf-rt-frontend-jaxws，cxf-rt-transports-http依赖)</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.wyj&lt;/groupId&gt;
    &lt;artifactId&gt;wyj-interface-service&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;name&gt;wyj-interface-service&lt;/name&gt;
    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;
        &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- http --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
            &lt;version&gt;4.5.4&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
            &lt;version&gt;1.1.41&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 热部署模块 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 这个需要为 true 热部署才有效 --&gt;
        &lt;/dependency&gt;

        &lt;!-- CXF webservice --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
            &lt;artifactId&gt;cxf-spring-boot-starter-jaxws&lt;/artifactId&gt;
            &lt;version&gt;3.1.11&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- CXF webservice --&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;
            &lt;artifactId&gt;scala-library&lt;/artifactId&gt;
            &lt;version&gt;2.11.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre><h2 id="服务端接口"><a href="#服务端接口" class="headerlink" title="服务端接口"></a>服务端接口</h2><pre><code>package com.wyj.webservice;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;

/**
 * webservice测试接口
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月19日 下午9:36:49
 */
@WebService(name = &quot;TestService&quot;, // 暴露服务名称
targetNamespace = &quot;http://service.wyj.com&quot;// 命名空间,一般是接口的包名倒序
)
public interface TestService {

    @WebMethod
    @WebResult(name = &quot;String&quot;, targetNamespace = &quot;&quot;)
    String sendMessage(@WebParam(name = &quot;username&quot;) String username);
}
</code></pre><h2 id="服务端接口实现"><a href="#服务端接口实现" class="headerlink" title="服务端接口实现"></a>服务端接口实现</h2><pre><code>package com.wyj.webservice;

import javax.jws.WebService;

import org.springframework.stereotype.Component;

    /**
     * webservice测试接口实现
     * 
     * 
     * @author：WangYuanJun
     * @date：2017年12月19日 下午9:37:20
     */
    @WebService(serviceName = &quot;TestService&quot;, // 与接口中指定的name一致
    targetNamespace = &quot;http://service.wyj.com&quot;, // 与接口中的命名空间一致,一般是接口的包名倒
    endpointInterface = &quot;com.wyj.webservice.TestService&quot;// 接口地址
    )
    @Component
    public class TestServiceImpl implements TestService {

        @Override
        public String sendMessage(String username) {

            return &quot;hello &quot;+username;
        }

    }
</code></pre><h2 id="cxf配置"><a href="#cxf配置" class="headerlink" title="cxf配置"></a>cxf配置</h2><pre><code>package com.wyj.webservice;

import javax.xml.ws.Endpoint;

import org.apache.cxf.Bus;
import org.apache.cxf.jaxws.EndpointImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
/**
 * cxf配置
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月19日 下午9:38:24
 */
@Configuration
public class CxfConfig {

    @Autowired
    private Bus bus;

    @Autowired
    private TestService testService;

    @Bean
    public Endpoint endpoint(){
        EndpointImpl endpoint = new EndpointImpl(bus, testService);
        endpoint.publish(&quot;/TestService&quot;);
        return endpoint;
    }
}
</code></pre><p>默认服务在Host:port/services/<em>*</em>路径下<br>将TestService接口发布在了路径/services/TestService下,wsdl文档路径为，<a href="http://localhost:8080/services/TestService?wsdl" target="_blank" rel="external">http://localhost:8080/services/TestService?wsdl</a></p>
<h2 id="TestService的wsdl信息"><a href="#TestService的wsdl信息" class="headerlink" title="TestService的wsdl信息"></a>TestService的wsdl信息</h2><pre><code>&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;&lt;wsdl:definitions xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:wsdl=&quot;http://schemas.xmlsoap.org/wsdl/&quot; xmlns:tns=&quot;http://service.wyj.com&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; xmlns:ns1=&quot;http://schemas.xmlsoap.org/soap/http&quot; name=&quot;TestService&quot; targetNamespace=&quot;http://service.wyj.com&quot;&gt;
  &lt;wsdl:types&gt;
&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:tns=&quot;http://service.wyj.com&quot; elementFormDefault=&quot;unqualified&quot; targetNamespace=&quot;http://service.wyj.com&quot; version=&quot;1.0&quot;&gt;

  &lt;xs:element name=&quot;sendMessage&quot; type=&quot;tns:sendMessage&quot;/&gt;

  &lt;xs:element name=&quot;sendMessageResponse&quot; type=&quot;tns:sendMessageResponse&quot;/&gt;

  &lt;xs:complexType name=&quot;sendMessage&quot;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element minOccurs=&quot;0&quot; name=&quot;username&quot; type=&quot;xs:string&quot;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;sendMessageResponse&quot;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element minOccurs=&quot;0&quot; name=&quot;String&quot; type=&quot;xs:string&quot;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

&lt;/xs:schema&gt;
  &lt;/wsdl:types&gt;
  &lt;wsdl:message name=&quot;sendMessage&quot;&gt;
    &lt;wsdl:part element=&quot;tns:sendMessage&quot; name=&quot;parameters&quot;&gt;
    &lt;/wsdl:part&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:message name=&quot;sendMessageResponse&quot;&gt;
    &lt;wsdl:part element=&quot;tns:sendMessageResponse&quot; name=&quot;parameters&quot;&gt;
    &lt;/wsdl:part&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:portType name=&quot;TestService&quot;&gt;
    &lt;wsdl:operation name=&quot;sendMessage&quot;&gt;
      &lt;wsdl:input message=&quot;tns:sendMessage&quot; name=&quot;sendMessage&quot;&gt;
    &lt;/wsdl:input&gt;
      &lt;wsdl:output message=&quot;tns:sendMessageResponse&quot; name=&quot;sendMessageResponse&quot;&gt;
    &lt;/wsdl:output&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:portType&gt;
  &lt;wsdl:binding name=&quot;TestServiceSoapBinding&quot; type=&quot;tns:TestService&quot;&gt;
    &lt;soap:binding style=&quot;document&quot; transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;
    &lt;wsdl:operation name=&quot;sendMessage&quot;&gt;
      &lt;soap:operation soapAction=&quot;&quot; style=&quot;document&quot;/&gt;
      &lt;wsdl:input name=&quot;sendMessage&quot;&gt;
        &lt;soap:body use=&quot;literal&quot;/&gt;
      &lt;/wsdl:input&gt;
      &lt;wsdl:output name=&quot;sendMessageResponse&quot;&gt;
        &lt;soap:body use=&quot;literal&quot;/&gt;
      &lt;/wsdl:output&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:binding&gt;
  &lt;wsdl:service name=&quot;TestService&quot;&gt;
    &lt;wsdl:port binding=&quot;tns:TestServiceSoapBinding&quot; name=&quot;TestServiceImplPort&quot;&gt;
      &lt;soap:address location=&quot;http://localhost:8080/services/TestService&quot;/&gt;
    &lt;/wsdl:port&gt;
  &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;
</code></pre><h2 id="基于cxf的客户端调用webservice接口"><a href="#基于cxf的客户端调用webservice接口" class="headerlink" title="基于cxf的客户端调用webservice接口"></a>基于cxf的客户端调用webservice接口</h2><pre><code>package webservice;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory;
import org.junit.Test;

/**
 * webservice客户端
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月19日 下午9:39:49
 */
public class WebServiceTest {

    @Test
    public void testSend1(){

        // 创建动态客户端
        JaxWsDynamicClientFactory dcf = JaxWsDynamicClientFactory.newInstance();
        Client client = dcf.createClient(&quot;http://localhost:8080/services/TestService?wsdl&quot;);

        // 需要密码的情况需要加上用户名和密码
        // client.getOutInterceptors().add(new ClientLoginInterceptor(USER_NAME,PASS_WORD));
        Object[] objects = new Object[0];
        try {

            // invoke(&quot;方法名&quot;,参数1,参数2,参数3....);
            objects = client.invoke(&quot;sendMessage&quot;, &quot;wyj&quot;);
            System.out.println(&quot;返回数据:&quot; + objects[0]);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre><h2 id="调用后返回结果输出为"><a href="#调用后返回结果输出为" class="headerlink" title="调用后返回结果输出为"></a>调用后返回结果输出为</h2><p><img src="/2017/12/21/SpringBoot整合cxf发布WebService服务和客户端调用WebService服务/TestService-result.png" alt="TestService-result"></p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/wangyuanjun008/wyj-interface-client/blob/master/src/main/java/webservice/WebServiceTest.java" target="_blank" rel="external">SpringBoot整合cxf的WebService客户端地址</a><br><a href="https://github.com/wangyuanjun008/wyj-interface-service/tree/master/src/main/java/com/wyj/webservice" target="_blank" rel="external">SpringBoot整合cxf的WebService服务端地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做公司项目的一个功能需要写WebSerice接口，为了系统得学习WebService，决定写一个测试接口的例子。&lt;br&gt;测试项目中使用的是SpringBoot(spring整合cxf需添加cxf-rt-frontend-jaxws，cxf-rt-transports-
    
    </summary>
    
      <category term="WebService" scheme="http://wangyuanjun.cn/categories/WebService/"/>
    
    
      <category term="WebService" scheme="http://wangyuanjun.cn/tags/WebService/"/>
    
      <category term="SpringBoot" scheme="http://wangyuanjun.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>github-hexo搭建博客之hexo提交百度搜索引擎</title>
    <link href="http://wangyuanjun.cn/2017/12/18/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8Bhexo%E6%8F%90%E4%BA%A4%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <id>http://wangyuanjun.cn/2017/12/18/github-hexo搭建博客之hexo提交百度搜索引擎/</id>
    <published>2017-12-18T09:13:23.000Z</published>
    <updated>2017-12-18T14:35:25.791Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在整理自己的博客想添加一个评论的功能，希望我写的博客能被广大人员所知，突然发现自己写的博客在百度上搜索不到，那我添加评论功能就没有意义，百度一下才知道github禁止了百度爬虫，晕死。折腾了好久才解决，接下来我向大家介绍我的解决方法。</p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><h3 id="1-注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；"><a href="#1-注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；" class="headerlink" title="1.注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；"></a>1.注册域名：我是在dnspod中注册域名的，下面我以dnspod为例；</h3><h3 id="2-绑定域名"><a href="#2-绑定域名" class="headerlink" title="2.绑定域名"></a>2.绑定域名</h3><pre><code>绑定域名分2种情况：CNAME和A记录。
A记录：A记录填写IP，由于不带www方式只能采用A记录，所以必须先才cmd的ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP
CNAME：将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问
</code></pre><p><img src="/2017/12/18/github-hexo搭建博客之hexo提交百度搜索引擎/绑定域名.png" alt="绑定域名"></p>
<h3 id="3-跳转"><a href="#3-跳转" class="headerlink" title="3.跳转"></a>3.跳转</h3><p>在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如 <a href="http://xxxx.com" target="_blank" rel="external">http://xxxx.com</a> ，注意前面没有 http:// ，也没有www，然后使用hexo g &amp;&amp; hexo d上传部署。在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。</p>
<h2 id="验证网站"><a href="#验证网站" class="headerlink" title="验证网站"></a>验证网站</h2><h3 id="1-百度搜索引擎入口："><a href="#1-百度搜索引擎入口：" class="headerlink" title="1.百度搜索引擎入口："></a>1.百度搜索引擎入口：</h3><p><a href="http://ziyuan.baidu.com/linksubmit/url" target="_blank" rel="external">百度搜索引擎入口</a></p>
<h3 id="2-文件验证"><a href="#2-文件验证" class="headerlink" title="2.文件验证:"></a>2.文件验证:</h3><p>先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的public/下面 。<br>然后部署到服务器,输入地址：<a href="http://wangyuanjun008.github.io/baidu_verify_oLfvXCaeZ4.html" target="_blank" rel="external">http://wangyuanjun008.github.io/baidu_verify_oLfvXCaeZ4.html</a> 能访问到就可以点验证按钮(按照百度的引导步骤就好)。</p>
<h3 id="3-网页抓取-1-主动推送-2-自动推送-3-sitemap-4-手动提交"><a href="#3-网页抓取-1-主动推送-2-自动推送-3-sitemap-4-手动提交" class="headerlink" title="3.网页抓取:(1.主动推送 2.自动推送 3.sitemap 4.手动提交 )"></a>3.网页抓取:(1.主动推送 2.自动推送 3.sitemap 4.手动提交 )</h3><p>我选择的是自动推送<br>    自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到\themes\landscape\layout_partial\after_footer.ejs中的最下面就行。<br>    代码如下：</p>
<pre><code>&lt;script&gt;
(function(){
    var bp = document.createElement(&apos;script&apos;);
    var curProtocol = window.location.protocol.split(&apos;:&apos;)[0];
    if (curProtocol === &apos;https&apos;) {
        bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        
    }
    else {
        bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;
    }
    var s = document.getElementsByTagName(&quot;script&quot;)[0];
    s.parentNode.insertBefore(bp, s);
})();
&lt;/script&gt;
</code></pre><p>参考: <a href="https://www.cnblogs.com/tengj/p/5357879.html" target="_blank" rel="external">hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天在整理自己的博客想添加一个评论的功能，希望我写的博客能被广大人员所知，突然发现自己写的博客在百度上搜索不到，那我添加评论功能就没有意义，百度一下才知道github禁止了百度爬虫，晕死。折腾了好久才解决，接下来我向大家介绍我的解决方法。&lt;/p&gt;
&lt;h2 id=&quot;域名&quot;&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://wangyuanjun.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://wangyuanjun.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>github-hexo搭建博客之畅言实现博客的评论</title>
    <link href="http://wangyuanjun.cn/2017/12/18/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E7%95%85%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AF%84%E8%AE%BA/"/>
    <id>http://wangyuanjun.cn/2017/12/18/github-hexo搭建博客之畅言实现博客的评论/</id>
    <published>2017-12-18T07:16:28.000Z</published>
    <updated>2017-12-18T14:48:46.573Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在整理自己的博客想添加一个评论的功能，希望我写的博客能被广大人员所知，解决了域名添加百度搜索引擎之后，我决定用畅言作为我的评论插件。</p>
<h2 id="注册畅言"><a href="#注册畅言" class="headerlink" title="注册畅言"></a>注册畅言</h2><pre><code>进入畅言官网 , 点击右上角 “免费注册”，并填写注册信息
</code></pre><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>详情见之前的博客<br><a href="(http://wangyuanjun.cn/2017/12/18/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8Bhexo%E6%8F%90%E4%BA%A4%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/">github-hexo搭建博客之hexo提交百度搜索引擎</a></p>
<h2 id="登录并进入畅言后台"><a href="#登录并进入畅言后台" class="headerlink" title="登录并进入畅言后台"></a>登录并进入畅言后台</h2><pre><code>注册完后，登录进入畅言官网，获取你的畅言 app id 和 app key。
</code></pre><p><img src="/2017/12/18/github-hexo搭建博客之畅言实现博客的评论/畅言.png" alt="畅言"></p>
<h2 id="使用畅言系统"><a href="#使用畅言系统" class="headerlink" title="使用畅言系统"></a>使用畅言系统</h2><pre><code>在主题的目录下_config.yml，添加上changyan_appid和changyan_conf的值。

#Cmments
comment:
  cloudTie: ## 网易云跟帖(productKey)
  changyan: ## 畅言需在下方配置两个参数，此处不填。
    appid: xxxxxxxxxxx
    appkey: xxxxxxxxxxxxxxxxxxxxxxxx
</code></pre><p>效果:<br><img src="/2017/12/18/github-hexo搭建博客之畅言实现博客的评论/评论.png" alt="评论"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天在整理自己的博客想添加一个评论的功能，希望我写的博客能被广大人员所知，解决了域名添加百度搜索引擎之后，我决定用畅言作为我的评论插件。&lt;/p&gt;
&lt;h2 id=&quot;注册畅言&quot;&gt;&lt;a href=&quot;#注册畅言&quot; class=&quot;headerlink&quot; title=&quot;注册畅言&quot;&gt;&lt;
    
    </summary>
    
      <category term="hexo" scheme="http://wangyuanjun.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://wangyuanjun.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用element ui select下拉框多选，编辑状态下回显数据</title>
    <link href="http://wangyuanjun.cn/2017/12/07/%E4%BD%BF%E7%94%A8element-ui-select%E4%B8%8B%E6%8B%89%E6%A1%86%E5%A4%9A%E9%80%89%EF%BC%8C%E7%BC%96%E8%BE%91%E7%8A%B6%E6%80%81%E4%B8%8B%E5%9B%9E%E6%98%BE%E6%95%B0%E6%8D%AE/"/>
    <id>http://wangyuanjun.cn/2017/12/07/使用element-ui-select下拉框多选，编辑状态下回显数据/</id>
    <published>2017-12-07T14:55:20.000Z</published>
    <updated>2017-12-18T14:58:51.069Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,使用webpack构建vue-cli全家桶<br>在项目中使用的是 element ui 组件库，在使用select多选下拉框时，编辑页面不知道怎么为其赋值回显数据。<br>下拉框的代码如下:</p>
<pre><code>&lt;el-form-item label=&quot;可选角色&quot;&gt;
    &lt;el-select v-model=&quot;commonForm.roles&quot; multiple placeholder=&quot;请选择&quot;&gt;
        &lt;el-option v-for=&quot;item in rolesItems&quot; :key=&quot;item.id&quot; :label=&quot;item.text&quot; :value=&quot;item.id&quot; &gt;&lt;/el-option&gt;
    &lt;/el-select&gt; 
&lt;/el-form-item&gt;
</code></pre><p>猜想:<br>多选下拉框是多条数据，将数据放到数组里面，将数据赋值给多选下拉框，就会有效果。</p>
<p>验证:<br>将多选数据以数组的形式从后台返回到前台，后台字段类型是List<br>返回结果如下:</p>
<p><img src="/2017/12/07/使用element-ui-select下拉框多选，编辑状态下回显数据/ElementUI多选下拉回显数据.png" alt="ElementUI多选下拉回显数据"></p>
<p>查看页面多选回显数据成功</p>
<p>参考地址: <a href="https://github.com/wangyuanjun008/wyj-vue-security/blob/master/src/view/user/user.vue" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security/blob/master/src/view/user/user.vue</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="element ui" scheme="http://wangyuanjun.cn/categories/element-ui/"/>
    
    
      <category term="element ui" scheme="http://wangyuanjun.cn/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>webpack引入jquery以及插件的方法(如ztree)</title>
    <link href="http://wangyuanjun.cn/2017/12/06/webpack%E5%BC%95%E5%85%A5jquery%E4%BB%A5%E5%8F%8A%E6%8F%92%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95-%E5%A6%82ztree/"/>
    <id>http://wangyuanjun.cn/2017/12/06/webpack引入jquery以及插件的方法-如ztree/</id>
    <published>2017-12-06T15:27:16.000Z</published>
    <updated>2017-12-18T15:07:15.350Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,使用webpack构建vue-cli全家桶<br>在项目中需要用到树插件，但是我觉得element ui 自带的树组件不好用，最主要的问题就是后台返回到前台的数据用到递归，不太好做，所以想到了用ztree树插件来做。</p>
<p>安装 ztree (会自动下载依赖的 jquery ，所以不用下 jquery )</p>
<pre><code>npm install ztree --save-dev
</code></pre><p>在需要的地方引入资源</p>
<pre><code>import $ from &apos;jquery&apos;
import &apos;ztree&apos;
</code></pre><p>但是报错说ztree找不到jquery，报错如下:<br><img src="/2017/12/06/webpack引入jquery以及插件的方法-如ztree/webpack引入插件问题.png" alt="webpack引入插件问题"></p>
<p>配置jquery<br>由于 ztree 依赖于 jQuery，所以在代码中 import jQuery from ‘jquery’ 是不够的，这只是解决了自己代码对 jQuery 的依赖，在此处使用了webpack.ProvidePlugin</p>
<p>解决方案：<br><img src="/2017/12/06/webpack引入jquery以及插件的方法-如ztree/解决webpack引入插件问题.png" alt="解决webpack引入插件问题"><br>在 webpack.base.conf.js 头部添加</p>
<pre><code>var webpack = require(&apos;webpack&apos;)
</code></pre><p>在 resolve 后边添加</p>
<pre><code>plugins: [
    new webpack.ProvidePlugin({
          $: &quot;jquery&quot;,
          jQuery: &quot;jquery&quot;,
          &quot;window.jQuery&quot;: &quot;jquery&quot;
    })
] 
</code></pre><p>引入ztree<br>在 main.js 中，加入如下代码</p>
<pre><code>import &apos;ztree/css/zTreeStyle/zTreeStyle.css&apos;
import &apos;ztree&apos;
</code></pre><p>项目效果:<br><img src="/2017/12/06/webpack引入jquery以及插件的方法-如ztree/webpack引入ztree插件.png" alt="webpack引入ztree插件"> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="webpack" scheme="http://wangyuanjun.cn/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangyuanjun.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>解决element ui select下拉框不回显数据问题</title>
    <link href="http://wangyuanjun.cn/2017/12/05/%E8%A7%A3%E5%86%B3element-ui-select%E4%B8%8B%E6%8B%89%E6%A1%86%E4%B8%8D%E5%9B%9E%E6%98%BE%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://wangyuanjun.cn/2017/12/05/解决element-ui-select下拉框不回显数据问题/</id>
    <published>2017-12-05T14:06:34.000Z</published>
    <updated>2017-12-18T15:00:18.635Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,使用webpack构建vue-cli全家桶<br>在项目中用到 el-select 时遇到一个问题，就是在编辑表单时，下拉框的不显示数据，前台代码如下:</p>
<pre><code>&lt;el-select v-model=&quot;commonForm.status&quot; clearable placeholder=&quot;请选择&quot;&gt;
    &lt;el-option v-for=&quot;item in items&quot; :key=&quot;item.id&quot; :label=&quot;item.text&quot; :value=&quot;item.id&quot; &gt;&lt;/el-option&gt;
&lt;/el-select&gt; 
</code></pre><p>在浏览器中查看列表返回的数据:<br><img src="/2017/12/05/解决element-ui-select下拉框不回显数据问题/el-select下拉不显示数据.png" alt="el-select下拉不显示数据"></p>
<p>在浏览器中查看下拉框数据源的数据:<br><img src="/2017/12/05/解决element-ui-select下拉框不回显数据问题/el-select下拉不显示数据1.png" alt="el-select下拉不显示数据1"></p>
<p>发现select下拉的id和v-model里边的id类型不一致，修改后台下拉框数据源返回类型，下拉框显示数据成功。<br><img src="/2017/12/05/解决element-ui-select下拉框不回显数据问题/el-select下拉不显示数据2.png" alt="el-select下拉不显示数据2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="element ui" scheme="http://wangyuanjun.cn/categories/element-ui/"/>
    
    
      <category term="element ui" scheme="http://wangyuanjun.cn/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>解决SpringMVC接收不到axios发送post请求的数据问题</title>
    <link href="http://wangyuanjun.cn/2017/12/04/%E8%A7%A3%E5%86%B3SpringMVC%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%88%B0axios%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E7%9A%84%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://wangyuanjun.cn/2017/12/04/解决SpringMVC接收不到axios发送post请求的数据问题/</id>
    <published>2017-12-04T13:10:03.000Z</published>
    <updated>2017-12-18T14:55:23.795Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,使用webpack构建vue-cli全家桶<br>在项目中需要用到axios与后端接口交互的时候，使用POST请求时，后台接收不到前台传的数据<br>js代码如下:</p>
<pre><code>export const addDataGroup = params =&gt; { return axios.post(`/remote/dataGroup/add`, params ); };
</code></pre><p>请求的数据是:</p>
<p><img src="/2017/12/04/解决SpringMVC接收不到axios发送post请求的数据问题/axios请求post的数据.png" alt="axios请求post的数据.png"></p>
<p>后台代码代码如下:<br><img src="/2017/12/04/解决SpringMVC接收不到axios发送post请求的数据问题/axios请求post接收不到数据.png" alt="axios请求post接收不到数据"></p>
<p>解决如下:<br>方法一 ：在项目中安装qs库作为格式化的依赖： </p>
<pre><code>npm install qs --save-dev 

修改js代码:

export const addDataGroup = params =&gt; { return axios.post(`/remote/dataGroup/add`, qs.stringify(params) ); };
</code></pre><p>方法二：如果不想修改前端代码的话，需要对后台的代码做修改：<br>通过翻看axios的文档得知：在axios使用Post发送数据时，默认是直接把json放到请求体中提交到后端的，而后端获取数据的方式有两种，一种是@RequestParam（通过字符串中解析出参数）,另一种是@ResponseBody（从请求体中取参数），很显然，我们的后端用了第一种方式。</p>
<p>参考文档：<a href="http://www.jzdlink.com/studynotes/201709141385.html" target="_blank" rel="external">http://www.jzdlink.com/studynotes/201709141385.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="axios" scheme="http://wangyuanjun.cn/categories/axios/"/>
    
    
      <category term="axios" scheme="http://wangyuanjun.cn/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>在vue中使用axios跨域访问数据，用proxyTable解决跨域问题</title>
    <link href="http://wangyuanjun.cn/2017/12/04/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8axios%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%94%A8proxyTable%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://wangyuanjun.cn/2017/12/04/在vue中使用axios跨域访问数据，用proxyTable解决跨域问题/</id>
    <published>2017-12-04T13:04:58.000Z</published>
    <updated>2017-12-18T14:52:21.129Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,使用webpack构建vue-cli全家桶<br>在项目中需要用到axios与后端接口交互的时候，遇到了跨域的问题，浏览器报错如下:</p>
<p><img src="/2017/12/04/在vue中使用axios跨域访问数据，用proxyTable解决跨域问题/axios跨域报错.png" alt="axios跨域报错"></p>
<p><img src="/2017/12/04/在vue中使用axios跨域访问数据，用proxyTable解决跨域问题/axios跨域返回数据.png" alt="axios跨域返回数据"></p>
<p>能看到是有数据数据返回到前台的，说明前台没有接收到</p>
<p>解决方法:</p>
<p>进入你的vue项目下 -&gt; config -&gt; index.js，里面的dev对象下有一个proxyTable的属性，这个参数主要是一个地址映射表，可以帮助我们将复杂的url简化。</p>
<p><img src="/2017/12/04/在vue中使用axios跨域访问数据，用proxyTable解决跨域问题/axios解决跨域.png" alt="axios解决跨域"></p>
<p>如果请求的地址是 <a href="http://127.0.0.1:8081/remote/1" target="_blank" rel="external">http://127.0.0.1:8081/remote/1</a> ，使用proxyTable配置，请求的地址变为 /remote/1。在proxyTable中有个参数是changeOrigin，如果设置为true,那么本地会虚拟一个服务端接收你的请求并代你发送该请求，这样就不会有跨域问题了，当然这只适用于开发环境。</p>
<p>参考文档：<a href="https://vuejs-templates.github.io/webpack/proxy.html" target="_blank" rel="external">https://vuejs-templates.github.io/webpack/proxy.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="axios" scheme="http://wangyuanjun.cn/categories/axios/"/>
    
    
      <category term="axios" scheme="http://wangyuanjun.cn/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>使用webpack构建vue-cli项目,写scss脚本语言报错</title>
    <link href="http://wangyuanjun.cn/2017/11/28/%E4%BD%BF%E7%94%A8webpack%E6%9E%84%E5%BB%BAvue-cli%E9%A1%B9%E7%9B%AE-%E5%86%99scss%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E6%8A%A5%E9%94%99/"/>
    <id>http://wangyuanjun.cn/2017/11/28/使用webpack构建vue-cli项目-写scss脚本语言报错/</id>
    <published>2017-11-28T06:44:20.000Z</published>
    <updated>2017-12-18T01:52:29.277Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目的后端是地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>前端地址是 <a href="https://github.com/wangyuanjun008/wyj-vue-security.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-vue-security.git</a> ,使用的前端语言是vue,但是我在使用webpack构建vue项目的时候，使用scss脚本语言是报错,错误如下:</p>
<pre><code>error  in ./src/components/home.vue

Syntax Error: Unclosed block


 @ ./node_modules/vue-style-loader!./node_modules/css-loader?{&quot;sourceMap&quot;:false}!./node_modules/vue-loader/lib/style-compiler?{&quot;vue&quot;:true,&quot;id&quot;:&quot;data-v-7cbbe74f&quot;,&quot;scoped&quot;:false,&quot;hasInlineConfig&quot;:false}!./node_modules/vue-loader/lib/selector.js?type=styles&amp;index=0&amp;bustCache!./src/components/home.vue 4:14-317 13:3-17:5 14:22-325
 @ ./src/components/home.vue
 @ ./src/router/index.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://localhost:8080 webpack/hot/dev-server ./src/main.js
</code></pre><p>后来上网查询，如果你需要使用sass/scss定义样式，那么为了能正常编译，还需要做如下配置：　</p>
<pre><code>//因为sass-loader依赖于node-sass，所以还要安装node-sass
npm install --save-dev node-sass
//在项目下，运行下列命令行
npm install --save-dev scss-loader
npm install --save-dev sass-loader
</code></pre><p>因为资源是到国外下载的，如果长时间未响应或者报错，可以试用淘宝镜像</p>
<pre><code>npm install --save node-sass --registry=https://registry.npm.taobao.org --disturl=https://npm.taobao.org/dist --sass-binary-site=http://npm.taobao.org/mirrors/node-sass
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目的后端是地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="webpack" scheme="http://wangyuanjun.cn/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangyuanjun.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Springboot RedisTemplate 报No qualifying bean of type... 不能按类型装配注入</title>
    <link href="http://wangyuanjun.cn/2017/11/23/Springboot-RedisTemplate-%E6%8A%A5No-qualifying-bean-of-type-%E4%B8%8D%E8%83%BD%E6%8C%89%E7%B1%BB%E5%9E%8B%E8%A3%85%E9%85%8D%E6%B3%A8%E5%85%A5/"/>
    <id>http://wangyuanjun.cn/2017/11/23/Springboot-RedisTemplate-报No-qualifying-bean-of-type-不能按类型装配注入/</id>
    <published>2017-11-23T09:40:09.000Z</published>
    <updated>2017-12-18T01:52:00.255Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目,项目地址: <a href="https://github.com/wangyuanjun008/wyj-springboot.github.com" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-springboot.github.com</a><br>在项目中与redis集成，使用的依赖是:</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;    
</code></pre><p>在Controller中使用如下:</p>
<pre><code>@Autowired
private RedisTemplate&lt;String, DataGroup&gt; redisTemplate;
</code></pre><p>项目启动报错如下:</p>
<pre><code>Description:

Field redisTemplate in com.wyj.controller.data.DataGroupController required a bean of type &apos;org.springframework.data.redis.core.RedisTemplate&apos; that could not be found.
    - Bean method &apos;redisTemplate&apos; in &apos;RedisAutoConfiguration.RedisConfiguration&apos; not loaded because @ConditionalOnMissingBean (names: redisTemplate; SearchStrategy: all) found bean &apos;redisTemplate&apos;


Action:

Consider revisiting the conditions above or defining a bean of type &apos;org.springframework.data.redis.core.RedisTemplate&apos; in your configuration.

2017-11-23 17:36:38.299 ERROR 5784 --- [           main] o.s.test.context.TestContextManager      : Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener@3b2cf7ab] to prepare test instance [com.wyj.WyjSpringbootApplicationTests@6cc8adff]

java.lang.IllegalStateException: Failed to load ApplicationContext
    at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:189) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:131) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.12.jar:4.12]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [junit-4.12.jar:4.12]
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [junit-4.12.jar:4.12]
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [junit-4.12.jar:4.12]
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [junit-4.12.jar:4.12]
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [junit-4.12.jar:4.12]
    at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12]
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191) [spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283) [surefire-junit4-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173) [surefire-junit4-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) [surefire-junit4-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128) [surefire-junit4-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) [surefire-booter-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) [surefire-booter-2.18.1.jar:2.18.1]
    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) [surefire-booter-2.18.1.jar:2.18.1]
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;dataGroupController&apos;: Unsatisfied dependency expressed through field &apos;redisTemplate&apos;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &apos;org.springframework.data.redis.core.RedisTemplate&lt;java.lang.String, com.wyj.entity.data.DataGroup&gt;&apos; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:588) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) ~[spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) ~[spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) ~[spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:120) ~[spring-boot-test-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) ~[spring-test-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    ... 26 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &apos;org.springframework.data.redis.core.RedisTemplate&lt;java.lang.String, com.wyj.entity.data.DataGroup&gt;&apos; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1493) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1104) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    ... 44 common frames omitted    
</code></pre><p>苦思冥想多时，上网查阅资料，看springboot文档，结果如下</p>
<pre><code>If you add a @Bean of your own of any of the auto-configured types it will replace the default (except in the case of RedisTemplate the exclusion is based on the bean name ‘redisTemplate’ not its type). 
</code></pre><p>将代码改成:</p>
<pre><code>@Resource 
private RedisTemplate&lt;String, DataGroup&gt; redisTemplate;        
</code></pre><p>项目启动不报错，完美解决!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目,项目地址: &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-springboot.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wa
    
    </summary>
    
      <category term="SpringBoot" scheme="http://wangyuanjun.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://wangyuanjun.cn/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
