<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>守望的稻草人</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangyuanjun.cn/"/>
  <updated>2018-01-29T09:03:30.935Z</updated>
  <id>http://wangyuanjun.cn/</id>
  
  <author>
    <name>WangYuanJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决微信公共号开发出现 redirect_uri域名与后台配置不一致，错误码10003 错误</title>
    <link href="http://wangyuanjun.cn/2018/01/27/%E8%A7%A3%E5%86%B3%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E5%87%BA%E7%8E%B0-redirect-uri%E5%9F%9F%E5%90%8D%E4%B8%8E%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE%E4%B8%8D%E4%B8%80%E8%87%B4%EF%BC%8C%E9%94%99%E8%AF%AF%E7%A0%8110003-%E9%94%99%E8%AF%AF/"/>
    <id>http://wangyuanjun.cn/2018/01/27/解决微信公共号开发出现-redirect-uri域名与后台配置不一致，错误码10003-错误/</id>
    <published>2018-01-27T15:27:54.000Z</published>
    <updated>2018-01-29T09:03:30.935Z</updated>
    
    <content type="html"><![CDATA[<p>做微信网页OAuth2.0 授权开发，进入授权页面是报错，redirect_uri域名与后台配置不一致，错误码10003<br><img src="/2018/01/27/解决微信公共号开发出现-redirect-uri域名与后台配置不一致，错误码10003-错误/报错.png" alt="报错"></p>
<p>问题原因：<font color="red">可能OAuth2.0网页授权页面没有填写授权回调页面域名，或者域名前面加了 http://</font></p>
<p>解决方法： 到 微信公共平台-&gt;测试号管理-&gt;体验接口权限表-&gt;网页服务-&gt;网页帐号-&gt;修改 ，填写域名<br><img src="/2018/01/27/解决微信公共号开发出现-redirect-uri域名与后台配置不一致，错误码10003-错误/b.png" alt="b"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做微信网页OAuth2.0 授权开发，进入授权页面是报错，redirect_uri域名与后台配置不一致，错误码10003&lt;br&gt;&lt;img src=&quot;/2018/01/27/解决微信公共号开发出现-redirect-uri域名与后台配置不一致，错误码10003-错误/报错.p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——微信网页授权(八)</title>
    <link href="http://wangyuanjun.cn/2018/01/27/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83-%E5%85%AB/"/>
    <id>http://wangyuanjun.cn/2018/01/27/微信公共号开发教程java版——微信网页授权-八/</id>
    <published>2018-01-27T08:17:17.000Z</published>
    <updated>2018-01-27T14:34:24.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：微信网页授权介绍"><a href="#一：微信网页授权介绍" class="headerlink" title="一：微信网页授权介绍"></a>一：微信网页授权介绍</h1><p>官网详细介绍:<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140839" target="_blank" rel="external">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140839</a><br>如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p>
<h2 id="关于网页授权回调域名的说明"><a href="#关于网页授权回调域名的说明" class="headerlink" title="关于网页授权回调域名的说明"></a>关于网页授权回调域名的说明</h2><p>1、在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头；</p>
<p>2、授权回调域名配置规范为全域名，比如需要网页授权的域名为：www.qq.com，配置以后此域名下面的页面<a href="http://www.qq.com/music.html" target="_blank" rel="external">http://www.qq.com/music.html</a> 、 <a href="http://www.qq.com/login.html" target="_blank" rel="external">http://www.qq.com/login.html</a> 都可以进行OAuth2.0鉴权。但<a href="http://pay.qq.com" target="_blank" rel="external">http://pay.qq.com</a> 、 <a href="http://music.qq.com" target="_blank" rel="external">http://music.qq.com</a> 、 <a href="http://qq.com无法进行OAuth2.0鉴权" target="_blank" rel="external">http://qq.com无法进行OAuth2.0鉴权</a></p>
<p>3、如果公众号登录授权给了第三方开发者来进行管理，则不必做任何设置，由第三方代替公众号实现网页授权即可</p>
<h2 id="关于网页授权的两种scope的区别说明"><a href="#关于网页授权的两种scope的区别说明" class="headerlink" title="关于网页授权的两种scope的区别说明"></a>关于网页授权的两种scope的区别说明</h2><p>1、以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）</p>
<p>2、以snsapi_userinfo为scope发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。</p>
<p>3、用户管理类接口中的“获取用户基本信息接口”，是在用户和公众号产生消息交互或关注后事件推送后，才能根据用户OpenID来获取用户基本信息。这个接口，包括其他微信接口，都是需要该用户（即openid）关注了公众号后，才能调用成功的。</p>
<h2 id="关于网页授权access-token和普通access-token的区别"><a href="#关于网页授权access-token和普通access-token的区别" class="headerlink" title="关于网页授权access_token和普通access_token的区别"></a>关于网页授权access_token和普通access_token的区别</h2><p>1、微信网页授权是通过OAuth2.0机制实现的，在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证（网页授权access_token），通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息；</p>
<p>2、其他微信接口，需要通过基础支持中的“获取access_token”接口来获取到的普通access_token调用。</p>
<h2 id="关于UnionID机制"><a href="#关于UnionID机制" class="headerlink" title="关于UnionID机制"></a>关于UnionID机制</h2><p>1、请注意，网页授权获取用户基本信息也遵循UnionID机制。即如果开发者有在多个公众号，或在公众号、移动应用之间统一用户帐号的需求，需要前往微信开放平台（open.weixin.qq.com）绑定公众号后，才可利用UnionID机制来满足上述需求。</p>
<p>2、UnionID机制的作用说明：如果开发者拥有多个移动应用、网站应用和公众帐号，可通过获取用户基本信息中的unionid来区分用户的唯一性，因为同一用户，对同一个微信开放平台下的不同应用（移动应用、网站应用和公众帐号），unionid是相同的。</p>
<h2 id="关于特殊场景下的静默授权"><a href="#关于特殊场景下的静默授权" class="headerlink" title="关于特殊场景下的静默授权"></a>关于特殊场景下的静默授权</h2><p>1、上面已经提到，对于以snsapi_base为scope的网页授权，就静默授权的，用户无感知；</p>
<p>2、对于已关注公众号的用户，如果用户从公众号的会话或者自定义菜单进入本公众号的网页授权页，即使是scope为snsapi_userinfo，也是静默授权，用户无感知。</p>
<p><strong>具体而言，网页授权流程分为四步：</strong></p>
<p>1、引导用户进入授权页面同意授权，获取code</p>
<p>2、通过code换取网页授权access_token（与基础支持中的access_token不同）</p>
<p>3、如果需要，开发者可以刷新网页授权access_token，避免过期</p>
<p>4、通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</p>
<h1 id="二：网页授权的实现"><a href="#二：网页授权的实现" class="headerlink" title="二：网页授权的实现"></a>二：网页授权的实现</h1><h2 id="1-用户同意授权，获取code"><a href="#1-用户同意授权，获取code" class="headerlink" title="1.用户同意授权，获取code"></a>1.用户同意授权，获取code</h2><p>在确保微信公众账号拥有授权作用域（scope参数）的权限的前提下（服务号获得高级接口后，默认拥有scope参数中的snsapi_base和snsapi_userinfo），引导关注者打开如下页面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect 若提示“该链接无法访问”，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限。</div></pre></td></tr></table></figure>
<p>尤其注意：由于授权操作安全等级较高，所以在发起授权请求时，微信会对授权链接做正则强匹配校验，如果链接的参数顺序不对，授权页面将无法正常访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">参考链接(请在微信客户端中打开此链接体验):</div><div class="line">scope为snsapi_base</div><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect</div><div class="line">scope为snsapi_userinfo</div><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf0e81c3bee622d60&amp;redirect_uri=http%3A%2F%2Fnba.bluewebgame.com%2Foauth_response.php&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect</div></pre></td></tr></table></figure>
<p>尤其注意：跳转回调redirect_uri，应当使用https链接来确保授权code的安全性。</p>
<p><strong>参数说明</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">是否必须</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>appid</td>
<td style="text-align:right">是</td>
<td style="text-align:center">公众号的唯一标识</td>
</tr>
<tr>
<td>redirect_uri</td>
<td style="text-align:right">是</td>
<td style="text-align:center">授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理</td>
</tr>
<tr>
<td>response_type</td>
<td style="text-align:right">是</td>
<td style="text-align:center">返回类型，请填写code</td>
</tr>
<tr>
<td>scope</td>
<td style="text-align:right">是</td>
<td style="text-align:center">应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td>
</tr>
<tr>
<td>state</td>
<td style="text-align:right">否</td>
<td style="text-align:center">重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</td>
</tr>
<tr>
<td>#wechat_redirect</td>
<td style="text-align:right">是</td>
<td style="text-align:center">无论直接打开还是做页面302重定向时候，必须带此参数</td>
</tr>
</tbody>
</table>
<p>下图为scope等于snsapi_userinfo时的授权页面：<br><img src="/2018/01/27/微信公共号开发教程java版——微信网页授权-八/授权页面.jpg" alt="授权页面"></p>
<p><strong>用户同意授权后</strong><br>如果用户同意授权，页面将跳转至 redirect_uri/?code=CODE&amp;state=STATE。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">code说明 ： code作为换取access_token的票据，每次用户授权带上的code将不一样，code只能使用一次，5分钟未被使用自动过期。</div></pre></td></tr></table></figure>
<p><strong>错误返回码说明如下：</strong></p>
<table>
<thead>
<tr>
<th>返回码</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>10003</td>
<td style="text-align:center">redirect_uri域名与后台配置不一致</td>
</tr>
<tr>
<td>10004</td>
<td style="text-align:center">此公众号被封禁</td>
</tr>
<tr>
<td>10005</td>
<td style="text-align:center">此公众号并没有这些scope的权限</td>
</tr>
<tr>
<td>10006</td>
<td style="text-align:center">必须关注此测试号</td>
</tr>
<tr>
<td>10009</td>
<td style="text-align:center">操作太频繁了，请稍后重试</td>
</tr>
<tr>
<td>10010</td>
<td style="text-align:center">scope不能为空</td>
</tr>
<tr>
<td>10011</td>
<td style="text-align:center">redirect_uri不能为空</td>
</tr>
<tr>
<td>10012</td>
<td style="text-align:center">appid不能为空</td>
</tr>
<tr>
<td>10013</td>
<td style="text-align:center">state不能为空</td>
</tr>
<tr>
<td>10015</td>
<td style="text-align:center">公众号未授权第三方平台，请检查授权状态</td>
</tr>
<tr>
<td>10016</td>
<td style="text-align:center">不支持微信开放平台的Appid，请使用公众号Appid</td>
</tr>
</tbody>
</table>
<h2 id="2-通过网页授权获取的用户信息"><a href="#2-通过网页授权获取的用户信息" class="headerlink" title="2. 通过网页授权获取的用户信息"></a>2. 通过网页授权获取的用户信息</h2><p><strong>用户信息类：SNSUserInfo类</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 通过网页授权获取的用户信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月24日 下午3:09:02</div><div class="line"> */</div><div class="line">public class SNSUserInfo &#123;</div><div class="line"></div><div class="line">    // 用户标识</div><div class="line">    private String openId;</div><div class="line"></div><div class="line">    // 用户昵称</div><div class="line">    private String nickname;</div><div class="line"></div><div class="line">    // 性别（1是男性，2是女性，0是未知）</div><div class="line">    private int sex;</div><div class="line"></div><div class="line">    // 国家</div><div class="line">    private String country;</div><div class="line"></div><div class="line">    // 省份</div><div class="line">    private String province;</div><div class="line"></div><div class="line">    // 城市</div><div class="line">    private String city;</div><div class="line"></div><div class="line">    // 用户头像链接</div><div class="line">    private String headImgUrl;</div><div class="line"></div><div class="line">    // 用户特权信息</div><div class="line">    private List&lt;String&gt; privilegeList;</div><div class="line"></div><div class="line">    public String getOpenId() &#123;</div><div class="line">        return openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setOpenId(String openId) &#123;</div><div class="line">        this.openId = openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getNickname() &#123;</div><div class="line">        return nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setNickname(String nickname) &#123;</div><div class="line">        this.nickname = nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSex() &#123;</div><div class="line">        return sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSex(int sex) &#123;</div><div class="line">        this.sex = sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCountry() &#123;</div><div class="line">        return country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCountry(String country) &#123;</div><div class="line">        this.country = country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getProvince() &#123;</div><div class="line">        return province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setProvince(String province) &#123;</div><div class="line">        this.province = province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCity() &#123;</div><div class="line">        return city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCity(String city) &#123;</div><div class="line">        this.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getHeadImgUrl() &#123;</div><div class="line">        return headImgUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setHeadImgUrl(String headImgUrl) &#123;</div><div class="line">        this.headImgUrl = headImgUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;String&gt; getPrivilegeList() &#123;</div><div class="line">        return privilegeList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPrivilegeList(List&lt;String&gt; privilegeList) &#123;</div><div class="line">        this.privilegeList = privilegeList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-凭证实体类"><a href="#3-凭证实体类" class="headerlink" title="3.凭证实体类"></a>3.凭证实体类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * 凭证</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:19:14</div><div class="line"> */</div><div class="line">public class Token &#123;</div><div class="line"></div><div class="line">    // 接口访问凭证</div><div class="line">    private String accessToken;</div><div class="line"></div><div class="line">    // 凭证有效期，单位：秒</div><div class="line">    private int expiresIn;</div><div class="line"></div><div class="line">    public String getAccessToken() &#123;</div><div class="line">        return accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAccessToken(String accessToken) &#123;</div><div class="line">        this.accessToken = accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getExpiresIn() &#123;</div><div class="line">        return expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setExpiresIn(int expiresIn) &#123;</div><div class="line">        this.expiresIn = expiresIn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-网页授权信息-WeixinOauth2Token类"><a href="#4-网页授权信息-WeixinOauth2Token类" class="headerlink" title="4.网页授权信息 WeixinOauth2Token类"></a>4.网页授权信息 WeixinOauth2Token类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 网页授权信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月24日 下午3:10:03</div><div class="line"> */</div><div class="line">public class WeixinOauth2Token &#123;</div><div class="line"></div><div class="line">    // 网页授权接口调用凭证</div><div class="line">    private String accessToken;</div><div class="line"></div><div class="line">    // 凭证有效时长</div><div class="line">    private int expiresIn;</div><div class="line"></div><div class="line">    // 用于刷新凭证</div><div class="line">    private String refreshToken;</div><div class="line"></div><div class="line">    // 用户标识</div><div class="line">    private String openId;</div><div class="line"></div><div class="line">    // 用户授权作用域</div><div class="line">    private String scope;</div><div class="line"></div><div class="line">    public String getAccessToken() &#123;</div><div class="line">        return accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAccessToken(String accessToken) &#123;</div><div class="line">        this.accessToken = accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getExpiresIn() &#123;</div><div class="line">        return expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setExpiresIn(int expiresIn) &#123;</div><div class="line">        this.expiresIn = expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getRefreshToken() &#123;</div><div class="line">        return refreshToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setRefreshToken(String refreshToken) &#123;</div><div class="line">        this.refreshToken = refreshToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getOpenId() &#123;</div><div class="line">        return openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setOpenId(String openId) &#123;</div><div class="line">        this.openId = openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getScope() &#123;</div><div class="line">        return scope;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setScope(String scope) &#123;</div><div class="line">        this.scope = scope;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-微信用户的基本信息WeixinUserInfo类"><a href="#5-微信用户的基本信息WeixinUserInfo类" class="headerlink" title="5.微信用户的基本信息WeixinUserInfo类"></a>5.微信用户的基本信息WeixinUserInfo类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 微信用户的基本信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月24日 上午10:05:42</div><div class="line"> */</div><div class="line">public class WeixinUserInfo &#123;</div><div class="line"></div><div class="line">    // 用户的标识</div><div class="line">    private String openId;</div><div class="line"></div><div class="line">    // 关注状态（1是关注，0是未关注），未关注时获取不到其余信息</div><div class="line">    private int subscribe;</div><div class="line"></div><div class="line">    // 用户关注时间，为时间戳。如果用户曾多次关注，则取最后关注时间</div><div class="line">    private String subscribeTime;</div><div class="line"></div><div class="line">    // 昵称</div><div class="line">    private String nickname;</div><div class="line"></div><div class="line">    // 用户的性别（1是男性，2是女性，0是未知）</div><div class="line">    private int sex;</div><div class="line"></div><div class="line">    // 用户所在国家</div><div class="line">    private String country;</div><div class="line"></div><div class="line">    // 用户所在省份</div><div class="line">    private String province;</div><div class="line"></div><div class="line">    // 用户所在城市</div><div class="line">    private String city;</div><div class="line"></div><div class="line">    // 用户的语言，简体中文为zh_CN</div><div class="line">    private String language;</div><div class="line"></div><div class="line">    // 用户头像</div><div class="line">    private String headImgUrl;</div><div class="line"></div><div class="line">    public String getOpenId() &#123;</div><div class="line">        return openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setOpenId(String openId) &#123;</div><div class="line">        this.openId = openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSubscribe() &#123;</div><div class="line">        return subscribe;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubscribe(int subscribe) &#123;</div><div class="line">        this.subscribe = subscribe;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSubscribeTime() &#123;</div><div class="line">        return subscribeTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubscribeTime(String subscribeTime) &#123;</div><div class="line">        this.subscribeTime = subscribeTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getNickname() &#123;</div><div class="line">        return nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setNickname(String nickname) &#123;</div><div class="line">        this.nickname = nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSex() &#123;</div><div class="line">        return sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSex(int sex) &#123;</div><div class="line">        this.sex = sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCountry() &#123;</div><div class="line">        return country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCountry(String country) &#123;</div><div class="line">        this.country = country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getProvince() &#123;</div><div class="line">        return province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setProvince(String province) &#123;</div><div class="line">        this.province = province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCity() &#123;</div><div class="line">        return city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCity(String city) &#123;</div><div class="line">        this.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLanguage() &#123;</div><div class="line">        return language;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLanguage(String language) &#123;</div><div class="line">        this.language = language;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getHeadImgUrl() &#123;</div><div class="line">        return headImgUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setHeadImgUrl(String headImgUrl) &#123;</div><div class="line">        this.headImgUrl = headImgUrl;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-获取网页授权凭证及获取用户信息"><a href="#6-获取网页授权凭证及获取用户信息" class="headerlink" title="6.获取网页授权凭证及获取用户信息"></a>6.获取网页授权凭证及获取用户信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.SNSUserInfo;</div><div class="line">import com.wyj.wechart.pojo.WeixinOauth2Token;</div><div class="line"></div><div class="line">import net.sf.json.JSONArray;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line">/**</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月24日 下午3:19:44</div><div class="line"> */</div><div class="line">public class AdvancedUtil &#123;</div><div class="line"></div><div class="line">    private static Logger log = LoggerFactory.getLogger(AdvancedUtil.class);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取网页授权凭证</div><div class="line">     * </div><div class="line">     * @param appId</div><div class="line">     *            公众账号的唯一标识</div><div class="line">     * @param appSecret</div><div class="line">     *            公众账号的密钥</div><div class="line">     * @param code</div><div class="line">     * @return WeixinAouth2Token</div><div class="line">     */</div><div class="line">    public static WeixinOauth2Token getOauth2AccessToken(String appId, String appSecret, String code) &#123;</div><div class="line">        WeixinOauth2Token wat = null;</div><div class="line">        // 拼接请求地址</div><div class="line">        String requestUrl = &quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code&quot;;</div><div class="line">        requestUrl = requestUrl.replace(&quot;APPID&quot;, appId);</div><div class="line">        requestUrl = requestUrl.replace(&quot;SECRET&quot;, appSecret);</div><div class="line">        requestUrl = requestUrl.replace(&quot;CODE&quot;, code);</div><div class="line">        // 获取网页授权凭证</div><div class="line">        JSONObject jsonObject = CommonUtil.httpsRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                wat = new WeixinOauth2Token();</div><div class="line">                wat.setAccessToken(jsonObject.getString(&quot;access_token&quot;));</div><div class="line">                wat.setExpiresIn(jsonObject.getInt(&quot;expires_in&quot;));</div><div class="line">                wat.setRefreshToken(jsonObject.getString(&quot;refresh_token&quot;));</div><div class="line">                wat.setOpenId(jsonObject.getString(&quot;openid&quot;));</div><div class="line">                wat.setScope(jsonObject.getString(&quot;scope&quot;));</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                wat = null;</div><div class="line">                int errorCode = jsonObject.getInt(&quot;errcode&quot;);</div><div class="line">                String errorMsg = jsonObject.getString(&quot;errmsg&quot;);</div><div class="line">                log.error(&quot;获取网页授权凭证失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, errorCode, errorMsg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return wat;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 通过网页授权获取用户信息</div><div class="line">     * </div><div class="line">     * @param accessToken</div><div class="line">     *            网页授权接口调用凭证</div><div class="line">     * @param openId</div><div class="line">     *            用户标识</div><div class="line">     * @return SNSUserInfo</div><div class="line">     */</div><div class="line">    @SuppressWarnings(&#123; &quot;deprecation&quot;, &quot;unchecked&quot; &#125;)</div><div class="line">    public static SNSUserInfo getSNSUserInfo(String accessToken, String openId) &#123;</div><div class="line">        SNSUserInfo snsUserInfo = null;</div><div class="line">        // 拼接请求地址</div><div class="line">        String requestUrl = &quot;https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&quot;;</div><div class="line">        requestUrl = requestUrl.replace(&quot;ACCESS_TOKEN&quot;, accessToken).replace(&quot;OPENID&quot;, openId);</div><div class="line">        // 通过网页授权获取用户信息</div><div class="line">        JSONObject jsonObject = CommonUtil.httpsRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line"></div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                snsUserInfo = new SNSUserInfo();</div><div class="line">                // 用户的标识</div><div class="line">                snsUserInfo.setOpenId(jsonObject.getString(&quot;openid&quot;));</div><div class="line">                // 昵称</div><div class="line">                snsUserInfo.setNickname(jsonObject.getString(&quot;nickname&quot;));</div><div class="line">                // 性别（1是男性，2是女性，0是未知）</div><div class="line">                snsUserInfo.setSex(jsonObject.getInt(&quot;sex&quot;));</div><div class="line">                // 用户所在国家</div><div class="line">                snsUserInfo.setCountry(jsonObject.getString(&quot;country&quot;));</div><div class="line">                // 用户所在省份</div><div class="line">                snsUserInfo.setProvince(jsonObject.getString(&quot;province&quot;));</div><div class="line">                // 用户所在城市</div><div class="line">                snsUserInfo.setCity(jsonObject.getString(&quot;city&quot;));</div><div class="line">                // 用户头像</div><div class="line">                snsUserInfo.setHeadImgUrl(jsonObject.getString(&quot;headimgurl&quot;));</div><div class="line">                // 用户特权信息</div><div class="line">                snsUserInfo.setPrivilegeList(JSONArray.toList(jsonObject.getJSONArray(&quot;privilege&quot;), List.class));</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                snsUserInfo = null;</div><div class="line">                int errorCode = jsonObject.getInt(&quot;errcode&quot;);</div><div class="line">                String errorMsg = jsonObject.getString(&quot;errmsg&quot;);</div><div class="line">                log.error(&quot;获取用户信息失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, errorCode, errorMsg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return snsUserInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="7-封装https请求类-CommonUtil-类"><a href="#7-封装https请求类-CommonUtil-类" class="headerlink" title="7.封装https请求类 CommonUtil 类"></a>7.封装https请求类 CommonUtil 类</h2><p>https请求的工具</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.security.cert.CertificateException;</div><div class="line">import java.security.cert.X509Certificate;</div><div class="line"></div><div class="line">import javax.net.ssl.X509TrustManager;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 证书信任管理器（用于https请求）</div><div class="line"> * 这个证书管理器的作用就是让它信任我们指定的证书，下面的代码意味着信任所有证书，不管是否权威机构颁发。</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:22:19</div><div class="line"> */</div><div class="line">public class MyX509TrustManager implements X509TrustManager &#123;</div><div class="line"></div><div class="line">    // 检查客户端证书</div><div class="line">    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检查服务器端证书</div><div class="line">    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 返回受信任的X509证书数组</div><div class="line">    public X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 发送https请求</div><div class="line"> * </div><div class="line"> * @param requestUrl</div><div class="line"> *            请求地址</div><div class="line"> * @param requestMethod</div><div class="line"> *            请求方式（GET、POST）</div><div class="line"> * @param outputStr</div><div class="line"> *            提交的数据</div><div class="line"> * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值)</div><div class="line"> */</div><div class="line">public static JSONObject httpsRequest(String requestUrl, String requestMethod, String outputStr) &#123;</div><div class="line">    JSONObject jsonObject = null;</div><div class="line">    try &#123;</div><div class="line">        // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">        TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">        SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">        sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">        // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">        SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">        URL url = new URL(requestUrl);</div><div class="line">        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</div><div class="line">        conn.setSSLSocketFactory(ssf);</div><div class="line"></div><div class="line">        conn.setDoOutput(true);</div><div class="line">        conn.setDoInput(true);</div><div class="line">        conn.setUseCaches(false);</div><div class="line">        // 设置请求方式（GET/POST）</div><div class="line">        conn.setRequestMethod(requestMethod);</div><div class="line"></div><div class="line">        // 当outputStr不为null时向输出流写数据</div><div class="line">        if (null != outputStr) &#123;</div><div class="line">            OutputStream outputStream = conn.getOutputStream();</div><div class="line">            // 注意编码格式</div><div class="line">            outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;));</div><div class="line">            outputStream.close();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 从输入流读取返回内容</div><div class="line">        InputStream inputStream = conn.getInputStream();</div><div class="line">        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);</div><div class="line">        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line">        String str = null;</div><div class="line">        StringBuffer buffer = new StringBuffer();</div><div class="line">        while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">            buffer.append(str);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 释放资源</div><div class="line">        bufferedReader.close();</div><div class="line">        inputStreamReader.close();</div><div class="line">        inputStream.close();</div><div class="line">        inputStream = null;</div><div class="line">        conn.disconnect();</div><div class="line">        jsonObject = JSONObject.fromObject(buffer.toString());</div><div class="line">    &#125; catch (ConnectException ce) &#123;</div><div class="line">        log.error(&quot;连接超时：&#123;&#125;&quot;, ce);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        log.error(&quot;https请求异常：&#123;&#125;&quot;, e);</div><div class="line">    &#125;</div><div class="line">    return jsonObject;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-写授权类："><a href="#8-写授权类：" class="headerlink" title="8.写授权类："></a>8.写授权类：</h2><p>替换成自己的appid 和 密钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.controller;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.SNSUserInfo;</div><div class="line">import com.wyj.wechart.pojo.WeixinOauth2Token;</div><div class="line">import com.wyj.wechart.utils.AdvancedUtil;</div><div class="line">/**</div><div class="line"> * 授权后的回调请求处理</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月27日 下午5:31:09</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">@RequestMapping(&quot;/oauth&quot;)</div><div class="line">public class OAuthController &#123;</div><div class="line"></div><div class="line">    @RequestMapping</div><div class="line">    public ModelAndView index(String code,String state)&#123;</div><div class="line">        ModelAndView mv = new ModelAndView(&quot;/index&quot;);</div><div class="line">        </div><div class="line">        // 用户同意授权</div><div class="line">        if (!&quot;authdeny&quot;.equals(code)) &#123;</div><div class="line">            // 获取网页授权access_token</div><div class="line">            WeixinOauth2Token weixinOauth2Token = AdvancedUtil.getOauth2AccessToken(&quot;wx17fdedc3d6d0b68e&quot;, &quot;c3b3d919d65a781ba7db58d9d8dfb515&quot;, code);</div><div class="line">            // 网页授权接口访问凭证</div><div class="line">            String accessToken = weixinOauth2Token.getAccessToken();</div><div class="line">            // 用户标识</div><div class="line">            String openId = weixinOauth2Token.getOpenId();</div><div class="line">            // 获取用户信息</div><div class="line">            SNSUserInfo snsUserInfo = AdvancedUtil.getSNSUserInfo(accessToken, openId);</div><div class="line">            // 设置要传递的参数</div><div class="line">            mv.addObject(&quot;snsUserInfo&quot;, snsUserInfo);</div><div class="line">            mv.addObject(&quot;state&quot;, state);</div><div class="line">        &#125;</div><div class="line">        return mv;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="9-授权后，显示信息的页面"><a href="#9-授权后，显示信息的页面" class="headerlink" title="9.授权后，显示信息的页面"></a>9.授权后，显示信息的页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;OAuth2.0网页授权&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;#if snsUserInfo??&gt;</div><div class="line">    &lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;</div><div class="line">        &lt;tr&gt;&lt;td width=&quot;20%&quot;&gt;属性&lt;/td&gt;&lt;td width=&quot;80%&quot;&gt;值&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;OpenID&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.openId&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;昵称&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.nickname&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;性别&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.sex&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;国家&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.country&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;省份&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.province&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;城市&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.city&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;头像&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.headImgUrl&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">&lt;!--         &lt;tr&gt;&lt;td&gt;特权&lt;/td&gt;&lt;td&gt;$&#123;snsUserInfo.privilegeList&#125;&lt;/td&gt;&lt;/tr&gt; --&gt;</div><div class="line">        &lt;tr&gt;&lt;td&gt;state:&lt;/td&gt;&lt;td&gt;$&#123;state&#125;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">	</div><div class="line">	&lt;#else&gt;</div><div class="line">	&lt;p&gt;用户不同意授权,未获取到用户信息！&lt;/p&gt;</div><div class="line">&lt;/#if&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="10-application-properties配置"><a href="#10-application-properties配置" class="headerlink" title="10.application.properties配置"></a>10.application.properties配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server.port=80</div><div class="line"></div><div class="line">spring.freemarker.cache=false</div><div class="line">spring.freemarker.charset=UTF-8</div><div class="line">spring.freemarker.check-template-location=true</div><div class="line">spring.freemarker.content-type=text/html</div><div class="line">spring.freemarker.expose-request-attributes=true</div><div class="line">spring.freemarker.expose-session-attributes=true</div><div class="line">spring.freemarker.request-context-attribute=request</div><div class="line">spring.freemarker.template-loader-path=classpath:/templates</div><div class="line">spring.freemarker.suffix=.html</div><div class="line">spring.mvc.static-path-pattern=/static/**</div></pre></td></tr></table></figure>
<h2 id="11-替换官方的链接成我们的方法路径："><a href="#11-替换官方的链接成我们的方法路径：" class="headerlink" title="11.替换官方的链接成我们的方法路径："></a>11.替换官方的链接成我们的方法路径：</h2><p><strong>官方的请求链接：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</div></pre></td></tr></table></figure>
<p>需要修改的地方：</p>
<p>（1）替换自己的AppID</p>
<p>（2）将redirect_url换成自己的授权请求链接URL。注意这个连接需要经过UTF-8编码。</p>
<p>（3）需要修改scope。需要弹出页面则要修改为snsapi_userinfo 。</p>
<p>scope参数的解释：</p>
<p>1、以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）</p>
<p>2、以snsapi_userinfo为scope发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。 </p>
<p><strong>URL转码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * URL编码（utf-8）</div><div class="line"> * </div><div class="line"> * @param source</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static String urlEncodeUTF8(String source) &#123;</div><div class="line">    String result = source;</div><div class="line">    try &#123;</div><div class="line">        result = java.net.URLEncoder.encode(source, &quot;utf-8&quot;);</div><div class="line">    &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.test;</div><div class="line"></div><div class="line">import com.wyj.wechart.utils.CommonUtil;</div><div class="line">/**</div><div class="line"> * URL转码</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月27日 下午5:35:02</div><div class="line"> */</div><div class="line">public class TransCodeUrlTest &#123;</div><div class="line">    /**</div><div class="line">     * 生成URL编码</div><div class="line">     * </div><div class="line">     * @param args</div><div class="line">     */</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        String source = &quot;http://6400cc45.ngrok.io/oauth&quot;;</div><div class="line">        System.out.println(CommonUtil.urlEncodeUTF8(source));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以直接在线url编码： <a href="http://tool.chinaz.com/Tools/URLEncode.aspx" target="_blank" rel="external">http://tool.chinaz.com/Tools/URLEncode.aspx</a></p>
<h2 id="12-修改网页授权获取用户基本信息"><a href="#12-修改网页授权获取用户基本信息" class="headerlink" title="12.修改网页授权获取用户基本信息"></a>12.修改网页授权获取用户基本信息</h2><p>微信公共平台-&gt;测试号管理-&gt;体验接口权限表-&gt;网页服务-&gt;网页帐号-&gt;修改<br>修改完成后需要重新关注<br><img src="/2018/01/27/微信公共号开发教程java版——微信网页授权-八/a.png" alt="a"><br><img src="/2018/01/27/微信公共号开发教程java版——微信网页授权-八/b.png" alt="b"></p>
<h2 id="13-测试效果："><a href="#13-测试效果：" class="headerlink" title="13.测试效果："></a>13.测试效果：</h2><p>复制上面替换好的链接，然后丢进浏览器，然后用微信来扫一扫。<br><img src="/2018/01/27/微信公共号开发教程java版——微信网页授权-八/c.png" alt="c"><br><img src="/2018/01/27/微信公共号开发教程java版——微信网页授权-八/d.jpg" alt="d"></p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：微信网页授权介绍&quot;&gt;&lt;a href=&quot;#一：微信网页授权介绍&quot; class=&quot;headerlink&quot; title=&quot;一：微信网页授权介绍&quot;&gt;&lt;/a&gt;一：微信网页授权介绍&lt;/h1&gt;&lt;p&gt;官网详细介绍:&lt;a href=&quot;https://mp.weixin.qq.c
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——获取用户基本信息(UnionID机制)(七)</title>
    <link href="http://wangyuanjun.cn/2018/01/27/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF-UnionID%E6%9C%BA%E5%88%B6-%E4%B8%83/"/>
    <id>http://wangyuanjun.cn/2018/01/27/微信公共号开发教程java版——获取用户基本信息-UnionID机制-七/</id>
    <published>2018-01-27T07:14:32.000Z</published>
    <updated>2018-01-27T14:34:06.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：UnionID机制说明"><a href="#一：UnionID机制说明" class="headerlink" title="一：UnionID机制说明"></a>一：UnionID机制说明</h1><p>官网详细介绍:<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140839" target="_blank" rel="external">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140839</a></p>
<h2 id="获取用户基本信息-UnionID机制"><a href="#获取用户基本信息-UnionID机制" class="headerlink" title="获取用户基本信息(UnionID机制)"></a>获取用户基本信息(UnionID机制)</h2><p>在关注者与公众号产生消息交互后，公众号可获得关注者的OpenID（加密后的微信号，每个用户对每个公众号的OpenID是唯一的。对于不同公众号，同一用户的openid不同）。公众号可通过本接口来根据OpenID获取用户基本信息，包括昵称、头像、性别、所在城市、语言和关注时间。</p>
<p>请注意，如果开发者有在多个公众号，或在公众号、移动应用之间统一用户帐号的需求，需要前往微信开放平台（open.weixin.qq.com）绑定公众号后，才可利用UnionID机制来满足上述需求。</p>
<h2 id="UnionID机制说明："><a href="#UnionID机制说明：" class="headerlink" title="UnionID机制说明："></a>UnionID机制说明：</h2><p>开发者可通过OpenID来获取用户基本信息。特别需要注意的是，如果开发者拥有多个移动应用、网站应用和公众帐号，可通过获取用户基本信息中的unionid来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号，用户的unionid是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，unionid是相同的。</p>
<h2 id="获取用户基本信息（包括UnionID机制）"><a href="#获取用户基本信息（包括UnionID机制）" class="headerlink" title="获取用户基本信息（包括UnionID机制）"></a>获取用户基本信息（包括UnionID机制）</h2><p>开发者可通过OpenID来获取用户基本信息。请使用https协议。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">接口调用请求说明</div><div class="line">http请求方式: GET</div><div class="line">https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</div></pre></td></tr></table></figure>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">是否必须</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>access_token</td>
<td style="text-align:right">是</td>
<td style="text-align:center">调用接口凭证</td>
</tr>
<tr>
<td>openid</td>
<td style="text-align:right">是</td>
<td style="text-align:center">普通用户的标识，对当前公众号唯一</td>
</tr>
<tr>
<td>lang</td>
<td style="text-align:right">否</td>
<td style="text-align:center">返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语</td>
</tr>
</tbody>
</table>
<p>返回说明</p>
<p>正常情况下，微信会返回下述JSON数据包给公众号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;subscribe&quot;: 1, </div><div class="line">    &quot;openid&quot;: &quot;o6_bmjrPTlm6_2sgVt7hMZOPfL2M&quot;, </div><div class="line">    &quot;nickname&quot;: &quot;Band&quot;, </div><div class="line">    &quot;sex&quot;: 1, </div><div class="line">    &quot;language&quot;: &quot;zh_CN&quot;, </div><div class="line">    &quot;city&quot;: &quot;广州&quot;, </div><div class="line">    &quot;province&quot;: &quot;广东&quot;, </div><div class="line">    &quot;country&quot;: &quot;中国&quot;, </div><div class="line">    &quot;headimgurl&quot;:&quot;http://wx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/0&quot;,</div><div class="line">    &quot;subscribe_time&quot;: 1382694957,</div><div class="line">    &quot;unionid&quot;: &quot; o6_bmasdasdsad6_2sgVt7hMZOPfL&quot;</div><div class="line">    &quot;remark&quot;: &quot;&quot;,</div><div class="line">    &quot;groupid&quot;: 0,</div><div class="line">    &quot;tagid_list&quot;:[128,2]</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>subscribe</td>
<td>用户是否订阅该公众号标识，值为0时，代表此用户没有关注该公众号，拉取不到其余信息。</td>
</tr>
<tr>
<td>openid</td>
<td>用户的标识，对当前公众号唯一</td>
</tr>
<tr>
<td>nickname</td>
<td>用户的昵称</td>
</tr>
<tr>
<td>sex</td>
<td>用户的性别，值为1时是男性，值为2时是女性，值为0时是未知</td>
</tr>
<tr>
<td>city</td>
<td>用户所在城市</td>
</tr>
<tr>
<td>country</td>
<td>用户所在国家</td>
</tr>
<tr>
<td>province</td>
<td>用户所在省份</td>
</tr>
<tr>
<td>language</td>
<td>用户的语言，简体中文为zh_CN</td>
</tr>
<tr>
<td>headimgurl</td>
<td>用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。</td>
</tr>
<tr>
<td>subscribe_time</td>
<td>用户关注时间，为时间戳。如果用户曾多次关注，则取最后关注时间</td>
</tr>
<tr>
<td>unionid</td>
<td>只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。</td>
</tr>
<tr>
<td>remark</td>
<td>公众号运营者对粉丝的备注，公众号运营者可在微信公众平台用户管理界面对粉丝添加备注</td>
</tr>
<tr>
<td>groupid</td>
<td>用户所在的分组ID（兼容旧的用户分组接口）</td>
</tr>
<tr>
<td>tagid_list</td>
<td>用户被打上的标签ID列表</td>
</tr>
</tbody>
</table>
<p>错误时微信会返回错误码等信息，JSON数据包示例如下（该示例为AppID无效错误）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;errcode&quot;:40013,&quot;errmsg&quot;:&quot;invalid appid&quot;&#125;</div></pre></td></tr></table></figure>
<h1 id="二：封装用户信息"><a href="#二：封装用户信息" class="headerlink" title="二：封装用户信息"></a>二：封装用户信息</h1><h2 id="1-用户的基本信息类"><a href="#1-用户的基本信息类" class="headerlink" title="1.用户的基本信息类"></a>1.用户的基本信息类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 微信用户的基本信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月24日 上午10:05:42</div><div class="line"> */</div><div class="line">public class WeixinUserInfo &#123;</div><div class="line"></div><div class="line">    // 用户的标识</div><div class="line">    private String openId;</div><div class="line"></div><div class="line">    // 关注状态（1是关注，0是未关注），未关注时获取不到其余信息</div><div class="line">    private int subscribe;</div><div class="line"></div><div class="line">    // 用户关注时间，为时间戳。如果用户曾多次关注，则取最后关注时间</div><div class="line">    private String subscribeTime;</div><div class="line"></div><div class="line">    // 昵称</div><div class="line">    private String nickname;</div><div class="line"></div><div class="line">    // 用户的性别（1是男性，2是女性，0是未知）</div><div class="line">    private int sex;</div><div class="line"></div><div class="line">    // 用户所在国家</div><div class="line">    private String country;</div><div class="line"></div><div class="line">    // 用户所在省份</div><div class="line">    private String province;</div><div class="line"></div><div class="line">    // 用户所在城市</div><div class="line">    private String city;</div><div class="line"></div><div class="line">    // 用户的语言，简体中文为zh_CN</div><div class="line">    private String language;</div><div class="line"></div><div class="line">    // 用户头像</div><div class="line">    private String headImgUrl;</div><div class="line"></div><div class="line">    public String getOpenId() &#123;</div><div class="line">        return openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setOpenId(String openId) &#123;</div><div class="line">        this.openId = openId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSubscribe() &#123;</div><div class="line">        return subscribe;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubscribe(int subscribe) &#123;</div><div class="line">        this.subscribe = subscribe;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSubscribeTime() &#123;</div><div class="line">        return subscribeTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubscribeTime(String subscribeTime) &#123;</div><div class="line">        this.subscribeTime = subscribeTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getNickname() &#123;</div><div class="line">        return nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setNickname(String nickname) &#123;</div><div class="line">        this.nickname = nickname;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSex() &#123;</div><div class="line">        return sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSex(int sex) &#123;</div><div class="line">        this.sex = sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCountry() &#123;</div><div class="line">        return country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCountry(String country) &#123;</div><div class="line">        this.country = country;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getProvince() &#123;</div><div class="line">        return province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setProvince(String province) &#123;</div><div class="line">        this.province = province;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCity() &#123;</div><div class="line">        return city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCity(String city) &#123;</div><div class="line">        this.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLanguage() &#123;</div><div class="line">        return language;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLanguage(String language) &#123;</div><div class="line">        this.language = language;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getHeadImgUrl() &#123;</div><div class="line">        return headImgUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setHeadImgUrl(String headImgUrl) &#123;</div><div class="line">        this.headImgUrl = headImgUrl;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们先来看看获取用户信息的接口：<br><a href="https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN" target="_blank" rel="external">https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</a><br>根据分析，获取用户的基本信息需要一个token。</p>
<h2 id="创建token类"><a href="#创建token类" class="headerlink" title="创建token类"></a>创建token类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * 凭证</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:19:14</div><div class="line"> */</div><div class="line">public class Token &#123;</div><div class="line"></div><div class="line">    // 接口访问凭证</div><div class="line">    private String accessToken;</div><div class="line"></div><div class="line">    // 凭证有效期，单位：秒</div><div class="line">    private int expiresIn;</div><div class="line"></div><div class="line">    public String getAccessToken() &#123;</div><div class="line">        return accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAccessToken(String accessToken) &#123;</div><div class="line">        this.accessToken = accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getExpiresIn() &#123;</div><div class="line">        return expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setExpiresIn(int expiresIn) &#123;</div><div class="line">        this.expiresIn = expiresIn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建信任管理器"><a href="#创建信任管理器" class="headerlink" title="创建信任管理器"></a>创建信任管理器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.security.cert.CertificateException;</div><div class="line">import java.security.cert.X509Certificate;</div><div class="line"></div><div class="line">import javax.net.ssl.X509TrustManager;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 证书信任管理器（用于https请求）</div><div class="line"> * 这个证书管理器的作用就是让它信任我们指定的证书，下面的代码意味着信任所有证书，不管是否权威机构颁发。</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:22:19</div><div class="line"> */</div><div class="line">public class MyX509TrustManager implements X509TrustManager &#123;</div><div class="line"></div><div class="line">    // 检查客户端证书</div><div class="line">    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检查服务器端证书</div><div class="line">    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 返回受信任的X509证书数组</div><div class="line">    public X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="封装了一个公共类："><a href="#封装了一个公共类：" class="headerlink" title="封装了一个公共类："></a>封装了一个公共类：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStream;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.net.ConnectException;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">import javax.net.ssl.HttpsURLConnection;</div><div class="line">import javax.net.ssl.SSLContext;</div><div class="line">import javax.net.ssl.SSLSocketFactory;</div><div class="line">import javax.net.ssl.TrustManager;</div><div class="line"></div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.Token;</div><div class="line">import com.wyj.wechart.pojo.WeixinUserInfo;</div><div class="line"></div><div class="line">import net.sf.json.JSONException;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 通用工具类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:36:50</div><div class="line"> */</div><div class="line">public class CommonUtil &#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(CommonUtil.class);</div><div class="line"></div><div class="line">    // 凭证获取（GET）</div><div class="line">    public final static String token_url = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 发送https请求</div><div class="line">     * </div><div class="line">     * @param requestUrl</div><div class="line">     *            请求地址</div><div class="line">     * @param requestMethod</div><div class="line">     *            请求方式（GET、POST）</div><div class="line">     * @param outputStr</div><div class="line">     *            提交的数据</div><div class="line">     * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值)</div><div class="line">     */</div><div class="line">    public static JSONObject httpsRequest(String requestUrl, String requestMethod, String outputStr) &#123;</div><div class="line">        JSONObject jsonObject = null;</div><div class="line">        try &#123;</div><div class="line">            // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">            TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">            SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">            sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">            // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">            SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">            URL url = new URL(requestUrl);</div><div class="line">            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</div><div class="line">            conn.setSSLSocketFactory(ssf);</div><div class="line"></div><div class="line">            conn.setDoOutput(true);</div><div class="line">            conn.setDoInput(true);</div><div class="line">            conn.setUseCaches(false);</div><div class="line">            // 设置请求方式（GET/POST）</div><div class="line">            conn.setRequestMethod(requestMethod);</div><div class="line"></div><div class="line">            // 当outputStr不为null时向输出流写数据</div><div class="line">            if (null != outputStr) &#123;</div><div class="line">                OutputStream outputStream = conn.getOutputStream();</div><div class="line">                // 注意编码格式</div><div class="line">                outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;));</div><div class="line">                outputStream.close();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 从输入流读取返回内容</div><div class="line">            InputStream inputStream = conn.getInputStream();</div><div class="line">            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);</div><div class="line">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line">            String str = null;</div><div class="line">            StringBuffer buffer = new StringBuffer();</div><div class="line">            while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">                buffer.append(str);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 释放资源</div><div class="line">            bufferedReader.close();</div><div class="line">            inputStreamReader.close();</div><div class="line">            inputStream.close();</div><div class="line">            inputStream = null;</div><div class="line">            conn.disconnect();</div><div class="line">            jsonObject = JSONObject.fromObject(buffer.toString());</div><div class="line">        &#125; catch (ConnectException ce) &#123;</div><div class="line">            log.error(&quot;连接超时：&#123;&#125;&quot;, ce);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(&quot;https请求异常：&#123;&#125;&quot;, e);</div><div class="line">        &#125;</div><div class="line">        return jsonObject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取接口访问凭证</div><div class="line">     * </div><div class="line">     * @param appid</div><div class="line">     *            凭证</div><div class="line">     * @param appsecret</div><div class="line">     *            密钥</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static Token getToken(String appid, String appsecret) &#123;</div><div class="line">        Token token = null;</div><div class="line">        String requestUrl = token_url.replace(&quot;APPID&quot;, appid).replace(&quot;APPSECRET&quot;, appsecret);</div><div class="line">        // 发起GET请求获取凭证</div><div class="line">        JSONObject jsonObject = httpsRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line"></div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                token = new Token();</div><div class="line">                token.setAccessToken(jsonObject.getString(&quot;access_token&quot;));</div><div class="line">                token.setExpiresIn(jsonObject.getInt(&quot;expires_in&quot;));</div><div class="line">            &#125; catch (JSONException e) &#123;</div><div class="line">                token = null;</div><div class="line">                // 获取token失败</div><div class="line">                log.error(&quot;获取token失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, jsonObject.getInt(&quot;errcode&quot;), jsonObject.getString(&quot;errmsg&quot;));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * URL编码（utf-8）</div><div class="line">     * </div><div class="line">     * @param source</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static String urlEncodeUTF8(String source) &#123;</div><div class="line">        String result = source;</div><div class="line">        try &#123;</div><div class="line">            result = java.net.URLEncoder.encode(source, &quot;utf-8&quot;);</div><div class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据内容类型判断文件扩展名</div><div class="line">     * </div><div class="line">     * @param contentType</div><div class="line">     *            内容类型</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static String getFileExt(String contentType) &#123;</div><div class="line">        String fileExt = &quot;&quot;;</div><div class="line">        if (&quot;image/jpeg&quot;.equals(contentType))</div><div class="line">            fileExt = &quot;.jpg&quot;;</div><div class="line">        else if (&quot;audio/mpeg&quot;.equals(contentType))</div><div class="line">            fileExt = &quot;.mp3&quot;;</div><div class="line">        else if (&quot;audio/amr&quot;.equals(contentType))</div><div class="line">            fileExt = &quot;.amr&quot;;</div><div class="line">        else if (&quot;video/mp4&quot;.equals(contentType))</div><div class="line">            fileExt = &quot;.mp4&quot;;</div><div class="line">        else if (&quot;video/mpeg4&quot;.equals(contentType))</div><div class="line">            fileExt = &quot;.mp4&quot;;</div><div class="line">        return fileExt;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取用户信息</div><div class="line">     * </div><div class="line">     * @param accessToken 接口访问凭证</div><div class="line">     * @param openId 用户标识</div><div class="line">     * @return WeixinUserInfo</div><div class="line">     */</div><div class="line">    public static WeixinUserInfo getUserInfo(String accessToken, String openId) &#123;</div><div class="line">        WeixinUserInfo weixinUserInfo = null;</div><div class="line">        // 拼接请求地址</div><div class="line">        String requestUrl = &quot;https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&amp;openid=OPENID&quot;;</div><div class="line">        requestUrl = requestUrl.replace(&quot;ACCESS_TOKEN&quot;, accessToken).replace(&quot;OPENID&quot;, openId);</div><div class="line">        // 获取用户信息</div><div class="line">        JSONObject jsonObject = CommonUtil.httpsRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line"></div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                weixinUserInfo = new WeixinUserInfo();</div><div class="line">                // 用户的标识</div><div class="line">                weixinUserInfo.setOpenId(jsonObject.getString(&quot;openid&quot;));</div><div class="line">                // 关注状态（1是关注，0是未关注），未关注时获取不到其余信息</div><div class="line">                weixinUserInfo.setSubscribe(jsonObject.getInt(&quot;subscribe&quot;));</div><div class="line">                // 用户关注时间</div><div class="line">                weixinUserInfo.setSubscribeTime(jsonObject.getString(&quot;subscribe_time&quot;));</div><div class="line">                // 昵称</div><div class="line">                weixinUserInfo.setNickname(jsonObject.getString(&quot;nickname&quot;));</div><div class="line">                // 用户的性别（1是男性，2是女性，0是未知）</div><div class="line">                weixinUserInfo.setSex(jsonObject.getInt(&quot;sex&quot;));</div><div class="line">                // 用户所在国家</div><div class="line">                weixinUserInfo.setCountry(jsonObject.getString(&quot;country&quot;));</div><div class="line">                // 用户所在省份</div><div class="line">                weixinUserInfo.setProvince(jsonObject.getString(&quot;province&quot;));</div><div class="line">                // 用户所在城市</div><div class="line">                weixinUserInfo.setCity(jsonObject.getString(&quot;city&quot;));</div><div class="line">                // 用户的语言，简体中文为zh_CN</div><div class="line">                weixinUserInfo.setLanguage(jsonObject.getString(&quot;language&quot;));</div><div class="line">                // 用户头像</div><div class="line">                weixinUserInfo.setHeadImgUrl(jsonObject.getString(&quot;headimgurl&quot;));</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                if (0 == weixinUserInfo.getSubscribe()) &#123;</div><div class="line">                    log.error(&quot;用户&#123;&#125;已取消关注&quot;, weixinUserInfo.getOpenId());</div><div class="line">                &#125; else &#123;</div><div class="line">                    int errorCode = jsonObject.getInt(&quot;errcode&quot;);</div><div class="line">                    String errorMsg = jsonObject.getString(&quot;errmsg&quot;);</div><div class="line">                    log.error(&quot;获取用户信息失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, errorCode, errorMsg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return weixinUserInfo;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p>替换为自己的appid和秘钥。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.test;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.WeixinUserInfo;</div><div class="line">import com.wyj.wechart.utils.CommonUtil;</div><div class="line"></div><div class="line">public class WeixinUserInfoTest &#123;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testWeixinUserInfo() &#123;</div><div class="line"></div><div class="line">        // 获取接口访问凭证(替换为自己的appid和秘钥。)</div><div class="line">        String accessToken = CommonUtil.getToken(&quot;xxxx&quot;, &quot;xxxx&quot;).getAccessToken();</div><div class="line">        /**</div><div class="line">         * 获取用户信息</div><div class="line">         */</div><div class="line">        WeixinUserInfo user = CommonUtil.getUserInfo(accessToken, &quot;OpenID&quot;);</div><div class="line">        System.out.println(&quot;OpenID：&quot; + user.getOpenId());</div><div class="line">        System.out.println(&quot;关注状态：&quot; + user.getSubscribe());</div><div class="line">        System.out.println(&quot;关注时间：&quot; + user.getSubscribeTime());</div><div class="line">        System.out.println(&quot;昵称：&quot; + user.getNickname());</div><div class="line">        System.out.println(&quot;性别：&quot; + user.getSex());</div><div class="line">        System.out.println(&quot;国家：&quot; + user.getCountry());</div><div class="line">        System.out.println(&quot;省份：&quot; + user.getProvince());</div><div class="line">        System.out.println(&quot;城市：&quot; + user.getCity());</div><div class="line">        System.out.println(&quot;语言：&quot; + user.getLanguage());</div><div class="line">        System.out.println(&quot;头像：&quot; + user.getHeadImgUrl());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下： </p>
<p><img src="/2018/01/27/微信公共号开发教程java版——获取用户基本信息-UnionID机制-七/userInfo.png" alt="userInfo"></p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：UnionID机制说明&quot;&gt;&lt;a href=&quot;#一：UnionID机制说明&quot; class=&quot;headerlink&quot; title=&quot;一：UnionID机制说明&quot;&gt;&lt;/a&gt;一：UnionID机制说明&lt;/h1&gt;&lt;p&gt;官网详细介绍:&lt;a href=&quot;https://mp
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——实现自定义菜单(六)</title>
    <link href="http://wangyuanjun.cn/2018/01/26/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8F%9C%E5%8D%95-%E5%85%AD/"/>
    <id>http://wangyuanjun.cn/2018/01/26/微信公共号开发教程java版——实现自定义菜单-六/</id>
    <published>2018-01-26T09:22:56.000Z</published>
    <updated>2018-01-27T14:33:56.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：自定义菜单文档说明"><a href="#一：自定义菜单文档说明" class="headerlink" title="一：自定义菜单文档说明"></a>一：自定义菜单文档说明</h1><p>自定义菜单能够帮助公众号丰富界面，让用户更好更快地理解公众号的功能。开启自定义菜单后，公众号界面如图所示：<br>官网详细介绍:<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141013" target="_blank" rel="external">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141013</a><br><strong>请注意：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、自定义菜单最多包括3个一级菜单，每个一级菜单最多包含5个二级菜单。</div><div class="line">2、一级菜单最多4个汉字，二级菜单最多7个汉字，多出来的部分将会以“...”代替。</div><div class="line">3、创建自定义菜单后，菜单的刷新策略是，在用户进入公众号会话页或公众号profile页时，如果发现上一次拉取菜单的请求在5分钟以前，就会拉取一下菜单，如果菜单有更新，就会刷新客户端的菜单。测试时可以尝试取消关注公众账号后再次关注，则可以看到创建后的效果。</div></pre></td></tr></table></figure>
<p><strong>自定义菜单接口可实现多种类型按钮，如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1、click：点击推事件用户点击click类型按钮后，微信服务器会通过消息接口推送消息类型为event的结构给开发者（参考消息接口指南），并且带上按钮中开发者填写的key值，开发者可以通过自定义的key值与用户进行交互；</div><div class="line">2、view：跳转URL用户点击view类型按钮后，微信客户端将会打开开发者在按钮中填写的网页URL，可与网页授权获取用户基本信息接口结合，获得用户基本信息。</div><div class="line">3、scancode_push：扫码推事件用户点击按钮后，微信客户端将调起扫一扫工具，完成扫码操作后显示扫描结果（如果是URL，将进入URL），且会将扫码的结果传给开发者，开发者可以下发消息。</div><div class="line">4、scancode_waitmsg：扫码推事件且弹出“消息接收中”提示框用户点击按钮后，微信客户端将调起扫一扫工具，完成扫码操作后，将扫码的结果传给开发者，同时收起扫一扫工具，然后弹出“消息接收中”提示框，随后可能会收到开发者下发的消息。</div><div class="line">5、pic_sysphoto：弹出系统拍照发图用户点击按钮后，微信客户端将调起系统相机，完成拍照操作后，会将拍摄的相片发送给开发者，并推送事件给开发者，同时收起系统相机，随后可能会收到开发者下发的消息。</div><div class="line">6、pic_photo_or_album：弹出拍照或者相册发图用户点击按钮后，微信客户端将弹出选择器供用户选择“拍照”或者“从手机相册选择”。用户选择后即走其他两种流程。</div><div class="line">7、pic_weixin：弹出微信相册发图器用户点击按钮后，微信客户端将调起微信相册，完成选择操作后，将选择的相片发送给开发者的服务器，并推送事件给开发者，同时收起相册，随后可能会收到开发者下发的消息。</div><div class="line">8、location_select：弹出地理位置选择器用户点击按钮后，微信客户端将调起地理位置选择工具，完成选择操作后，将选择的地理位置发送给开发者的服务器，同时收起位置选择工具，随后可能会收到开发者下发的消息。</div><div class="line">9、media_id：下发消息（除文本消息）用户点击media_id类型按钮后，微信服务器会将开发者填写的永久素材id对应的素材下发给用户，永久素材类型可以是图片、音频、视频、图文消息。请注意：永久素材id必须是在“素材管理/新增永久素材”接口上传后获得的合法id。</div><div class="line">10、view_limited：跳转图文消息URL用户点击view_limited类型按钮后，微信客户端将打开开发者在按钮中填写的永久素材id对应的图文消息URL，永久素材类型只支持图文消息。请注意：永久素材id必须是在“素材管理/新增永久素材”接口上传后获得的合法id。</div></pre></td></tr></table></figure>
<p><strong>请注意，3到8的所有事件，仅支持微信iPhone5.4.1以上版本，和Android5.4以上版本的微信用户，旧版本微信用户点击后将没有回应，开发者也不能正常接收到事件推送。9和10，是专门给第三方平台旗下未微信认证（具体而言，是资质认证未通过）的订阅号准备的事件类型，它们是没有事件推送的，能力相对受限，其他类型的公众号不必使用。</strong></p>
<h2 id="接口调用请求说明"><a href="#接口调用请求说明" class="headerlink" title="接口调用请求说明"></a>接口调用请求说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http请求方式：POST（请使用https协议） https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN</div></pre></td></tr></table></figure>
<h2 id="click和view的请求示例"><a href="#click和view的请求示例" class="headerlink" title="click和view的请求示例"></a>click和view的请求示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;button&quot;:[</div><div class="line">    &#123;    </div><div class="line">         &quot;type&quot;:&quot;click&quot;,</div><div class="line">         &quot;name&quot;:&quot;今日歌曲&quot;,</div><div class="line">         &quot;key&quot;:&quot;V1001_TODAY_MUSIC&quot;</div><div class="line">     &#125;,</div><div class="line">     &#123;</div><div class="line">          &quot;name&quot;:&quot;菜单&quot;,</div><div class="line">          &quot;sub_button&quot;:[</div><div class="line">          &#123;    </div><div class="line">              &quot;type&quot;:&quot;view&quot;,</div><div class="line">              &quot;name&quot;:&quot;搜索&quot;,</div><div class="line">              &quot;url&quot;:&quot;http://www.soso.com/&quot;</div><div class="line">           &#125;,</div><div class="line">           &#123;</div><div class="line">                &quot;type&quot;:&quot;miniprogram&quot;,</div><div class="line">                &quot;name&quot;:&quot;wxa&quot;,</div><div class="line">                &quot;url&quot;:&quot;http://mp.weixin.qq.com&quot;,</div><div class="line">                &quot;appid&quot;:&quot;wx286b93c14bbf93aa&quot;,</div><div class="line">                &quot;pagepath&quot;:&quot;pages/lunar/index&quot;</div><div class="line">            &#125;,</div><div class="line">           &#123;</div><div class="line">              &quot;type&quot;:&quot;click&quot;,</div><div class="line">              &quot;name&quot;:&quot;赞一下我们&quot;,</div><div class="line">              &quot;key&quot;:&quot;V1001_GOOD&quot;</div><div class="line">           &#125;]</div><div class="line">      &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;button&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;name&quot;: &quot;扫码&quot;, </div><div class="line">            &quot;sub_button&quot;: [</div><div class="line">                &#123;</div><div class="line">                    &quot;type&quot;: &quot;scancode_waitmsg&quot;, </div><div class="line">                    &quot;name&quot;: &quot;扫码带提示&quot;, </div><div class="line">                    &quot;key&quot;: &quot;rselfmenu_0_0&quot;, </div><div class="line">                    &quot;sub_button&quot;: [ ]</div><div class="line">                &#125;, </div><div class="line">                &#123;</div><div class="line">                    &quot;type&quot;: &quot;scancode_push&quot;, </div><div class="line">                    &quot;name&quot;: &quot;扫码推事件&quot;, </div><div class="line">                    &quot;key&quot;: &quot;rselfmenu_0_1&quot;, </div><div class="line">                    &quot;sub_button&quot;: [ ]</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;, </div><div class="line">        &#123;</div><div class="line">            &quot;name&quot;: &quot;发图&quot;, </div><div class="line">            &quot;sub_button&quot;: [</div><div class="line">                &#123;</div><div class="line">                    &quot;type&quot;: &quot;pic_sysphoto&quot;, </div><div class="line">                    &quot;name&quot;: &quot;系统拍照发图&quot;, </div><div class="line">                    &quot;key&quot;: &quot;rselfmenu_1_0&quot;, </div><div class="line">                   &quot;sub_button&quot;: [ ]</div><div class="line">                 &#125;, </div><div class="line">                &#123;</div><div class="line">                    &quot;type&quot;: &quot;pic_photo_or_album&quot;, </div><div class="line">                    &quot;name&quot;: &quot;拍照或者相册发图&quot;, </div><div class="line">                    &quot;key&quot;: &quot;rselfmenu_1_1&quot;, </div><div class="line">                    &quot;sub_button&quot;: [ ]</div><div class="line">                &#125;, </div><div class="line">                &#123;</div><div class="line">                    &quot;type&quot;: &quot;pic_weixin&quot;, </div><div class="line">                    &quot;name&quot;: &quot;微信相册发图&quot;, </div><div class="line">                    &quot;key&quot;: &quot;rselfmenu_1_2&quot;, </div><div class="line">                    &quot;sub_button&quot;: [ ]</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;, </div><div class="line">        &#123;</div><div class="line">            &quot;name&quot;: &quot;发送位置&quot;, </div><div class="line">            &quot;type&quot;: &quot;location_select&quot;, </div><div class="line">            &quot;key&quot;: &quot;rselfmenu_2_0&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">           &quot;type&quot;: &quot;media_id&quot;, </div><div class="line">           &quot;name&quot;: &quot;图片&quot;, </div><div class="line">           &quot;media_id&quot;: &quot;MEDIA_ID1&quot;</div><div class="line">        &#125;, </div><div class="line">        &#123;</div><div class="line">           &quot;type&quot;: &quot;view_limited&quot;, </div><div class="line">           &quot;name&quot;: &quot;图文消息&quot;, </div><div class="line">           &quot;media_id&quot;: &quot;MEDIA_ID2&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">是否必须</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>button</td>
<td style="text-align:right">是</td>
<td style="text-align:center">一级菜单数组，个数应为1~3个</td>
</tr>
<tr>
<td>sub_button</td>
<td style="text-align:right">否</td>
<td style="text-align:center">二级菜单数组，个数应为1~5个</td>
</tr>
<tr>
<td>type</td>
<td style="text-align:right">是</td>
<td style="text-align:center">菜单的响应动作类型，view表示网页类型，click表示点击类型，miniprogram表示小程序类型</td>
</tr>
<tr>
<td>name</td>
<td style="text-align:right">是</td>
<td style="text-align:center">菜单标题，不超过16个字节，子菜单不超过60个字节</td>
</tr>
<tr>
<td>key</td>
<td style="text-align:right">click等点击类型必须</td>
<td style="text-align:center">菜单KEY值，用于消息接口推送，不超过128字节</td>
</tr>
<tr>
<td>url</td>
<td style="text-align:right">view、miniprogram类型必须</td>
<td style="text-align:center">网页 链接，用户点击菜单可打开链接，不超过1024字节。 type为miniprogram时，不支持小程序的老版本客户端将打开本url</td>
</tr>
<tr>
<td>media_id</td>
<td style="text-align:right">media_id类型和view_limited类型必须</td>
<td style="text-align:center">调用新增永久素材接口返回的合法media_id</td>
</tr>
<tr>
<td>appid</td>
<td style="text-align:right">miniprogram类型必须</td>
<td style="text-align:center">小程序的appid（仅认证公众号可配置）</td>
</tr>
<tr>
<td>pagepath</td>
<td style="text-align:right">miniprogram类型必须</td>
<td style="text-align:center">小程序的页面路径</td>
</tr>
</tbody>
</table>
<p>返回结果</p>
<p>正确时的返回JSON数据包如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;errcode&quot;:0,&quot;errmsg&quot;:&quot;ok&quot;&#125;</div></pre></td></tr></table></figure>
<p>错误时的返回JSON数据包如下（示例为无效菜单名长度）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;errcode&quot;:40018,&quot;errmsg&quot;:&quot;invalid button name size&quot;&#125;</div></pre></td></tr></table></figure>
<p>使用网页调试工具调试该接口：<a href="https://mp.weixin.qq.com/debug/cgi-bin/apiinfo?t=index&amp;type=%E5%9F%BA%E7%A1%80%E6%94%AF%E6%8C%81&amp;form=%E8%8E%B7%E5%8F%96access_token%E6%8E%A5%E5%8F%A3%20/token" target="_blank" rel="external">网页调试工具</a></p>
<h1 id="二：菜单的封装"><a href="#二：菜单的封装" class="headerlink" title="二：菜单的封装"></a>二：菜单的封装</h1><p>接下来是对菜单结构的封装。<font color="red">因为我们是采用面向对象的编程方式，最终提交的json格式菜单数据就应该是由对象直接转换得到，而不是在程序代码中拼一大堆json数据。菜单结构封装的依据是公众平台API文档中给出的那一段json格式的菜单结构，如下所示：</font></p>
<h2 id="1-菜单项的基类"><a href="#1-菜单项的基类" class="headerlink" title="1.菜单项的基类"></a>1.菜单项的基类</h2><p>首先是 菜单项的基类，所有一级菜单、二级菜单都共有一个相同的属性，那就是name。菜单项基类的封装代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.menu;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 菜单项的基类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:52:28</div><div class="line"> */</div><div class="line">public class Button &#123;</div><div class="line"></div><div class="line">    private String name;// 所有一级菜单、二级菜单都共有一个相同的属性，那就是name</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-子菜单项的封装"><a href="#2-子菜单项的封装" class="headerlink" title="2.子菜单项的封装"></a>2.子菜单项的封装</h2><p>接着是子菜单项的封装。这里对子菜单是这样定义的：没有子菜单的菜单项，有可能是二级菜单项，也有可能是不含二级菜单的一级菜单。这类子菜单项一定会包含三个属性：type、name和key，封装的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.menu;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 子菜单项 :没有子菜单的菜单项，有可能是二级菜单项，也有可能是不含二级菜单的一级菜单。</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:54:53</div><div class="line"> */</div><div class="line">public class CommonButton extends Button &#123;</div><div class="line"></div><div class="line">    // 菜单的响应动作类型，view表示网页类型，click表示点击类型，miniprogram表示小程序类型</div><div class="line">    private String type;</div><div class="line"></div><div class="line">    // 菜单KEY值，用于消息接口推送，不超过128字节</div><div class="line">    private String key;</div><div class="line"></div><div class="line">    private String url;</div><div class="line"></div><div class="line">    public String getType() &#123;</div><div class="line">        return type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setType(String type) &#123;</div><div class="line">        this.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getKey() &#123;</div><div class="line">        return key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setKey(String key) &#123;</div><div class="line">        this.key = key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUrl() &#123;</div><div class="line">        return url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUrl(String url) &#123;</div><div class="line">        this.url = url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-父菜单项的封装"><a href="#3-父菜单项的封装" class="headerlink" title="3.父菜单项的封装"></a>3.父菜单项的封装</h2><p> 再往下是父菜单项的封装。对父菜单项的定义：包含有二级菜单项的一级菜单。这类菜单项包含有二个属性：name和sub_button，而sub_button以是一个子菜单项数组。父菜单项的封装代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.menu;</div><div class="line">/**</div><div class="line"> * 父菜单项 :包含有二级菜单项的一级菜单。这类菜单项包含有二个属性：name和sub_button，而sub_button以是一个子菜单项数组</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:59:04</div><div class="line"> */</div><div class="line">public class ComplexButton extends Button &#123;</div><div class="line">    </div><div class="line">    private Button[] sub_button;</div><div class="line"></div><div class="line">    public Button[] getSub_button() &#123;</div><div class="line">        return sub_button;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSub_button(Button[] sub_button) &#123;</div><div class="line">        this.sub_button = sub_button;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-菜单对象的封装"><a href="#4-菜单对象的封装" class="headerlink" title="4.菜单对象的封装"></a>4.菜单对象的封装</h2><p>最后是整个菜单对象的封装，菜单对象包含多个菜单项（最多只能有3个），这些菜单项即可以是子菜单项（不含二级菜单的一级菜单），也可以是父菜单项（包含二级菜单的菜单项），如果能明白上面所讲的，再来看封装后的代码就很容易理解了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.menu;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 整个菜单对象的封装</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:59:46</div><div class="line"> */</div><div class="line">public class Menu &#123;</div><div class="line"></div><div class="line">    private Button[] button;</div><div class="line"></div><div class="line">    public Button[] getButton() &#123;</div><div class="line">        return button;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setButton(Button[] button) &#123;</div><div class="line">        this.button = button;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于菜单的POJO类的封装就介绍完了。</p>
<h2 id="5-接口凭证的封装"><a href="#5-接口凭证的封装" class="headerlink" title="5.接口凭证的封装"></a>5.接口凭证的封装</h2><p>AccessToken 的POJO的封装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 微信通用接口凭证</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午4:01:12</div><div class="line"> */</div><div class="line">public class AccessToken &#123;</div><div class="line"></div><div class="line">    // 获取到的凭证</div><div class="line">    private String token;</div><div class="line"></div><div class="line">    // 凭证有效时间，单位：秒</div><div class="line">    private int expiresIn;</div><div class="line"></div><div class="line">    public String getToken() &#123;</div><div class="line">        return token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setToken(String token) &#123;</div><div class="line">        this.token = token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getExpiresIn() &#123;</div><div class="line">        return expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setExpiresIn(int expiresIn) &#123;</div><div class="line">        this.expiresIn = expiresIn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>封装通用的请求方法</p>
<p>读到这里，就默认大家已经掌握了上面讲到的所有关于自定义菜单的理论知识，下面就进入代码实战讲解的部分。</p>
<p>先前我们了解到，创建菜单需要调用二个接口，并且都是https请求，而非http。如果要封装一个通用的请求方法，该方法至少需要具备以下能力：</p>
<p>1）支持HTTPS请求；</p>
<p>2）支持GET、POST两种方式；</p>
<p>3）支持参数提交，也支持无参数的情况；</p>
<h2 id="6-创建证书信任管理器"><a href="#6-创建证书信任管理器" class="headerlink" title="6.创建证书信任管理器"></a>6.创建证书信任管理器</h2><p>对于https请求，我们需要一个证书信任管理器，这个管理器类需要自己定义，但需要实现X509TrustManager接口，代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.security.cert.CertificateException;</div><div class="line">import java.security.cert.X509Certificate;</div><div class="line"></div><div class="line">import javax.net.ssl.X509TrustManager;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 证书信任管理器（用于https请求）</div><div class="line"> * 这个证书管理器的作用就是让它信任我们指定的证书，下面的代码意味着信任所有证书，不管是否权威机构颁发。</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:22:19</div><div class="line"> */</div><div class="line">public class MyX509TrustManager implements X509TrustManager &#123;</div><div class="line"></div><div class="line">    // 检查客户端证书</div><div class="line">    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检查服务器端证书</div><div class="line">    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 返回受信任的X509证书数组</div><div class="line">    public X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个证书管理器的作用就是让它信任我们指定的证书，上面的代码意味着信任所有证书，不管是否权威机构颁发。</p>
<h2 id="7-https请求方法实现"><a href="#7-https请求方法实现" class="headerlink" title="7.https请求方法实现"></a>7.https请求方法实现</h2><p>证书有了，通用的https请求方法就不难实现了，实现代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStream;</div><div class="line">import java.net.ConnectException;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">import javax.net.ssl.HttpsURLConnection;</div><div class="line">import javax.net.ssl.SSLContext;</div><div class="line">import javax.net.ssl.SSLSocketFactory;</div><div class="line">import javax.net.ssl.TrustManager;</div><div class="line"></div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.wyj.wechart.menu.Menu;</div><div class="line">import com.wyj.wechart.pojo.AccessToken;</div><div class="line"></div><div class="line">import net.sf.json.JSONException;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 公众平台通用接口工具类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午4:06:13</div><div class="line"> */</div><div class="line">public class WeixinUtil &#123;</div><div class="line"></div><div class="line">    private static Logger log = LoggerFactory.getLogger(WeixinUtil.class);</div><div class="line"></div><div class="line">    // 获取access_token的接口地址（GET） 限200（次/天）</div><div class="line">    public final static String access_token_url = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&quot;;</div><div class="line"></div><div class="line">    // 菜单创建（POST） 限100（次/天）</div><div class="line">    public static String menu_create_url = &quot;https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 创建菜单</div><div class="line">     * </div><div class="line">     * @param menu</div><div class="line">     *            菜单实例</div><div class="line">     * @param accessToken</div><div class="line">     *            有效的access_token</div><div class="line">     * @return 0表示成功，其他值表示失败</div><div class="line">     */</div><div class="line">    public static int createMenu(Menu menu, String accessToken) &#123;</div><div class="line">        int result = 0;</div><div class="line">        // 拼装创建菜单的url</div><div class="line">        String url = menu_create_url.replace(&quot;ACCESS_TOKEN&quot;, accessToken);</div><div class="line">        // 将菜单对象转换成json字符串</div><div class="line">        String jsonMenu = JSONObject.fromObject(menu).toString();</div><div class="line">        // 调用接口创建菜单</div><div class="line">        JSONObject jsonObject = httpRequest(url, &quot;POST&quot;, jsonMenu);</div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            if (0 != jsonObject.getInt(&quot;errcode&quot;)) &#123;</div><div class="line">                result = jsonObject.getInt(&quot;errcode&quot;);</div><div class="line">                log.error(&quot;创建菜单失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, jsonObject.getInt(&quot;errcode&quot;), jsonObject.getString(&quot;errmsg&quot;));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取access_token</div><div class="line">     * </div><div class="line">     * @param appid</div><div class="line">     *            凭证</div><div class="line">     * @param appsecret</div><div class="line">     *            密钥</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static AccessToken getAccessToken(String appid, String appsecret) &#123;</div><div class="line">        AccessToken accessToken = null;</div><div class="line"></div><div class="line">        String requestUrl = access_token_url.replace(&quot;APPID&quot;, appid).replace(&quot;APPSECRET&quot;, appsecret);</div><div class="line">        JSONObject jsonObject = httpRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line">        // 如果请求成功</div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                accessToken = new AccessToken();</div><div class="line">                accessToken.setToken(jsonObject.getString(&quot;access_token&quot;));</div><div class="line">                accessToken.setExpiresIn(jsonObject.getInt(&quot;expires_in&quot;));</div><div class="line">            &#125; catch (JSONException e) &#123;</div><div class="line">                accessToken = null;</div><div class="line">                // 获取token失败</div><div class="line">                log.error(&quot;获取token失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, jsonObject.getInt(&quot;errcode&quot;), jsonObject.getString(&quot;errmsg&quot;));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 描述: 发起https请求并获取结果</div><div class="line">     * </div><div class="line">     * @param requestUrl</div><div class="line">     *            请求地址</div><div class="line">     * @param requestMethod</div><div class="line">     *            请求方式（GET、POST）</div><div class="line">     * @param outputStr</div><div class="line">     *            提交的数据</div><div class="line">     * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值)</div><div class="line">     */</div><div class="line">    public static JSONObject httpRequest(String requestUrl, String requestMethod, String outputStr) &#123;</div><div class="line">        JSONObject jsonObject = null;</div><div class="line">        StringBuffer buffer = new StringBuffer();</div><div class="line">        try &#123;</div><div class="line">            // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">            TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">            SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">            sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">            // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">            SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">            URL url = new URL(requestUrl);</div><div class="line">            HttpsURLConnection httpUrlConn = (HttpsURLConnection) url.openConnection();</div><div class="line">            httpUrlConn.setSSLSocketFactory(ssf);</div><div class="line"></div><div class="line">            httpUrlConn.setDoOutput(true);</div><div class="line">            httpUrlConn.setDoInput(true);</div><div class="line">            httpUrlConn.setUseCaches(false);</div><div class="line"></div><div class="line">            // 设置请求方式（GET/POST）</div><div class="line">            httpUrlConn.setRequestMethod(requestMethod);</div><div class="line"></div><div class="line">            if (&quot;GET&quot;.equalsIgnoreCase(requestMethod))</div><div class="line">                httpUrlConn.connect();</div><div class="line"></div><div class="line">            // 当有数据需要提交时</div><div class="line">            if (null != outputStr) &#123;</div><div class="line">                OutputStream outputStream = httpUrlConn.getOutputStream();</div><div class="line">                // 注意编码格式，防止中文乱码</div><div class="line">                outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;));</div><div class="line">                outputStream.close();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 将返回的输入流转换成字符串</div><div class="line">            InputStream inputStream = httpUrlConn.getInputStream();</div><div class="line">            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);</div><div class="line">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line"></div><div class="line">            String str = null;</div><div class="line">            while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">                buffer.append(str);</div><div class="line">            &#125;</div><div class="line">            bufferedReader.close();</div><div class="line">            inputStreamReader.close();</div><div class="line">            // 释放资源</div><div class="line">            inputStream.close();</div><div class="line">            inputStream = null;</div><div class="line">            httpUrlConn.disconnect();</div><div class="line">            jsonObject = JSONObject.fromObject(buffer.toString());</div><div class="line">        &#125; catch (ConnectException ce) &#123;</div><div class="line">            log.error(&quot;Weixin server connection timed out.&quot;);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(&quot;https request error:&#123;&#125;&quot;, e);</div><div class="line">        &#125;</div><div class="line">        return jsonObject;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-添加菜单管理器："><a href="#8-添加菜单管理器：" class="headerlink" title="8.添加菜单管理器："></a>8.添加菜单管理器：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.main;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.wyj.wechart.menu.Button;</div><div class="line">import com.wyj.wechart.menu.CommonButton;</div><div class="line">import com.wyj.wechart.menu.ComplexButton;</div><div class="line">import com.wyj.wechart.menu.Menu;</div><div class="line">import com.wyj.wechart.pojo.AccessToken;</div><div class="line">import com.wyj.wechart.utils.WeixinUtil;</div><div class="line">/**</div><div class="line"> * 菜单管理器类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午4:12:08</div><div class="line"> */</div><div class="line">public class MenuManager &#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(MenuManager.class);</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 第三方用户唯一凭证</div><div class="line">        String appId = &quot;wx17fdedc3d6d0b68e&quot;;</div><div class="line">        // 第三方用户唯一凭证密钥</div><div class="line">        String appSecret = &quot;c3b3d919d65a781ba7db58d9d8dfb515&quot;;</div><div class="line"></div><div class="line">        // 调用接口获取access_token</div><div class="line">        AccessToken at = WeixinUtil.getAccessToken(appId, appSecret);</div><div class="line"></div><div class="line">        if (null != at) &#123;</div><div class="line">            // 调用接口创建菜单</div><div class="line">            int result = WeixinUtil.createMenu(getMenu(), at.getToken());</div><div class="line"></div><div class="line">            // 判断菜单创建结果</div><div class="line">            if (0 == result)</div><div class="line">                log.info(&quot;菜单创建成功！&quot;);</div><div class="line">            else</div><div class="line">                log.info(&quot;菜单创建失败，错误码：&quot; + result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 组装菜单数据</div><div class="line">     * </div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    private static Menu getMenu() &#123;</div><div class="line">        CommonButton btn11 = new CommonButton();</div><div class="line">        btn11.setName(&quot;天气预报&quot;);</div><div class="line">        btn11.setType(&quot;view&quot;);</div><div class="line">        btn11.setKey(&quot;11&quot;);</div><div class="line">        btn11.setUrl(&quot;http://www.weather.com.cn/weather/101190101.shtml&quot;);</div><div class="line"></div><div class="line">        CommonButton btn12 = new CommonButton();</div><div class="line">        btn12.setName(&quot;公交查询&quot;);</div><div class="line">        btn12.setType(&quot;view&quot;);</div><div class="line">        btn12.setKey(&quot;12&quot;);</div><div class="line">        btn12.setUrl(&quot;http://www.gongjiao.com/&quot;);</div><div class="line">        </div><div class="line">        CommonButton btn13 = new CommonButton();</div><div class="line">        btn13.setName(&quot;百度地图&quot;);</div><div class="line">        btn13.setType(&quot;view&quot;);</div><div class="line">        btn13.setKey(&quot;13&quot;);</div><div class="line">        btn13.setUrl(&quot;https://map.baidu.com/&quot;);</div><div class="line">        </div><div class="line">        CommonButton btn14 = new CommonButton();</div><div class="line">        btn14.setName(&quot;滴滴出行&quot;);</div><div class="line">        btn14.setType(&quot;click&quot;);</div><div class="line">        btn14.setKey(&quot;14&quot;);</div><div class="line"></div><div class="line">        CommonButton btn21 = new CommonButton();</div><div class="line">        btn21.setName(&quot;csdn&quot;);</div><div class="line">        btn21.setType(&quot;click&quot;);</div><div class="line">        btn21.setKey(&quot;21&quot;);</div><div class="line"></div><div class="line">        CommonButton btn22 = new CommonButton();</div><div class="line">        btn22.setName(&quot;博客园&quot;);</div><div class="line">        btn22.setType(&quot;click&quot;);</div><div class="line">        btn22.setKey(&quot;22&quot;);</div><div class="line"></div><div class="line">        CommonButton btn23 = new CommonButton();</div><div class="line">        btn23.setName(&quot;开发头条&quot;);</div><div class="line">        btn23.setType(&quot;click&quot;);</div><div class="line">        btn23.setKey(&quot;23&quot;);</div><div class="line"></div><div class="line">        CommonButton btn24 = new CommonButton();</div><div class="line">        btn24.setName(&quot;云栖社区&quot;);</div><div class="line">        btn24.setType(&quot;click&quot;);</div><div class="line">        btn24.setKey(&quot;24&quot;);</div><div class="line"></div><div class="line">        CommonButton btn25 = new CommonButton();</div><div class="line">        btn25.setName(&quot;github&quot;);</div><div class="line">        btn25.setType(&quot;click&quot;);</div><div class="line">        btn25.setKey(&quot;25&quot;);</div><div class="line"></div><div class="line">        CommonButton btn31 = new CommonButton();</div><div class="line">        btn31.setName(&quot;淘宝网&quot;);</div><div class="line">        btn31.setType(&quot;click&quot;);</div><div class="line">        btn31.setKey(&quot;31&quot;);</div><div class="line"></div><div class="line">        CommonButton btn32 = new CommonButton();</div><div class="line">        btn32.setName(&quot;电影天堂&quot;);</div><div class="line">        btn32.setType(&quot;click&quot;);</div><div class="line">        btn32.setKey(&quot;32&quot;);</div><div class="line"></div><div class="line">        CommonButton btn33 = new CommonButton();</div><div class="line">        btn33.setName(&quot;小游戏&quot;);</div><div class="line">        btn33.setType(&quot;click&quot;);</div><div class="line">        btn33.setKey(&quot;33&quot;);</div><div class="line"></div><div class="line">        </div><div class="line">        /**</div><div class="line">         * 微信：  mainBtn1,mainBtn2,mainBtn3底部的三个一级菜单。</div><div class="line">         */</div><div class="line">        </div><div class="line">        ComplexButton mainBtn1 = new ComplexButton();</div><div class="line">        mainBtn1.setName(&quot;生活便利&quot;);</div><div class="line">        //一级下有4个子菜单</div><div class="line">        mainBtn1.setSub_button(new CommonButton[] &#123; btn11, btn12, btn13, btn14 &#125;);</div><div class="line">        </div><div class="line">        ComplexButton mainBtn2 = new ComplexButton();</div><div class="line">        mainBtn2.setName(&quot;学习社区&quot;);</div><div class="line">        mainBtn2.setSub_button(new CommonButton[] &#123; btn21, btn22, btn23, btn24, btn25 &#125;);</div><div class="line"></div><div class="line">        </div><div class="line">        ComplexButton mainBtn3 = new ComplexButton();</div><div class="line">        mainBtn3.setName(&quot;娱乐一下&quot;);</div><div class="line">        mainBtn3.setSub_button(new CommonButton[] &#123; btn31, btn32, btn33 &#125;);</div><div class="line"></div><div class="line">        </div><div class="line">        /**</div><div class="line">         * 封装整个菜单</div><div class="line">         */</div><div class="line">        Menu menu = new Menu();</div><div class="line">        menu.setButton(new Button[] &#123; mainBtn1, mainBtn2, mainBtn3 &#125;);</div><div class="line"></div><div class="line">        return menu;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意替换称自己的appId和appSecret。</p>
<p>直接执行MenuManager 的main 方法即可。</p>
<p>效果如下：</p>
<p><img src="/2018/01/26/微信公共号开发教程java版——实现自定义菜单-六/muens.png" alt="muens"></p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：自定义菜单文档说明&quot;&gt;&lt;a href=&quot;#一：自定义菜单文档说明&quot; class=&quot;headerlink&quot; title=&quot;一：自定义菜单文档说明&quot;&gt;&lt;/a&gt;一：自定义菜单文档说明&lt;/h1&gt;&lt;p&gt;自定义菜单能够帮助公众号丰富界面，让用户更好更快地理解公众号的功能。
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——公共号access_token的获取(五)</title>
    <link href="http://wangyuanjun.cn/2018/01/26/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%85%AC%E5%85%B1%E5%8F%B7access-token%E7%9A%84%E8%8E%B7%E5%8F%96-%E4%BA%94/"/>
    <id>http://wangyuanjun.cn/2018/01/26/微信公共号开发教程java版——公共号access-token的获取-五/</id>
    <published>2018-01-26T08:13:15.000Z</published>
    <updated>2018-01-27T14:33:44.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：access-token简介"><a href="#一：access-token简介" class="headerlink" title="一：access_token简介"></a>一：access_token简介</h1><p>为了使第三方开发者能够为用户提供更多更有价值的个性化服务，微信公众平台 开放了许多接口，包括自定义菜单接口、客服接口、获取用户信息接口、用户分组接口、群发接口等，</p>
<p>access_token是公众号的全局唯一接口调用凭据，公众号调用各接口时都需使用access_token。开发者需要进行妥善保存。access_token的存储至少要保留512个字符空间。access_token的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的access_token失效。</p>
<p>公众平台的API调用所需的access_token的使用及生成方式说明：</p>
<p>1、建议公众号开发者使用中控服务器统一获取和刷新Access_token，其他业务逻辑服务器所使用的access_token均来自于该中控服务器，不应该各自去刷新，否则容易造成冲突，导致access_token覆盖而影响业务；</p>
<p>2、目前Access_token的有效期通过返回的expire_in来传达，目前是7200秒之内的值。中控服务器需要根据这个有效时间提前去刷新新access_token。在刷新过程中，中控服务器可对外继续输出的老access_token，此时公众平台后台会保证在5分钟内，新老access_token都可用，这保证了第三方业务的平滑过渡；</p>
<p>3、Access_token的有效时间可能会在未来有调整，所以中控服务器不仅需要内部定时主动刷新，还需要提供被动刷新access_token的接口，这样便于业务服务器在API调用获知access_token已超时的情况下，可以触发access_token的刷新流程。</p>
<p>公众号可以使用AppID和AppSecret调用本接口来获取access_token。AppID和AppSecret可在“微信公众平台-开发-基本配置”页中获得（需要已经成为开发者，且帐号没有异常状态）。<font color="red">调用接口时，请登录“微信公众平台-开发-基本配置”提前将服务器IP地址添加到IP白名单中，点击查看设置方法，否则将无法调用成功。</font></p>
<p>目前，获取access_token接口的调用频率限制为2000次/天，如果每次发送客服消息、获取用户信息、群发消息之前都要先调用获取 access_token接口得到接口访问凭证，这显然是不合理的，一方面会更耗时（多了一次接口调用操作），另一方面2000次/天的调用限制恐怕也不 够用。因此，在实际应用中，我们需要将获取到的access_token存储起来，然后定期调用access_token接口更新它，以保证随时取出的 access_token都是有效的。</p>
<p><font face="黑体" size="5">官网详细介绍：</font><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140183" target="_blank" rel="external">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140183</a></p>
<h2 id="接口调用请求说明"><a href="#接口调用请求说明" class="headerlink" title="接口调用请求说明"></a>接口调用请求说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https请求方式: GEThttps://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</div></pre></td></tr></table></figure>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">是否必须</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>grant_type</td>
<td style="text-align:right">是</td>
<td style="text-align:center">获取access_token填写client_credential</td>
</tr>
<tr>
<td>appid</td>
<td style="text-align:right">是</td>
<td style="text-align:center">第三方用户唯一凭证</td>
</tr>
<tr>
<td>secret</td>
<td style="text-align:right">是</td>
<td style="text-align:center">第三方用户唯一凭证密钥，即appsecret</td>
</tr>
</tbody>
</table>
<h2 id="返回说明"><a href="#返回说明" class="headerlink" title="返回说明"></a>返回说明</h2><p>正常情况下，微信会返回下述JSON数据包给公众号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200&#125;</div></pre></td></tr></table></figure>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>access_token</td>
<td style="text-align:center">获取到的凭证</td>
</tr>
<tr>
<td>expires_in</td>
<td style="text-align:center">凭证有效时间，单位：秒</td>
</tr>
</tbody>
</table>
<p>错误时微信会返回错误码等信息，JSON数据包示例如下（该示例为AppID无效错误）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;errcode&quot;:40013,&quot;errmsg&quot;:&quot;invalid appid&quot;&#125;</div></pre></td></tr></table></figure>
<h2 id="返回码说明"><a href="#返回码说明" class="headerlink" title="返回码说明"></a>返回码说明</h2><table>
<thead>
<tr>
<th>返回码</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-1</td>
<td style="text-align:center">系统繁忙，此时请开发者稍候再试</td>
</tr>
<tr>
<td>0</td>
<td style="text-align:center">请求成功</td>
</tr>
<tr>
<td>40001</td>
<td style="text-align:center">AppSecret错误或者AppSecret不属于这个公众号，请开发者确认AppSecret的正确性</td>
</tr>
<tr>
<td>40002</td>
<td style="text-align:center">请确保grant_type字段值为client_credential</td>
</tr>
<tr>
<td>40164</td>
<td style="text-align:center">调用接口的IP地址不在白名单中，请在接口IP白名单中进行设置</td>
</tr>
</tbody>
</table>
<h1 id="二：封装基本类"><a href="#二：封装基本类" class="headerlink" title="二：封装基本类"></a>二：封装基本类</h1><p>封装一下token类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.pojo;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * 凭证</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:19:14</div><div class="line"> */</div><div class="line">public class Token &#123;</div><div class="line"></div><div class="line">    // 接口访问凭证</div><div class="line">    private String accessToken;</div><div class="line"></div><div class="line">    // 凭证有效期，单位：秒</div><div class="line">    private int expiresIn;</div><div class="line"></div><div class="line">    public String getAccessToken() &#123;</div><div class="line">        return accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAccessToken(String accessToken) &#123;</div><div class="line">        this.accessToken = accessToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getExpiresIn() &#123;</div><div class="line">        return expiresIn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setExpiresIn(int expiresIn) &#123;</div><div class="line">        this.expiresIn = expiresIn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="三：获取token"><a href="#三：获取token" class="headerlink" title="三：获取token"></a>三：获取token</h1><ol>
<li><p>使用网页调试工具调试该接口：<a href="https://mp.weixin.qq.com/debug/cgi-bin/apiinfo?t=index&amp;type=%E5%9F%BA%E7%A1%80%E6%94%AF%E6%8C%81&amp;form=%E8%8E%B7%E5%8F%96access_token%E6%8E%A5%E5%8F%A3%20/token" target="_blank" rel="external">网页调试工具</a></p>
</li>
<li><p>直接通过浏览器访问：<a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET" target="_blank" rel="external">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</a> ，然后把APPID和APPSECRET替换成自己的appID和appsecret，在浏览器即可获得token。</p>
</li>
<li><p>编写程序，模拟https连接，获得token：<br>对于https请求，我们需要一个证书信任管理器，这个管理器类需要自己定义，但需要实现X509TrustManager接口，　</p>
</li>
</ol>
<p>首先定义一个MyX509TrustManager 类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.security.cert.CertificateException;</div><div class="line">import java.security.cert.X509Certificate;</div><div class="line"></div><div class="line">import javax.net.ssl.X509TrustManager;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 证书信任管理器（用于https请求）</div><div class="line"> * 这个证书管理器的作用就是让它信任我们指定的证书，下面的代码意味着信任所有证书，不管是否权威机构颁发。</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:22:19</div><div class="line"> */</div><div class="line">public class MyX509TrustManager implements X509TrustManager &#123;</div><div class="line"></div><div class="line">    // 检查客户端证书</div><div class="line">    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检查服务器端证书</div><div class="line">    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 返回受信任的X509证书数组</div><div class="line">    public X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>建立一个token测试类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.test;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">import javax.net.ssl.HttpsURLConnection;</div><div class="line">import javax.net.ssl.SSLContext;</div><div class="line">import javax.net.ssl.SSLSocketFactory;</div><div class="line">import javax.net.ssl.TrustManager;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.Token;</div><div class="line">import com.wyj.wechart.utils.CommonUtil;</div><div class="line">import com.wyj.wechart.utils.MyX509TrustManager;</div><div class="line"></div><div class="line">public class TokenTest &#123;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testGetToken1() throws Exception &#123;</div><div class="line">        String tokenUrl = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=appID&amp;secret=appsecret&quot;;</div><div class="line">        // 建立连接</div><div class="line">        URL url = new URL(tokenUrl);</div><div class="line">        HttpsURLConnection httpUrlConn = (HttpsURLConnection) url.openConnection();</div><div class="line"></div><div class="line">        // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">        TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">        SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">        sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">        // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">        SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">        httpUrlConn.setSSLSocketFactory(ssf);</div><div class="line">        httpUrlConn.setDoOutput(true);</div><div class="line">        httpUrlConn.setDoInput(true);</div><div class="line"></div><div class="line">        // 设置请求方式（GET/POST）</div><div class="line">        httpUrlConn.setRequestMethod(&quot;GET&quot;);</div><div class="line"></div><div class="line">        // 取得输入流</div><div class="line">        InputStream inputStream = httpUrlConn.getInputStream();</div><div class="line">        InputStreamReader inputStreamReader = new InputStreamReader(</div><div class="line">                inputStream, &quot;utf-8&quot;);</div><div class="line">        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line">        // 读取响应内容</div><div class="line">        StringBuffer buffer = new StringBuffer();</div><div class="line">        String str = null;</div><div class="line">        while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">            buffer.append(str);</div><div class="line">        &#125;</div><div class="line">        bufferedReader.close();</div><div class="line">        inputStreamReader.close();</div><div class="line">        // 释放资源</div><div class="line">        inputStream.close();</div><div class="line">        httpUrlConn.disconnect();</div><div class="line">        // 输出返回结果</div><div class="line">        System.out.println(buffer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 微信服务器返回的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;access_token&quot;:&quot;E3kRcQTati3QBPz97ou7zG0NXFrZFbA5No_hs5FNUZ62ROT0jr0txWr-gG1w-t06kk0zBW0kFmJiicJAydFyHNZhIh2uqIw4B5t85huRLs4&quot;,&quot;expires_in&quot;:7200&#125;</div></pre></td></tr></table></figure>
<p>代码优化：微信服务器返回的是json数据，如何从json里面解析出来的值</p>
<p>通过一款开源的json开发工具包json-lib，将他转换为java对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;json-lib&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.4&lt;/version&gt;</div><div class="line">	&lt;classifier&gt;jdk15&lt;/classifier&gt;&lt;!--指定jdk版本 --&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>封装一个通用的工具类 CommonUtil ，用于专门获取token：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStream;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.net.ConnectException;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">import javax.net.ssl.HttpsURLConnection;</div><div class="line">import javax.net.ssl.SSLContext;</div><div class="line">import javax.net.ssl.SSLSocketFactory;</div><div class="line">import javax.net.ssl.TrustManager;</div><div class="line"></div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.Token;</div><div class="line">import com.wyj.wechart.pojo.WeixinUserInfo;</div><div class="line"></div><div class="line">import net.sf.json.JSONException;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 通用工具类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午3:36:50</div><div class="line"> */</div><div class="line">public class CommonUtil &#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(CommonUtil.class);</div><div class="line"></div><div class="line">    // 凭证获取（GET）</div><div class="line">    public final static String token_url = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 发送https请求</div><div class="line">     * </div><div class="line">     * @param requestUrl</div><div class="line">     *            请求地址</div><div class="line">     * @param requestMethod</div><div class="line">     *            请求方式（GET、POST）</div><div class="line">     * @param outputStr</div><div class="line">     *            提交的数据</div><div class="line">     * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值)</div><div class="line">     */</div><div class="line">    public static JSONObject httpsRequest(String requestUrl, String requestMethod, String outputStr) &#123;</div><div class="line">        JSONObject jsonObject = null;</div><div class="line">        try &#123;</div><div class="line">            // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">            TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">            SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">            sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">            // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">            SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">            URL url = new URL(requestUrl);</div><div class="line">            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</div><div class="line">            conn.setSSLSocketFactory(ssf);</div><div class="line"></div><div class="line">            conn.setDoOutput(true);</div><div class="line">            conn.setDoInput(true);</div><div class="line">            conn.setUseCaches(false);</div><div class="line">            // 设置请求方式（GET/POST）</div><div class="line">            conn.setRequestMethod(requestMethod);</div><div class="line"></div><div class="line">            // 当outputStr不为null时向输出流写数据</div><div class="line">            if (null != outputStr) &#123;</div><div class="line">                OutputStream outputStream = conn.getOutputStream();</div><div class="line">                // 注意编码格式</div><div class="line">                outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;));</div><div class="line">                outputStream.close();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 从输入流读取返回内容</div><div class="line">            InputStream inputStream = conn.getInputStream();</div><div class="line">            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);</div><div class="line">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line">            String str = null;</div><div class="line">            StringBuffer buffer = new StringBuffer();</div><div class="line">            while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">                buffer.append(str);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 释放资源</div><div class="line">            bufferedReader.close();</div><div class="line">            inputStreamReader.close();</div><div class="line">            inputStream.close();</div><div class="line">            inputStream = null;</div><div class="line">            conn.disconnect();</div><div class="line">            jsonObject = JSONObject.fromObject(buffer.toString());</div><div class="line">        &#125; catch (ConnectException ce) &#123;</div><div class="line">            log.error(&quot;连接超时：&#123;&#125;&quot;, ce);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(&quot;https请求异常：&#123;&#125;&quot;, e);</div><div class="line">        &#125;</div><div class="line">        return jsonObject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取接口访问凭证</div><div class="line">     * </div><div class="line">     * @param appid</div><div class="line">     *            凭证</div><div class="line">     * @param appsecret</div><div class="line">     *            密钥</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static Token getToken(String appid, String appsecret) &#123;</div><div class="line">        Token token = null;</div><div class="line">        String requestUrl = token_url.replace(&quot;APPID&quot;, appid).replace(&quot;APPSECRET&quot;, appsecret);</div><div class="line">        // 发起GET请求获取凭证</div><div class="line">        JSONObject jsonObject = httpsRequest(requestUrl, &quot;GET&quot;, null);</div><div class="line"></div><div class="line">        if (null != jsonObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                token = new Token();</div><div class="line">                token.setAccessToken(jsonObject.getString(&quot;access_token&quot;));</div><div class="line">                token.setExpiresIn(jsonObject.getInt(&quot;expires_in&quot;));</div><div class="line">            &#125; catch (JSONException e) &#123;</div><div class="line">                token = null;</div><div class="line">                // 获取token失败</div><div class="line">                log.error(&quot;获取token失败 errcode:&#123;&#125; errmsg:&#123;&#125;&quot;, jsonObject.getInt(&quot;errcode&quot;), jsonObject.getString(&quot;errmsg&quot;));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return token;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改Token测试类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.test;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">import javax.net.ssl.HttpsURLConnection;</div><div class="line">import javax.net.ssl.SSLContext;</div><div class="line">import javax.net.ssl.SSLSocketFactory;</div><div class="line">import javax.net.ssl.TrustManager;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">import com.wyj.wechart.pojo.Token;</div><div class="line">import com.wyj.wechart.utils.CommonUtil;</div><div class="line">import com.wyj.wechart.utils.MyX509TrustManager;</div><div class="line"></div><div class="line">public class TokenTest &#123;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testGetToken1() throws Exception &#123;</div><div class="line">        String tokenUrl = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=appID&amp;secret=appsecret&quot;;</div><div class="line">        // 建立连接</div><div class="line">        URL url = new URL(tokenUrl);</div><div class="line">        HttpsURLConnection httpUrlConn = (HttpsURLConnection) url.openConnection();</div><div class="line"></div><div class="line">        // 创建SSLContext对象，并使用我们指定的信任管理器初始化</div><div class="line">        TrustManager[] tm = &#123; new MyX509TrustManager() &#125;;</div><div class="line">        SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</div><div class="line">        sslContext.init(null, tm, new java.security.SecureRandom());</div><div class="line">        // 从上述SSLContext对象中得到SSLSocketFactory对象</div><div class="line">        SSLSocketFactory ssf = sslContext.getSocketFactory();</div><div class="line"></div><div class="line">        httpUrlConn.setSSLSocketFactory(ssf);</div><div class="line">        httpUrlConn.setDoOutput(true);</div><div class="line">        httpUrlConn.setDoInput(true);</div><div class="line"></div><div class="line">        // 设置请求方式（GET/POST）</div><div class="line">        httpUrlConn.setRequestMethod(&quot;GET&quot;);</div><div class="line"></div><div class="line">        // 取得输入流</div><div class="line">        InputStream inputStream = httpUrlConn.getInputStream();</div><div class="line">        InputStreamReader inputStreamReader = new InputStreamReader(</div><div class="line">                inputStream, &quot;utf-8&quot;);</div><div class="line">        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</div><div class="line">        // 读取响应内容</div><div class="line">        StringBuffer buffer = new StringBuffer();</div><div class="line">        String str = null;</div><div class="line">        while ((str = bufferedReader.readLine()) != null) &#123;</div><div class="line">            buffer.append(str);</div><div class="line">        &#125;</div><div class="line">        bufferedReader.close();</div><div class="line">        inputStreamReader.close();</div><div class="line">        // 释放资源</div><div class="line">        inputStream.close();</div><div class="line">        httpUrlConn.disconnect();</div><div class="line">        // 输出返回结果</div><div class="line">        System.out.println(buffer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testGetToken2() &#123;</div><div class="line">        Token token = CommonUtil.getToken(&quot;appID&quot;,&quot;appsecret&quot;);</div><div class="line">        System.out.println(&quot;access_token:&quot;+token.getAccessToken());</div><div class="line">        System.out.println(&quot;expires_in:&quot;+token.getExpiresIn());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台输出效果如下，说明我们获取到了access_token和expires_in：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">access_token:2amR6pr1eN-BuSBgho-nzo5tofxJ6BdEnRJQ87Zs5bj4ny4CGB8w-1D3YtjG2PzmEvVm1INrsVg-5BjyHCkWmBKsLPDSF3r_bdaPxMpKtbw</div><div class="line">expires_in:7200</div></pre></td></tr></table></figure>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：access-token简介&quot;&gt;&lt;a href=&quot;#一：access-token简介&quot; class=&quot;headerlink&quot; title=&quot;一：access_token简介&quot;&gt;&lt;/a&gt;一：access_token简介&lt;/h1&gt;&lt;p&gt;为了使第三方开发者能够为用户
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——发送消息和处理消息(四)</title>
    <link href="http://wangyuanjun.cn/2018/01/26/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%92%8C%E5%A4%84%E7%90%86%E6%B6%88%E6%81%AF-%E5%9B%9B/"/>
    <id>http://wangyuanjun.cn/2018/01/26/微信公共号开发教程java版——发送消息和处理消息-四/</id>
    <published>2018-01-26T06:13:13.000Z</published>
    <updated>2018-01-27T14:33:32.801Z</updated>
    
    <content type="html"><![CDATA[<p>消息的发送和处理是在doPost方法中完成的<br><img src="/2018/01/26/微信公共号开发教程java版——发送消息和处理消息-四/消息发送处理.png" alt="消息发送处理"></p>
<h1 id="一：微信公众平台的通讯过程"><a href="#一：微信公众平台的通讯过程" class="headerlink" title="一：微信公众平台的通讯过程"></a>一：微信公众平台的通讯过程</h1><p>当微信用户向你的公众平台发送一条消息，实际上这条消息首先发送到微信服务器，由微信服务器向网站服务器发起另外一个请求，网站服务器返回这个请求的结果，再由微信服务器发送到微信客户端。</p>
<p>整个消息通讯流程如下图：<br><img src="/2018/01/26/微信公共号开发教程java版——发送消息和处理消息-四/通讯过程.png" alt="通讯过程"><br>    上述5个步骤中，作为开发者我们主要精力都集中在步骤3上，这个步骤主实际上要有3项任务：</p>
<p>接收来自2的XML信息<br>服务器内部逻辑执行<br>组织并返回用于4的XML信息<br>    上述三项任务我会在后面做详细说明，并提供一整套简单、高效的处理方法。</p>
<h1 id="二：解析微信服务器传来的消息"><a href="#二：解析微信服务器传来的消息" class="headerlink" title="二：解析微信服务器传来的消息"></a>二：解析微信服务器传来的消息</h1><p>因为微信服务器发送过来的是xml格式的消息，所以我们可以采用 开源框架dom4j去解析xml 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;dom4j&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;dom4j&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.6.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h1 id="三：将响应消息转换成xml返回给微信服务器"><a href="#三：将响应消息转换成xml返回给微信服务器" class="headerlink" title="三：将响应消息转换成xml返回给微信服务器"></a>三：将响应消息转换成xml返回给微信服务器</h1><p>如何将响应消息转换成xml返回的问题，这里我们将  采用开源框架xstream来实现Java类到xml的转换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 采用开源框架xstream来实现Java类到xml的转换 --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;com.thoughtworks.xstream&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;xstream&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4.10&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h2 id="1-封装消息处理工具："><a href="#1-封装消息处理工具：" class="headerlink" title="1.封装消息处理工具："></a>1.封装消息处理工具：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.Writer;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line">import org.dom4j.Document;</div><div class="line">import org.dom4j.Element;</div><div class="line">import org.dom4j.io.SAXReader;</div><div class="line"></div><div class="line">import com.thoughtworks.xstream.XStream;</div><div class="line">import com.thoughtworks.xstream.core.util.QuickWriter;</div><div class="line">import com.thoughtworks.xstream.io.HierarchicalStreamWriter;</div><div class="line">import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;</div><div class="line">import com.thoughtworks.xstream.io.xml.XppDriver;</div><div class="line">import com.wyj.wechart.message.resp.Article;</div><div class="line">import com.wyj.wechart.message.resp.ImageMessage;</div><div class="line">import com.wyj.wechart.message.resp.MusicMessage;</div><div class="line">import com.wyj.wechart.message.resp.NewsMessage;</div><div class="line">import com.wyj.wechart.message.resp.TextMessage;</div><div class="line">import com.wyj.wechart.message.resp.VideoMessage;</div><div class="line">import com.wyj.wechart.message.resp.VoiceMessage;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 消息处理工具类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午2:09:54</div><div class="line"> */</div><div class="line">public class MessageUtil &#123;</div><div class="line"></div><div class="line">    // 请求消息类型：文本</div><div class="line">    public static final String REQ_MESSAGE_TYPE_TEXT = &quot;text&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：图片</div><div class="line">    public static final String REQ_MESSAGE_TYPE_IMAGE = &quot;image&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：语音</div><div class="line">    public static final String REQ_MESSAGE_TYPE_VOICE = &quot;voice&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：视频</div><div class="line">    public static final String REQ_MESSAGE_TYPE_VIDEO = &quot;video&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：小视频</div><div class="line">    public static final String REQ_MESSAGE_TYPE_SHORTVIDEO = &quot;shortvideo&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：地理位置</div><div class="line">    public static final String REQ_MESSAGE_TYPE_LOCATION = &quot;location&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：链接</div><div class="line">    public static final String REQ_MESSAGE_TYPE_LINK = &quot;link&quot;;</div><div class="line"></div><div class="line">    // 请求消息类型：事件推送</div><div class="line">    public static final String REQ_MESSAGE_TYPE_EVENT = &quot;event&quot;;</div><div class="line"></div><div class="line">    // 事件类型：subscribe(订阅)</div><div class="line">    public static final String EVENT_TYPE_SUBSCRIBE = &quot;subscribe&quot;;</div><div class="line"></div><div class="line">    // 事件类型：unsubscribe(取消订阅)</div><div class="line">    public static final String EVENT_TYPE_UNSUBSCRIBE = &quot;unsubscribe&quot;;</div><div class="line"></div><div class="line">    // 事件类型：scan(用户已关注时的扫描带参数二维码)</div><div class="line">    public static final String EVENT_TYPE_SCAN = &quot;scan&quot;;</div><div class="line"></div><div class="line">    // 事件类型：LOCATION(上报地理位置)</div><div class="line">    public static final String EVENT_TYPE_LOCATION = &quot;LOCATION&quot;;</div><div class="line"></div><div class="line">    // 事件类型：CLICK(自定义菜单)</div><div class="line">    public static final String EVENT_TYPE_CLICK = &quot;CLICK&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：文本</div><div class="line">    public static final String RESP_MESSAGE_TYPE_TEXT = &quot;text&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：图片</div><div class="line">    public static final String RESP_MESSAGE_TYPE_IMAGE = &quot;image&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：语音</div><div class="line">    public static final String RESP_MESSAGE_TYPE_VOICE = &quot;voice&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：视频</div><div class="line">    public static final String RESP_MESSAGE_TYPE_VIDEO = &quot;video&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：音乐</div><div class="line">    public static final String RESP_MESSAGE_TYPE_MUSIC = &quot;music&quot;;</div><div class="line"></div><div class="line">    // 响应消息类型：图文</div><div class="line">    public static final String RESP_MESSAGE_TYPE_NEWS = &quot;news&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 解析微信发来的请求（XML）</div><div class="line">     * </div><div class="line">     * @param request</div><div class="line">     * @return Map&lt;String, String&gt;</div><div class="line">     * @throws Exception</div><div class="line">     */</div><div class="line">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">    public static Map&lt;String, String&gt; parseXml(HttpServletRequest request) throws Exception &#123;</div><div class="line">        // 将解析结果存储在HashMap中</div><div class="line">        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</div><div class="line"></div><div class="line">        // 从request中取得输入流</div><div class="line">        InputStream inputStream = request.getInputStream();</div><div class="line">        // 读取输入流</div><div class="line">        SAXReader reader = new SAXReader();</div><div class="line">        Document document = reader.read(inputStream);</div><div class="line">        // 得到xml根元素</div><div class="line">        Element root = document.getRootElement();</div><div class="line">        // 得到根元素的所有子节点</div><div class="line">        List&lt;Element&gt; elementList = root.elements();</div><div class="line"></div><div class="line">        // 遍历所有子节点</div><div class="line">        for (Element e : elementList)</div><div class="line">            map.put(e.getName(), e.getText());</div><div class="line"></div><div class="line">        // 释放资源</div><div class="line">        inputStream.close();</div><div class="line">        inputStream = null;</div><div class="line"></div><div class="line">        return map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 扩展xstream使其支持CDATA</div><div class="line">     */</div><div class="line">    private static XStream xstream = new XStream(new XppDriver() &#123;</div><div class="line">        public HierarchicalStreamWriter createWriter(Writer out) &#123;</div><div class="line">            return new PrettyPrintWriter(out) &#123;</div><div class="line">                // 对所有xml节点的转换都增加CDATA标记</div><div class="line">                boolean cdata = true;</div><div class="line"></div><div class="line">                @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">                public void startNode(String name, Class clazz) &#123;</div><div class="line">                    super.startNode(name, clazz);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                protected void writeText(QuickWriter writer, String text) &#123;</div><div class="line">                    if (cdata) &#123;</div><div class="line">                        writer.write(&quot;&lt;![CDATA[&quot;);</div><div class="line">                        writer.write(text);</div><div class="line">                        writer.write(&quot;]]&gt;&quot;);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        writer.write(text);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 文本消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param textMessage</div><div class="line">     *            文本消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(TextMessage textMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, textMessage.getClass());</div><div class="line">        return xstream.toXML(textMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 图片消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param imageMessage</div><div class="line">     *            图片消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(ImageMessage imageMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, imageMessage.getClass());</div><div class="line">        return xstream.toXML(imageMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 语音消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param voiceMessage</div><div class="line">     *            语音消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(VoiceMessage voiceMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, voiceMessage.getClass());</div><div class="line">        return xstream.toXML(voiceMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 视频消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param videoMessage</div><div class="line">     *            视频消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(VideoMessage videoMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, videoMessage.getClass());</div><div class="line">        return xstream.toXML(videoMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 音乐消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param musicMessage</div><div class="line">     *            音乐消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(MusicMessage musicMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, musicMessage.getClass());</div><div class="line">        return xstream.toXML(musicMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 图文消息对象转换成xml</div><div class="line">     * </div><div class="line">     * @param newsMessage</div><div class="line">     *            图文消息对象</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String messageToXml(NewsMessage newsMessage) &#123;</div><div class="line">        xstream.alias(&quot;xml&quot;, newsMessage.getClass());</div><div class="line">        xstream.alias(&quot;item&quot;, new Article().getClass());</div><div class="line">        return xstream.toXML(newsMessage);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-使用CoreServlet-类完成消息的接受与响应："><a href="#2-使用CoreServlet-类完成消息的接受与响应：" class="headerlink" title="2.使用CoreServlet 类完成消息的接受与响应："></a>2.使用CoreServlet 类完成消息的接受与响应：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.servlet;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.io.PrintWriter;</div><div class="line"></div><div class="line">import javax.servlet.ServletException;</div><div class="line">import javax.servlet.annotation.WebServlet;</div><div class="line">import javax.servlet.http.HttpServlet;</div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import com.wyj.wechart.service.CoreService;</div><div class="line">import com.wyj.wechart.utils.SignUtil;</div><div class="line">/**</div><div class="line"> * 来接收微信服务器传来信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午2:17:39</div><div class="line"> */</div><div class="line">@WebServlet(urlPatterns = &quot;/wechat&quot;, description = &quot;wechat&quot;)</div><div class="line">public class CoreServlet extends HttpServlet &#123;</div><div class="line">    private static final long serialVersionUID = -8685285401859800066L;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 确认请求来自微信服务器</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</div><div class="line">        System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;doGet()&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);</div><div class="line">        // 微信加密签名  </div><div class="line">        String signature = req.getParameter(&quot;signature&quot;);  </div><div class="line">        // 时间戳  </div><div class="line">        String timestamp = req.getParameter(&quot;timestamp&quot;);  </div><div class="line">        // 随机数  </div><div class="line">        String nonce = req.getParameter(&quot;nonce&quot;);  </div><div class="line">        // 随机字符串  </div><div class="line">        String echostr = req.getParameter(&quot;echostr&quot;);  </div><div class="line">  </div><div class="line">        PrintWriter out = resp.getWriter();  </div><div class="line">        // 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败  </div><div class="line">        if (SignUtil.checkSignature(signature, timestamp, nonce)) &#123;  </div><div class="line">            out.print(echostr);  </div><div class="line">        &#125;  </div><div class="line">        out.close();  </div><div class="line">        out = null;  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 处理微信服务器发来的消息</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</div><div class="line">        System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;doPost()&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);</div><div class="line">        // 消息的接收、处理、响应</div><div class="line">        // 将请求、响应的编码均设置为UTF-8（防止中文乱码）</div><div class="line">        req.setCharacterEncoding(&quot;UTF-8&quot;);</div><div class="line">        resp.setCharacterEncoding(&quot;UTF-8&quot;);</div><div class="line"></div><div class="line">        // 调用核心业务类接收消息、处理消息</div><div class="line">        String respXml = CoreService.processRequest(req);</div><div class="line"></div><div class="line">        // 响应消息</div><div class="line">        PrintWriter out = resp.getWriter();</div><div class="line">        out.print(respXml);</div><div class="line">        out.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-使用CoreService类完成消息的处理："><a href="#3-使用CoreService类完成消息的处理：" class="headerlink" title="3.使用CoreService类完成消息的处理："></a>3.使用CoreService类完成消息的处理：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.service;</div><div class="line"></div><div class="line">import java.util.Date;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line">import com.wyj.wechart.message.resp.TextMessage;</div><div class="line">import com.wyj.wechart.utils.MessageUtil;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * 核心服务类</div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午2:21:24</div><div class="line"> */</div><div class="line">public class CoreService &#123;</div><div class="line">    /**</div><div class="line">     * 处理微信发来的请求</div><div class="line">     * @param request</div><div class="line">     * @return xml</div><div class="line">     */</div><div class="line">    public static String processRequest(HttpServletRequest request) &#123;</div><div class="line">        // xml格式的消息数据</div><div class="line">        String respXml = null;</div><div class="line">        // 默认返回的文本消息内容</div><div class="line">        String respContent = &quot;未知的消息类型！&quot;;</div><div class="line">        try &#123;</div><div class="line">            // 调用parseXml方法解析请求消息</div><div class="line">            Map&lt;String, String&gt; requestMap = MessageUtil.parseXml(request);</div><div class="line">            // 发送方帐号</div><div class="line">            String fromUserName = requestMap.get(&quot;FromUserName&quot;);</div><div class="line">            // 开发者微信号</div><div class="line">            String toUserName = requestMap.get(&quot;ToUserName&quot;);</div><div class="line">            // 消息类型</div><div class="line">            String msgType = requestMap.get(&quot;MsgType&quot;);</div><div class="line"></div><div class="line">            // 回复文本消息</div><div class="line">            TextMessage textMessage = new TextMessage();</div><div class="line">            textMessage.setToUserName(fromUserName);</div><div class="line">            textMessage.setFromUserName(toUserName);</div><div class="line">            textMessage.setCreateTime(new Date().getTime());</div><div class="line">            textMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_TEXT);</div><div class="line"></div><div class="line">            // 文本消息</div><div class="line">            if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_TEXT)) &#123;</div><div class="line">                respContent = &quot;您发送的是文本消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 图片消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_IMAGE)) &#123;</div><div class="line">                respContent = &quot;您发送的是图片消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 语音消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_VOICE)) &#123;</div><div class="line">                respContent = &quot;您发送的是语音消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 视频消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_VIDEO)) &#123;</div><div class="line">                respContent = &quot;您发送的是视频消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 视频消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_SHORTVIDEO)) &#123;</div><div class="line">                respContent = &quot;您发送的是小视频消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 地理位置消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_LOCATION)) &#123;</div><div class="line">                respContent = &quot;您发送的是地理位置消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 链接消息</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_LINK)) &#123;</div><div class="line">                respContent = &quot;您发送的是链接消息！&quot;;</div><div class="line">            &#125;</div><div class="line">            // 事件推送</div><div class="line">            else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_EVENT)) &#123;</div><div class="line">                // 事件类型</div><div class="line">                String eventType = requestMap.get(&quot;Event&quot;);</div><div class="line">                // 关注</div><div class="line">                if (eventType.equals(MessageUtil.EVENT_TYPE_SUBSCRIBE)) &#123;</div><div class="line">                    respContent = &quot;谢谢您的关注！&quot;;</div><div class="line">                &#125;</div><div class="line">                // 取消关注</div><div class="line">                else if (eventType.equals(MessageUtil.EVENT_TYPE_UNSUBSCRIBE)) &#123;</div><div class="line">                    // TODO 取消订阅后用户不会再收到公众账号发送的消息，因此不需要回复</div><div class="line">                &#125;</div><div class="line">                // 扫描带参数二维码</div><div class="line">                else if (eventType.equals(MessageUtil.EVENT_TYPE_SCAN)) &#123;</div><div class="line">                    // TODO 处理扫描带参数二维码事件</div><div class="line">                &#125;</div><div class="line">                // 上报地理位置</div><div class="line">                else if (eventType.equals(MessageUtil.EVENT_TYPE_LOCATION)) &#123;</div><div class="line">                    // TODO 处理上报地理位置事件</div><div class="line">                &#125;</div><div class="line">                // 自定义菜单</div><div class="line">                else if (eventType.equals(MessageUtil.EVENT_TYPE_CLICK)) &#123;</div><div class="line">                    // TODO 处理菜单点击事件</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // 设置文本消息的内容</div><div class="line">            textMessage.setContent(respContent);</div><div class="line">            // 将文本消息对象转换成xml</div><div class="line">            respXml = MessageUtil.messageToXml(textMessage);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return respXml;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本地测试效果如下<br><img src="/2018/01/26/微信公共号开发教程java版——发送消息和处理消息-四/message.png" alt="message"></p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;消息的发送和处理是在doPost方法中完成的&lt;br&gt;&lt;img src=&quot;/2018/01/26/微信公共号开发教程java版——发送消息和处理消息-四/消息发送处理.png&quot; alt=&quot;消息发送处理&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一：微信公众平台的通讯过程&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装(三)</title>
    <link href="http://wangyuanjun.cn/2018/01/25/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF%EF%BC%8C%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF%E5%8F%8A%E4%BA%8B%E4%BB%B6%E6%B6%88%E6%81%AF%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85-%E4%B8%89/"/>
    <id>http://wangyuanjun.cn/2018/01/25/微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装-三/</id>
    <published>2018-01-25T14:55:20.000Z</published>
    <updated>2018-01-27T14:33:22.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：封装请求信息"><a href="#一：封装请求信息" class="headerlink" title="一：封装请求信息"></a>一：封装请求信息</h1><p><img src="/2018/01/25/微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装-三/接收普通消息.png" alt="接收普通消息"></p>
<p>当普通微信用户向公众账号发消息时，微信服务器将POST消息的XML数据包到开发者填写的URL上。<br>各消息类型的推送XML数据包结构如下：<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140453" target="_blank" rel="external">查看官网详细介绍</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line">文本消息</div><div class="line"></div><div class="line"> &lt;xml&gt;</div><div class="line"> &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line"> &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt; </div><div class="line"> &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;</div><div class="line"> &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</div><div class="line"> &lt;Content&gt;&lt;![CDATA[this is a test]]&gt;&lt;/Content&gt;</div><div class="line"> &lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line"> &lt;/xml&gt;</div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	text</div><div class="line">Content    	文本消息内容</div><div class="line">MsgId    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line">图片消息</div><div class="line"></div><div class="line"> &lt;xml&gt;</div><div class="line"> &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line"> &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line"> &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;</div><div class="line"> &lt;MsgType&gt;&lt;![CDATA[image]]&gt;&lt;/MsgType&gt;</div><div class="line"> &lt;PicUrl&gt;&lt;![CDATA[this is a url]]&gt;&lt;/PicUrl&gt;</div><div class="line"> &lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line"> &lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line"> &lt;/xml&gt;</div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	image</div><div class="line">PicUrl    	图片链接</div><div class="line">MediaId    	图片消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">MsgId    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line">语音消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1357290913&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[voice]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;Format&gt;&lt;![CDATA[Format]]&gt;&lt;/Format&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	语音为voice</div><div class="line">MediaId    	语音消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">Format    	语音格式，如amr，speex等</div><div class="line">MsgID    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">请注意，开通语音识别后，用户每次发送语音给公众号时，微信会在推送的语音消息XML数据包中，增加一个Recongnition字段 （注：由于客户端缓存，开发者开启或者关闭语音识别功能，对新关注者立刻生效，对已关注用户需要24小时生效。开发者可以重新关注此帐号进行测试）。开启 语音识别后的语音XML数据包如下：</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1357290913&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[voice]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;Format&gt;&lt;![CDATA[Format]]&gt;&lt;/Format&gt;</div><div class="line">&lt;Recognition&gt;&lt;![CDATA[腾讯微信团队]]&gt;&lt;/Recognition&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">多出的字段中，Format为语音格式，一般为amr，Recognition为语音识别结果，使用UTF8编码。</div><div class="line">视频消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1357290913&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[video]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;ThumbMediaId&gt;&lt;![CDATA[thumb_media_id]]&gt;&lt;/ThumbMediaId&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	视频为video</div><div class="line">MediaId    	视频消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">ThumbMediaId    视频消息缩略图的媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">MsgId    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line">小视频消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1357290913&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[shortvideo]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;ThumbMediaId&gt;&lt;![CDATA[thumb_media_id]]&gt;&lt;/ThumbMediaId&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	小视频为shortvideo</div><div class="line">MediaId    	视频消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">ThumbMediaId    视频消息缩略图的媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">MsgId    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line">地理位置消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1351776360&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[location]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Location_X&gt;23.134521&lt;/Location_X&gt;</div><div class="line">&lt;Location_Y&gt;113.358803&lt;/Location_Y&gt;</div><div class="line">&lt;Scale&gt;20&lt;/Scale&gt;</div><div class="line">&lt;Label&gt;&lt;![CDATA[位置信息]]&gt;&lt;/Label&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt; </div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	开发者微信号</div><div class="line">FromUserName    发送方帐号（一个OpenID）</div><div class="line">CreateTime    	消息创建时间 （整型）</div><div class="line">MsgType    	location</div><div class="line">Location_X    	地理位置维度</div><div class="line">Location_Y    	地理位置经度</div><div class="line">Scale    	地图缩放大小</div><div class="line">Label    	地理位置信息</div><div class="line">MsgId    	消息id，64位整型</div><div class="line"></div><div class="line"> </div><div class="line">链接消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1351776360&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[link]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Title&gt;&lt;![CDATA[公众平台官网链接]]&gt;&lt;/Title&gt;</div><div class="line">&lt;Description&gt;&lt;![CDATA[公众平台官网链接]]&gt;&lt;/Description&gt;</div><div class="line">&lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt; </div><div class="line"></div><div class="line">参数    	描述</div><div class="line">ToUserName    	接收方微信号</div><div class="line">FromUserName    发送方微信号，若为普通用户，则是一个OpenID</div><div class="line">CreateTime    	消息创建时间</div><div class="line">MsgType    	消息类型，link</div><div class="line">Title    	消息标题</div><div class="line">Description    	消息描述</div><div class="line">Url    		消息链接</div><div class="line">MsgId    	消息id，64位整型</div></pre></td></tr></table></figure></p>
<p>其中用户可以向微信服务器发送的消息类型大概可以分为：文本消息，图片消息，语音消息，视频消息，小视频消息，地理位置消息，链接消息。</p>
<p>根据观察可以知道这些消息中，都会传回来这些公共的字段如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ToUserName（开发者微信号）;</div><div class="line"></div><div class="line">FromUserName（发送方帐 号，OPEN_ID）;</div><div class="line"></div><div class="line">CreateTime（消息的创建时间）;</div><div class="line"></div><div class="line">MsgType（消息类型）;</div><div class="line"></div><div class="line">MsgId（消息ID）;</div></pre></td></tr></table></figure></p>
<p>我们把这些封装成一个基类，然后 不同的部分，分别封装为各自的类，这样提高代码的重用性。</p>
<p>这个请求消息的基类BaseMessage ，主要是封装了一些共同的字段。</p>
<h2 id="请求消息的基类BaseMessage"><a href="#请求消息的基类BaseMessage" class="headerlink" title="请求消息的基类BaseMessage"></a>请求消息的基类BaseMessage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line">/**</div><div class="line"> * 请求消息的基类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:30:00</div><div class="line"> */</div><div class="line">public class BaseMessage &#123;</div><div class="line">    </div><div class="line">    // 开发者微信号</div><div class="line">    private String ToUserName;</div><div class="line">    </div><div class="line">    // 发送方帐号（一个OpenID）</div><div class="line">    private String FromUserName;</div><div class="line">    </div><div class="line">    // 消息创建时间 （整型）</div><div class="line">    private long CreateTime;</div><div class="line">    </div><div class="line">    // 消息类型（text/image/location/link）</div><div class="line">    private String MsgType;</div><div class="line">    </div><div class="line">    // 消息id，64位整型</div><div class="line">    private long MsgId;</div><div class="line"></div><div class="line">    public String getToUserName() &#123;</div><div class="line">        return ToUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setToUserName(String toUserName) &#123;</div><div class="line">        ToUserName = toUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getFromUserName() &#123;</div><div class="line">        return FromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFromUserName(String fromUserName) &#123;</div><div class="line">        FromUserName = fromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getCreateTime() &#123;</div><div class="line">        return CreateTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCreateTime(long createTime) &#123;</div><div class="line">        CreateTime = createTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMsgType() &#123;</div><div class="line">        return MsgType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMsgType(String msgType) &#123;</div><div class="line">        MsgType = msgType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getMsgId() &#123;</div><div class="line">        return MsgId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMsgId(long msgId) &#123;</div><div class="line">        MsgId = msgId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-文本消息类Content-，主要是文本消息内容"><a href="#1-文本消息类Content-，主要是文本消息内容" class="headerlink" title="1.文本消息类Content ，主要是文本消息内容:"></a>1.文本消息类Content ，主要是文本消息内容:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line">/**</div><div class="line"> * 请求消息之文本消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:31:49</div><div class="line"> */</div><div class="line">public class TextMessage extends BaseMessage&#123;</div><div class="line">    // 消息内容</div><div class="line">    private String Content;</div><div class="line"></div><div class="line">    public String getContent() &#123;</div><div class="line">        return Content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setContent(String content) &#123;</div><div class="line">        Content = content;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-图片消息："><a href="#2-图片消息：" class="headerlink" title="2.图片消息："></a>2.图片消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line">/**</div><div class="line"> * 请求消息之图片消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:40:47</div><div class="line"> */</div><div class="line">public class ImageMessage extends BaseMessage &#123;</div><div class="line">    </div><div class="line">    // 图片链接</div><div class="line">    private String PicUrl;</div><div class="line">    </div><div class="line">    //图片消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">    private String MediaId;</div><div class="line"></div><div class="line">    public String getPicUrl() &#123;</div><div class="line">        return PicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPicUrl(String picUrl) &#123;</div><div class="line">        PicUrl = picUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-语音消息："><a href="#3-语音消息：" class="headerlink" title="3.语音消息："></a>3.语音消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line">/**</div><div class="line"> * 请求消息之语音消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:41:45</div><div class="line"> */</div><div class="line">public class VoiceMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 语音消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">    private String MediaId;</div><div class="line">    </div><div class="line">    //  语音格式，如amr，speex等</div><div class="line">    private String Format;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getFormat() &#123;</div><div class="line">        return Format;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFormat(String format) &#123;</div><div class="line">        Format = format;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-视频消息："><a href="#4-视频消息：" class="headerlink" title="4.视频消息："></a>4.视频消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 请求消息之视频消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:43:10</div><div class="line"> */</div><div class="line">public class VideoMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 视频消息媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">    private String MediaId;</div><div class="line"></div><div class="line">    // 视频消息缩略图的媒体id，可以调用多媒体文件下载接口拉取数据。</div><div class="line">    private String ThumbMediaId;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getThumbMediaId() &#123;</div><div class="line">        return ThumbMediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setThumbMediaId(String thumbMediaId) &#123;</div><div class="line">        ThumbMediaId = thumbMediaId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-地理位置消息"><a href="#5-地理位置消息" class="headerlink" title="5.地理位置消息:"></a>5.地理位置消息:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 请求消息之地理位置消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:44:56</div><div class="line"> */</div><div class="line">public class LocationMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 地理位置维度</div><div class="line">    private String Location_X;</div><div class="line"></div><div class="line">    // 地理位置经度</div><div class="line">    private String Location_Y;</div><div class="line"></div><div class="line">    // 地图缩放大小</div><div class="line">    private String Scale;</div><div class="line"></div><div class="line">    // 地理位置信息</div><div class="line">    private String Label;</div><div class="line"></div><div class="line">    public String getLocation_X() &#123;</div><div class="line">        return Location_X;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLocation_X(String location_X) &#123;</div><div class="line">        Location_X = location_X;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLocation_Y() &#123;</div><div class="line">        return Location_Y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLocation_Y(String location_Y) &#123;</div><div class="line">        Location_Y = location_Y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getScale() &#123;</div><div class="line">        return Scale;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setScale(String scale) &#123;</div><div class="line">        Scale = scale;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLabel() &#123;</div><div class="line">        return Label;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLabel(String label) &#123;</div><div class="line">        Label = label;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-链接消息："><a href="#6-链接消息：" class="headerlink" title="6.链接消息："></a>6.链接消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.req;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 请求消息之链接消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:45:29</div><div class="line"> */</div><div class="line">public class LinkMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 消息标题</div><div class="line">    private String Title;</div><div class="line"></div><div class="line">    // 消息描述</div><div class="line">    private String Description;</div><div class="line"></div><div class="line">    // 消息链接</div><div class="line">    private String Url;</div><div class="line"></div><div class="line">    public String getTitle() &#123;</div><div class="line">        return Title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTitle(String title) &#123;</div><div class="line">        Title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDescription() &#123;</div><div class="line">        return Description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDescription(String description) &#123;</div><div class="line">        Description = description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUrl() &#123;</div><div class="line">        return Url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUrl(String url) &#123;</div><div class="line">        Url = url;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="二：封装事件"><a href="#二：封装事件" class="headerlink" title="二：封装事件"></a>二：封装事件</h1><p><img src="/2018/01/25/微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装-三/接收事件推送.png" alt="接收事件推送"><br>在微信用户和公众号产生交互的过程中，用户的某些操作会使得微信服务器通过事件推送的形式通知到开发者在开发者中心处设置的服务器地址，从而开发者可以获取到该信息。其中，某些事件推送在发生后，是允许开发者回复用户的，某些则不允许，详细内容如下：<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140454" target="_blank" rel="external">查看官网详细介绍</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line">关注/取消关注事件</div><div class="line"></div><div class="line">用户在关注与取消关注公众号时，微信会把这个事件推送到开发者填写的URL。方便开发者给用户下发欢迎消息或者做帐号的解绑。 </div><div class="line"></div><div class="line">微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次 </div><div class="line"></div><div class="line">关于重试的消息排重，推荐使用FromUserName + CreateTime 排重。 </div><div class="line"></div><div class="line">假如服务器无法保证在五秒内处理并回复，可以直接回复空串，微信服务器不会对此作任何处理，并且不会发起重试。 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[subscribe]]&gt;&lt;/Event&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line">参数  		描述 </div><div class="line"></div><div class="line">ToUserName  	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，subscribe(订阅)、unsubscribe(取消订阅)  </div><div class="line"></div><div class="line">扫描带参数二维码事件</div><div class="line"></div><div class="line">用户扫描带场景值二维码时，可能推送以下两种事件： </div><div class="line">1. 如果用户还未关注公众号，则用户可以关注公众号，关注后微信会将带场景值关注事件推送给开发者。 </div><div class="line">2. 如果用户已经关注公众号，则微信会将带场景值扫描事件推送给开发者。 </div><div class="line"></div><div class="line">1. 用户未关注时，进行关注后的事件推送 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[subscribe]]&gt;&lt;/Event&gt;</div><div class="line">&lt;EventKey&gt;&lt;![CDATA[qrscene_123123]]&gt;&lt;/EventKey&gt;</div><div class="line">&lt;Ticket&gt;&lt;![CDATA[TICKET]]&gt;&lt;/Ticket&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line">参数  		描述 </div><div class="line"></div><div class="line">ToUserName  	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，subscribe  </div><div class="line">EventKey  	事件KEY值，qrscene_为前缀，后面为二维码的参数值  </div><div class="line">Ticket  	二维码的ticket，可用来换取二维码图片  </div><div class="line"></div><div class="line">2. 用户已关注时的事件推送 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[SCAN]]&gt;&lt;/Event&gt;</div><div class="line">&lt;EventKey&gt;&lt;![CDATA[SCENE_VALUE]]&gt;&lt;/EventKey&gt;</div><div class="line">&lt;Ticket&gt;&lt;![CDATA[TICKET]]&gt;&lt;/Ticket&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line">参数  		描述 </div><div class="line"></div><div class="line">ToUserName  	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，SCAN  </div><div class="line">EventKey  	事件KEY值，是一个32位无符号整数，即创建二维码时的二维码scene_id  </div><div class="line">Ticket  	二维码的ticket，可用来换取二维码图片  </div><div class="line"></div><div class="line">上报地理位置事件</div><div class="line"></div><div class="line">用户同意上报地理位置后，每次进入公众号会话时，都会在进入时上报地理位置，或在进入会话后每5秒上报一次地理位置，公众号可以在公众平台网站中修改以上设置。上报地理位置时，微信会将上报地理位置事件推送到开发者填写的URL。 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[LOCATION]]&gt;&lt;/Event&gt;</div><div class="line">&lt;Latitude&gt;23.137466&lt;/Latitude&gt;</div><div class="line">&lt;Longitude&gt;113.352425&lt;/Longitude&gt;</div><div class="line">&lt;Precision&gt;119.385040&lt;/Precision&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line"></div><div class="line">参数  		描述 </div><div class="line"></div><div class="line">ToUserName  	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，LOCATION  </div><div class="line">Latitude  	地理位置纬度  </div><div class="line">Longitude  	地理位置经度  </div><div class="line">Precision  	地理位置精度  </div><div class="line"></div><div class="line">自定义菜单事件</div><div class="line"></div><div class="line">用户点击自定义菜单后，微信会把点击事件推送给开发者，请注意，点击菜单弹出子菜单，不会产生上报。 </div><div class="line"></div><div class="line"> 点击菜单拉取消息时的事件推送 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[CLICK]]&gt;&lt;/Event&gt;</div><div class="line">&lt;EventKey&gt;&lt;![CDATA[EVENTKEY]]&gt;&lt;/EventKey&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line">参数    	描述 </div><div class="line"></div><div class="line">ToUserName  	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，CLICK  </div><div class="line">EventKey  	事件KEY值，与自定义菜单接口中KEY值对应  </div><div class="line"></div><div class="line"></div><div class="line"> 点击菜单跳转链接时的事件推送 </div><div class="line"></div><div class="line">推送XML数据包示例： </div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Event&gt;&lt;![CDATA[VIEW]]&gt;&lt;/Event&gt;</div><div class="line">&lt;EventKey&gt;&lt;![CDATA[www.qq.com]]&gt;&lt;/EventKey&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数说明： </div><div class="line"></div><div class="line">参数  		描述 </div><div class="line"></div><div class="line">ToUserName   	开发者微信号  </div><div class="line">FromUserName  	发送方帐号（一个OpenID）  </div><div class="line">CreateTime  	消息创建时间 （整型）  </div><div class="line">MsgType  	消息类型，event  </div><div class="line">Event  		事件类型，VIEW  </div><div class="line">EventKey  	事件KEY值，设置的跳转URL</div></pre></td></tr></table></figure>
<p>其中用户可以向微信服务器发送的消息类型大概可以分为：文本消息，图片消息，语音消息，视频消息，小视频消息，地理位置消息，链接消息。</p>
<p>根据观察可以知道这些消息中，都会传回来这些公共的字段如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ToUserName（开发者微信号）;</div><div class="line"></div><div class="line">FromUserName（发送方帐 号，OPEN_ID）;</div><div class="line"></div><div class="line">CreateTime（消息的创建时间）;</div><div class="line"></div><div class="line">MsgType（消息类型）;</div><div class="line"></div><div class="line">MsgId（消息ID）;</div></pre></td></tr></table></figure></p>
<p>我们把这些封装成一个基类，然后 不同的部分，分别封装为各自的类，这样提高代码的重用性。</p>
<h2 id="事件的基类BaseEvent"><a href="#事件的基类BaseEvent" class="headerlink" title="事件的基类BaseEvent"></a>事件的基类BaseEvent</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.event;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 事件基类</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:35:47</div><div class="line"> */</div><div class="line">public class BaseEvent &#123;</div><div class="line">    </div><div class="line">    // 开发者微信号</div><div class="line">    private String ToUserName;</div><div class="line">    </div><div class="line">    // 发送方帐号（一个OpenID）</div><div class="line">    private String FromUserName;</div><div class="line">    </div><div class="line">    // 消息创建时间 （整型）</div><div class="line">    private long CreateTime;</div><div class="line">    </div><div class="line">    // 消息类型</div><div class="line">    private String MsgType;</div><div class="line">    </div><div class="line">    // 事件类型</div><div class="line">    private String Event;</div><div class="line"></div><div class="line">    public String getToUserName() &#123;</div><div class="line">        return ToUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setToUserName(String toUserName) &#123;</div><div class="line">        ToUserName = toUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getFromUserName() &#123;</div><div class="line">        return FromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFromUserName(String fromUserName) &#123;</div><div class="line">        FromUserName = fromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getCreateTime() &#123;</div><div class="line">        return CreateTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCreateTime(long createTime) &#123;</div><div class="line">        CreateTime = createTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMsgType() &#123;</div><div class="line">        return MsgType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMsgType(String msgType) &#123;</div><div class="line">        MsgType = msgType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getEvent() &#123;</div><div class="line">        return Event;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setEvent(String event) &#123;</div><div class="line">        Event = event;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-关注-取消关注事件"><a href="#1-关注-取消关注事件" class="headerlink" title="1.关注/取消关注事件"></a>1.关注/取消关注事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.event;</div><div class="line">/**</div><div class="line"> * 关注/取消关注事件</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:36:48</div><div class="line"> */</div><div class="line">public class SubscribeEvent extends BaseEvent&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-扫描带参数二维码事件"><a href="#2-扫描带参数二维码事件" class="headerlink" title="2.扫描带参数二维码事件"></a>2.扫描带参数二维码事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.event;</div><div class="line">/**</div><div class="line"> * 扫描带参数二维码事件</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:37:41</div><div class="line"> */</div><div class="line">public class QRCodeEvent extends BaseEvent&#123;</div><div class="line">    </div><div class="line">    // 事件KEY值</div><div class="line">    private String EventKey;</div><div class="line">    </div><div class="line">    // 用于换取二维码图片</div><div class="line">    private String Ticket;</div><div class="line"></div><div class="line">    public String getEventKey() &#123;</div><div class="line">        return EventKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setEventKey(String eventKey) &#123;</div><div class="line">        EventKey = eventKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getTicket() &#123;</div><div class="line">        return Ticket;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTicket(String ticket) &#123;</div><div class="line">        Ticket = ticket;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-上报地理位置事件"><a href="#3-上报地理位置事件" class="headerlink" title="3.上报地理位置事件"></a>3.上报地理位置事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.event;</div><div class="line">/**</div><div class="line"> * 上报地理位置事件</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:38:36</div><div class="line"> */</div><div class="line">public class LocationEvent extends BaseEvent&#123;</div><div class="line">    </div><div class="line">    // 地理位置纬度</div><div class="line">    private String Latitude;</div><div class="line">    </div><div class="line">    // 地理位置经度</div><div class="line">    private String Longitude;</div><div class="line">    </div><div class="line">    // 地理位置精度</div><div class="line">    private String Precision;</div><div class="line"></div><div class="line">    public String getLatitude() &#123;</div><div class="line">        return Latitude;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLatitude(String latitude) &#123;</div><div class="line">        Latitude = latitude;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLongitude() &#123;</div><div class="line">        return Longitude;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLongitude(String longitude) &#123;</div><div class="line">        Longitude = longitude;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getPrecision() &#123;</div><div class="line">        return Precision;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPrecision(String precision) &#123;</div><div class="line">        Precision = precision;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-自定义菜单事件"><a href="#4-自定义菜单事件" class="headerlink" title="4.自定义菜单事件"></a>4.自定义菜单事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.event;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 自定义菜单事件</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:39:34</div><div class="line"> */</div><div class="line">public class MenuEvent extends BaseEvent &#123;</div><div class="line"></div><div class="line">    // 事件KEY值，与自定义菜单接口中KEY值对应</div><div class="line">    private String EventKey;</div><div class="line"></div><div class="line">    public String getEventKey() &#123;</div><div class="line">        return EventKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setEventKey(String eventKey) &#123;</div><div class="line">        EventKey = eventKey;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="三：封装响应消息"><a href="#三：封装响应消息" class="headerlink" title="三：封装响应消息"></a>三：封装响应消息</h1><p><img src="/2018/01/25/微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装-三/被动回复用户消息.png" alt="被动回复用户消息"><br>当用户发送消息给公众号时（或某些特定的用户操作引发的事件推送时），会产生一个POST请求，开发者可以在响应包（Get）中返回特定XML结构，来对该消息进行响应（现支持回复文本、图片、图文、语音、视频、音乐）。严格来说，发送被动响应消息其实并不是一种接口，而是对微信服务器发过来消息的一次回复。<br>各消息类型需要的XML数据包结构如下：<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140543" target="_blank" rel="external">查看官网详细介绍</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line">回复文本消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Content&gt;&lt;![CDATA[你好]]&gt;&lt;/Content&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数     	是否必须     	描述</div><div class="line">ToUserName    	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间 （整型）</div><div class="line">MsgType     	是     		text</div><div class="line">Content     	是     		回复的消息内容（换行：在content中能够换行，微信客户端就支持换行显示）</div><div class="line"></div><div class="line">回复图片消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[image]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Image&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;/Image&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数     	是否必须    	说明</div><div class="line">ToUserName     	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间 （整型）</div><div class="line">MsgType     	是     		image</div><div class="line">MediaId     	是     		通过素材管理接口上传多媒体文件，得到的id。</div><div class="line"></div><div class="line"></div><div class="line">回复语音消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[voice]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Voice&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;/Voice&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数     	是否必须     	说明</div><div class="line">ToUserName     	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间戳 （整型）</div><div class="line">MsgType     	是     		语音，voice</div><div class="line">MediaId     	是     		通过素材管理接口上传多媒体文件，得到的id</div><div class="line"></div><div class="line"></div><div class="line">回复视频消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[video]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Video&gt;</div><div class="line">&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;</div><div class="line">&lt;Title&gt;&lt;![CDATA[title]]&gt;&lt;/Title&gt;</div><div class="line">&lt;Description&gt;&lt;![CDATA[description]]&gt;&lt;/Description&gt;</div><div class="line">&lt;/Video&gt; </div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数     	是否必须     	说明</div><div class="line">ToUserName     	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间 （整型）</div><div class="line">MsgType     	是     		video</div><div class="line">MediaId     	是     		通过素材管理接口上传多媒体文件，得到的id</div><div class="line">Title     	否     		视频消息的标题</div><div class="line">Description     否     		视频消息的描述</div><div class="line"></div><div class="line">回复音乐消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[music]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Music&gt;</div><div class="line">&lt;Title&gt;&lt;![CDATA[TITLE]]&gt;&lt;/Title&gt;</div><div class="line">&lt;Description&gt;&lt;![CDATA[DESCRIPTION]]&gt;&lt;/Description&gt;</div><div class="line">&lt;MusicUrl&gt;&lt;![CDATA[MUSIC_Url]]&gt;&lt;/MusicUrl&gt;</div><div class="line">&lt;HQMusicUrl&gt;&lt;![CDATA[HQ_MUSIC_Url]]&gt;&lt;/HQMusicUrl&gt;</div><div class="line">&lt;ThumbMediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/ThumbMediaId&gt;</div><div class="line">&lt;/Music&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line"></div><div class="line">参数     	是否必须    	说明</div><div class="line">ToUserName     	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间 （整型）</div><div class="line">MsgType     	是     		music</div><div class="line">Title     	否     		音乐标题</div><div class="line">Description     否     		音乐描述</div><div class="line">MusicURL     	否     		音乐链接</div><div class="line">HQMusicUrl     	否     		高质量音乐链接，WIFI环境优先使用该链接播放音乐</div><div class="line">ThumbMediaId    否     		缩略图的媒体id，通过素材管理接口上传多媒体文件，得到的id</div><div class="line"></div><div class="line">回复图文消息</div><div class="line"></div><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;ArticleCount&gt;2&lt;/ArticleCount&gt;</div><div class="line">&lt;Articles&gt;</div><div class="line">&lt;item&gt;</div><div class="line">&lt;Title&gt;&lt;![CDATA[title1]]&gt;&lt;/Title&gt; </div><div class="line">&lt;Description&gt;&lt;![CDATA[description1]]&gt;&lt;/Description&gt;</div><div class="line">&lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;</div><div class="line">&lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;</div><div class="line">&lt;/item&gt;</div><div class="line">&lt;item&gt;</div><div class="line">&lt;Title&gt;&lt;![CDATA[title]]&gt;&lt;/Title&gt;</div><div class="line">&lt;Description&gt;&lt;![CDATA[description]]&gt;&lt;/Description&gt;</div><div class="line">&lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;</div><div class="line">&lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;</div><div class="line">&lt;/item&gt;</div><div class="line">&lt;/Articles&gt;</div><div class="line">&lt;/xml&gt; </div><div class="line"></div><div class="line">参数     	是否必须    	说明</div><div class="line">ToUserName     	是     		接收方帐号（收到的OpenID）</div><div class="line">FromUserName    是     		开发者微信号</div><div class="line">CreateTime     	是     		消息创建时间 （整型）</div><div class="line">MsgType     	是     		news</div><div class="line">ArticleCount    是     		图文消息个数，限制为10条以内</div><div class="line">Articles     	是     		多条图文消息信息，默认第一个item为大图,注意，如果图文数超过10，则将会无响应</div><div class="line">Title     	否     		图文消息标题</div><div class="line">Description     否     		图文消息描述</div><div class="line">PicUrl     	否     		图片链接，支持JPG、PNG格式，较好的效果为大图360*200，小图200*200</div><div class="line">Url     	否     		点击图文消息跳转链接</div></pre></td></tr></table></figure>
<p>同样，把消息回复中定义的所有消息都有的字段提取出来，封装成一个基类，</p>
<p>这些公有的字段包括：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ToUserName（接收方帐号，用户的OPEN_ID）;</div><div class="line"></div><div class="line">FromUserName（开发者的微信号）;</div><div class="line"></div><div class="line">CreateTime（消 息的创建时间）;</div><div class="line"></div><div class="line">MsgType（消息类型）;</div><div class="line"></div><div class="line">FuncFlag（消息的星标标识）;</div></pre></td></tr></table></figure>
<h2 id="响应消息的基类BaseMessage："><a href="#响应消息的基类BaseMessage：" class="headerlink" title="响应消息的基类BaseMessage："></a>响应消息的基类BaseMessage：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 消息基类（公众帐号 -&gt; 普通用户）</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:33:50</div><div class="line"> */</div><div class="line">public class BaseMessage &#123;</div><div class="line"></div><div class="line">    // 接收方帐号（收到的OpenID）</div><div class="line">    private String ToUserName;</div><div class="line">    </div><div class="line">    // 开发者微信号</div><div class="line">    private String FromUserName;</div><div class="line">    </div><div class="line">    // 消息创建时间 （整型）</div><div class="line">    private long CreateTime;</div><div class="line">    </div><div class="line">    // 消息类型</div><div class="line">    private String MsgType;</div><div class="line"></div><div class="line">    public String getToUserName() &#123;</div><div class="line">        return ToUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setToUserName(String toUserName) &#123;</div><div class="line">        ToUserName = toUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getFromUserName() &#123;</div><div class="line">        return FromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFromUserName(String fromUserName) &#123;</div><div class="line">        FromUserName = fromUserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getCreateTime() &#123;</div><div class="line">        return CreateTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCreateTime(long createTime) &#123;</div><div class="line">        CreateTime = createTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMsgType() &#123;</div><div class="line">        return MsgType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMsgType(String msgType) &#123;</div><div class="line">        MsgType = msgType;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-回复文本消息："><a href="#1-回复文本消息：" class="headerlink" title="1.回复文本消息："></a>1.回复文本消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 文本消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:34:43</div><div class="line"> */</div><div class="line">public class TextMessage extends BaseMessage&#123;</div><div class="line"></div><div class="line">    // 回复的消息内容</div><div class="line">    private String Content;</div><div class="line"></div><div class="line">    public String getContent() &#123;</div><div class="line">        return Content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setContent(String content) &#123;</div><div class="line">        Content = content;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-回复图片消息："><a href="#2-回复图片消息：" class="headerlink" title="2.回复图片消息："></a>2.回复图片消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line">/**</div><div class="line"> *  图片</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:46:36</div><div class="line"> */</div><div class="line">public class Image &#123;</div><div class="line">    private String MediaId;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line">/**</div><div class="line"> * 图片消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:51:36</div><div class="line"> */</div><div class="line">public class ImageMessage extends BaseMessage &#123;</div><div class="line">    </div><div class="line">    private Image Image;</div><div class="line"></div><div class="line">    public Image getImage() &#123;</div><div class="line">        return Image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setImage(Image image) &#123;</div><div class="line">        Image = image;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-回复语音消息："><a href="#3-回复语音消息：" class="headerlink" title="3.回复语音消息："></a>3.回复语音消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 语音model</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:52:02</div><div class="line"> */</div><div class="line">public class Voice &#123;</div><div class="line"></div><div class="line">    // 媒体文件id</div><div class="line">    private String MediaId;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 语音消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:52:49</div><div class="line"> */</div><div class="line">public class VoiceMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 语音</div><div class="line">    private Voice Voice;</div><div class="line"></div><div class="line">    public Voice getVoice() &#123;</div><div class="line">        return Voice;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setVoice(Voice voice) &#123;</div><div class="line">        Voice = voice;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-回复视频消息："><a href="#4-回复视频消息：" class="headerlink" title="4.回复视频消息："></a>4.回复视频消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 视频model</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:53:28</div><div class="line"> */</div><div class="line">public class Video &#123;</div><div class="line"></div><div class="line">    // 媒体文件id</div><div class="line">    private String MediaId;</div><div class="line"></div><div class="line">    // 缩略图的媒体id</div><div class="line">    private String ThumbMediaId;</div><div class="line"></div><div class="line">    public String getMediaId() &#123;</div><div class="line">        return MediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMediaId(String mediaId) &#123;</div><div class="line">        MediaId = mediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getThumbMediaId() &#123;</div><div class="line">        return ThumbMediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setThumbMediaId(String thumbMediaId) &#123;</div><div class="line">        ThumbMediaId = thumbMediaId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 视频消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:54:03</div><div class="line"> */</div><div class="line">public class VideoMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 视频</div><div class="line">    private Video Video;</div><div class="line"></div><div class="line">    public Video getVideo() &#123;</div><div class="line">        return Video;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setVideo(Video video) &#123;</div><div class="line">        Video = video;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-回复音乐消息："><a href="#5-回复音乐消息：" class="headerlink" title="5.回复音乐消息："></a>5.回复音乐消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 音乐model</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:54:50</div><div class="line"> */</div><div class="line">public class Music &#123;</div><div class="line"></div><div class="line">    // 音乐标题</div><div class="line">    private String Title;</div><div class="line"></div><div class="line">    // 音乐描述</div><div class="line">    private String Description;</div><div class="line"></div><div class="line">    // 音乐链接</div><div class="line">    private String MusicUrl;</div><div class="line"></div><div class="line">    // 高质量音乐链接，WIFI环境优先使用该链接播放音乐</div><div class="line">    private String HQMusicUrl;</div><div class="line"></div><div class="line">    // 缩略图的媒体id，通过上传多媒体文件得到的id</div><div class="line">    private String ThumbMediaId;</div><div class="line"></div><div class="line">    public String getTitle() &#123;</div><div class="line">        return Title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTitle(String title) &#123;</div><div class="line">        Title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDescription() &#123;</div><div class="line">        return Description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDescription(String description) &#123;</div><div class="line">        Description = description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMusicUrl() &#123;</div><div class="line">        return MusicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMusicUrl(String musicUrl) &#123;</div><div class="line">        MusicUrl = musicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getHQMusicUrl() &#123;</div><div class="line">        return HQMusicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setHQMusicUrl(String musicUrl) &#123;</div><div class="line">        HQMusicUrl = musicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getThumbMediaId() &#123;</div><div class="line">        return ThumbMediaId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setThumbMediaId(String thumbMediaId) &#123;</div><div class="line">        ThumbMediaId = thumbMediaId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 音乐消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:55:28</div><div class="line"> */</div><div class="line">public class MusicMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 音乐</div><div class="line">    private Music Music;</div><div class="line"></div><div class="line">    public Music getMusic() &#123;</div><div class="line">        return Music;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMusic(Music music) &#123;</div><div class="line">        Music = music;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-回复图文消息："><a href="#6-回复图文消息：" class="headerlink" title="6.回复图文消息："></a>6.回复图文消息：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 图文model</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:55:56</div><div class="line"> */</div><div class="line">public class Article &#123;</div><div class="line"></div><div class="line">    // 图文消息名称</div><div class="line">    private String Title;</div><div class="line"></div><div class="line">    // 图文消息描述</div><div class="line">    private String Description;</div><div class="line"></div><div class="line">    // 图片链接，支持JPG、PNG格式，较好的效果为大图640*320，小图80*80</div><div class="line">    private String PicUrl;</div><div class="line"></div><div class="line">    // 点击图文消息跳转链接</div><div class="line">    private String Url;</div><div class="line"></div><div class="line">    public String getTitle() &#123;</div><div class="line">        return Title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTitle(String title) &#123;</div><div class="line">        Title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDescription() &#123;</div><div class="line">        return null == Description ? &quot;&quot; : Description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDescription(String description) &#123;</div><div class="line">        Description = description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getPicUrl() &#123;</div><div class="line">        return null == PicUrl ? &quot;&quot; : PicUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPicUrl(String picUrl) &#123;</div><div class="line">        PicUrl = picUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUrl() &#123;</div><div class="line">        return null == Url ? &quot;&quot; : Url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUrl(String url) &#123;</div><div class="line">        Url = url;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.message.resp;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 文本消息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午1:56:32</div><div class="line"> */</div><div class="line">public class NewsMessage extends BaseMessage &#123;</div><div class="line"></div><div class="line">    // 图文消息个数，限制为10条以内</div><div class="line">    private int ArticleCount;</div><div class="line"></div><div class="line">    // 多条图文消息信息，默认第一个item为大图</div><div class="line">    private List&lt;Article&gt; Articles;</div><div class="line"></div><div class="line">    public int getArticleCount() &#123;</div><div class="line">        return ArticleCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setArticleCount(int articleCount) &#123;</div><div class="line">        ArticleCount = articleCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;Article&gt; getArticles() &#123;</div><div class="line">        return Articles;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setArticles(List&lt;Article&gt; articles) &#123;</div><div class="line">        Articles = articles;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/2018/01/25/微信公共号开发教程java版——请求消息，响应消息及事件消息类的封装-三/代码.png" alt="代码"></p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：封装请求信息&quot;&gt;&lt;a href=&quot;#一：封装请求信息&quot; class=&quot;headerlink&quot; title=&quot;一：封装请求信息&quot;&gt;&lt;/a&gt;一：封装请求信息&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/01/25/微信公共号开发教程java版——请求消息，响应消
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/25/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%90%AF%E7%94%A8%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%8C%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/25/微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发-二/</id>
    <published>2018-01-25T08:45:30.000Z</published>
    <updated>2018-01-27T14:33:05.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：微信公众号对接的基本介绍"><a href="#一：微信公众号对接的基本介绍" class="headerlink" title="一：微信公众号对接的基本介绍"></a>一：微信公众号对接的基本介绍</h1><h2 id="填写服务器配置信息的介绍"><a href="#填写服务器配置信息的介绍" class="headerlink" title="填写服务器配置信息的介绍"></a>填写服务器配置信息的介绍</h2><p>在微信公众平台认证之前，我们可以先申请一个测试的公众号来进行测试，这对开发人员来说还是有很大好处的！<br>为什么要申请测试账号？</p>
<p>主要是因为测试账号比我们没有认证的微信账号权限大一点。足够测试我们的接口了，点击<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p>
<h1 id="二：微信服务器对接的实现代码部分"><a href="#二：微信服务器对接的实现代码部分" class="headerlink" title="二：微信服务器对接的实现代码部分"></a>二：微信服务器对接的实现代码部分</h1><h2 id="创建java项目"><a href="#创建java项目" class="headerlink" title="创建java项目"></a>创建java项目</h2><ol>
<li><p>新建一个名SpringBoot项目,名为wyj-wechat-demo。<br><img src="/2018/01/25/微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发-二/newproject.png" alt="newproject"></p>
</li>
<li><p>新建一个servlet类，来接收微信服务器传来信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.servlet;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.io.PrintWriter;</div><div class="line"></div><div class="line">import javax.servlet.ServletException;</div><div class="line">import javax.servlet.annotation.WebServlet;</div><div class="line">import javax.servlet.http.HttpServlet;</div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import com.wyj.wechart.service.CoreService;</div><div class="line">import com.wyj.wechart.utils.SignUtil;</div><div class="line">/**</div><div class="line"> * 来接收微信服务器传来信息</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月23日 下午2:17:39</div><div class="line"> */</div><div class="line">@WebServlet(urlPatterns = &quot;/wechart&quot;, description = &quot;wechart&quot;)</div><div class="line">public class CoreServlet extends HttpServlet &#123;</div><div class="line">    private static final long serialVersionUID = -8685285401859800066L;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 确认请求来自微信服务器</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</div><div class="line">        System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;doGet()&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);</div><div class="line">        // 微信加密签名  </div><div class="line">        String signature = req.getParameter(&quot;signature&quot;);  </div><div class="line">        // 时间戳  </div><div class="line">        String timestamp = req.getParameter(&quot;timestamp&quot;);  </div><div class="line">        // 随机数  </div><div class="line">        String nonce = req.getParameter(&quot;nonce&quot;);  </div><div class="line">        // 随机字符串  </div><div class="line">        String echostr = req.getParameter(&quot;echostr&quot;);  </div><div class="line">  </div><div class="line">        PrintWriter out = resp.getWriter();  </div><div class="line">        // 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败  </div><div class="line">        if (SignUtil.checkSignature(signature, timestamp, nonce)) &#123;  </div><div class="line">            out.print(echostr);  </div><div class="line">        &#125;  </div><div class="line">        out.close();  </div><div class="line">        out = null;  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 处理微信服务器发来的消息</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</div><div class="line">        System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;doPost()&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);</div><div class="line">		// TODO 消息的接收、处理、响应</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>加密校验程序的工具类。<br>这个校验的方法，可以通过分析官方文档的demo，然后通过java语言来写出。<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319" target="_blank" rel="external">官方php校验代码一览</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">package com.wyj.wechart.utils;</div><div class="line"></div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line">import java.util.Arrays;</div><div class="line">/**</div><div class="line"> * 请求校验工具类 </div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月22日 下午3:45:15</div><div class="line"> */</div><div class="line">public class SignUtil &#123;</div><div class="line">    // 与接口配置信息中的Token要一致  </div><div class="line">    private static String token = &quot;wechart&quot;;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 验证签名 </div><div class="line">     *  </div><div class="line">     * @param signature </div><div class="line">     * @param timestamp </div><div class="line">     * @param nonce </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static boolean checkSignature(String signature, String timestamp, String nonce) &#123;  </div><div class="line">        String[] arr = new String[] &#123; token, timestamp, nonce &#125;;  </div><div class="line">        // 将token、timestamp、nonce三个参数进行字典序排序  </div><div class="line">        Arrays.sort(arr);  </div><div class="line">        StringBuilder content = new StringBuilder();  </div><div class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;  </div><div class="line">            content.append(arr[i]);  </div><div class="line">        &#125;  </div><div class="line">        MessageDigest md = null;  </div><div class="line">        String tmpStr = null;  </div><div class="line">  </div><div class="line">        try &#123;  </div><div class="line">            md = MessageDigest.getInstance(&quot;SHA-1&quot;);  </div><div class="line">            // 将三个参数字符串拼接成一个字符串进行sha1加密  </div><div class="line">            byte[] digest = md.digest(content.toString().getBytes());  </div><div class="line">            tmpStr = byteToStr(digest);  </div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        content = null;  </div><div class="line">        // 将sha1加密后的字符串可与signature对比，标识该请求来源于微信  </div><div class="line">        return tmpStr != null ? tmpStr.equals(signature.toUpperCase()) : false;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 将字节数组转换为十六进制字符串 </div><div class="line">     *  </div><div class="line">     * @param byteArray </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    private static String byteToStr(byte[] byteArray) &#123;  </div><div class="line">        String strDigest = &quot;&quot;;  </div><div class="line">        for (int i = 0; i &lt; byteArray.length; i++) &#123;  </div><div class="line">            strDigest += byteToHexStr(byteArray[i]);  </div><div class="line">        &#125;  </div><div class="line">        return strDigest;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 将字节转换为十六进制字符串 </div><div class="line">     *  </div><div class="line">     * @param mByte </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    private static String byteToHexStr(byte mByte) &#123;  </div><div class="line">        char[] Digit = &#123; &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos; &#125;;  </div><div class="line">        char[] tempArr = new char[2];  </div><div class="line">        tempArr[0] = Digit[(mByte &gt;&gt;&gt; 4) &amp; 0X0F];  </div><div class="line">        tempArr[1] = Digit[mByte &amp; 0X0F];  </div><div class="line">  </div><div class="line">        String s = new String(tempArr);  </div><div class="line">        return s;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改服务器端口为80端口<br>SpringBoot application.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server.port=80</div><div class="line"></div><div class="line">spring.freemarker.cache=false</div><div class="line">spring.freemarker.charset=UTF-8</div><div class="line">spring.freemarker.check-template-location=true</div><div class="line">spring.freemarker.content-type=text/html</div><div class="line">spring.freemarker.expose-request-attributes=true</div><div class="line">spring.freemarker.expose-session-attributes=true</div><div class="line">spring.freemarker.request-context-attribute=request</div><div class="line">spring.freemarker.template-loader-path=classpath:/templates</div><div class="line">spring.freemarker.suffix=.html</div><div class="line">spring.mvc.static-path-pattern=/static/**</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="三：填写服务器配置"><a href="#三：填写服务器配置" class="headerlink" title="三：填写服务器配置"></a>三：填写服务器配置</h1><p>微信公众号测试环境接入示例：<br><img src="/2018/01/25/微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发-二/测试号管理.png" alt="测试号管理"></p>
<p>服务器配置：</p>
<p>　　URL：是开发者用来接收微信消息和事件 的接口URL。（必须以<a href="http://开头，目前支持80端口）" target="_blank" rel="external">http://开头，目前支持80端口）</a></p>
<p>　　Token：可由开发者可以任意填写，用作生成签名（该Token会和接口URL中包含的Token进行比对，从而验证安全性）。注意必须为英文或数字，长度为3-32字符。</p>
<p>说明：如果提示“token验证失败”，可以先重次几次，微信服务器有时候不稳定，也有可能映射不稳定。URL改成自己的URL，Token要对应自己在SignUtil里面填写的Token值。</p>
<h2 id="验证服务器地址的有效性"><a href="#验证服务器地址的有效性" class="headerlink" title="验证服务器地址的有效性"></a>验证服务器地址的有效性</h2><p>开发者提交信息后，微信服务器将发送GET请求到填写的服务器地址URL上，GET请求携带四个参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>signature</td>
<td style="text-align:center">微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数</td>
</tr>
<tr>
<td>timestamp</td>
<td style="text-align:center">时间戳</td>
</tr>
<tr>
<td>nonce</td>
<td style="text-align:center">随机数</td>
</tr>
<tr>
<td>echostr</td>
<td style="text-align:center">随机字符串</td>
</tr>
</tbody>
</table>
<p>开发者通过检验signature对请求进行校验（下面有校验方式）。若确认此次GET请求来自微信服务器，请原样返回echostr参数内容，则接入生效，成为开发者成功，否则接入失败。</p>
<p>加密/校验流程如下：</p>
<ol>
<li><p>将token、timestamp、nonce三个参数进行字典序排序</p>
</li>
<li><p>将三个参数字符串拼接成一个字符串进行sha1加密</p>
</li>
<li><p>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</p>
</li>
</ol>
<h2 id="Token校验是否成功"><a href="#Token校验是否成功" class="headerlink" title="Token校验是否成功"></a>Token校验是否成功</h2><p>成功启用后如图：<br><img src="/2018/01/25/微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发-二/测试号管理.png" alt="测试号管理"><br><img src="/2018/01/25/微信公共号开发教程java版——启用开发者模式，接入微信公众平台开发-二/a.png" alt="a"><br>恭喜，你成功启用开发模式。</p>
<p>启用并设置服务器配置后，用户发给公众号的消息以及开发者需要的事件推送，将被微信转发到该URL中。</p>
<p>成为开发者后，用户每次向公众号发送消息、或者产生自定义菜单、或产生微信支付订单等情况时，开发者填写的服务器配置URL将得到微信服务器推送过来的消息和事件，开发者可以依据自身业务逻辑进行响应，如回复消息。</p>
<p>这些配置可以参照我的其他博客文章进行配置，这里就不多说了。<br>以上介绍也可以参考  <a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="external">微信开发文档</a>。</p>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：微信公众号对接的基本介绍&quot;&gt;&lt;a href=&quot;#一：微信公众号对接的基本介绍&quot; class=&quot;headerlink&quot; title=&quot;一：微信公众号对接的基本介绍&quot;&gt;&lt;/a&gt;一：微信公众号对接的基本介绍&lt;/h1&gt;&lt;h2 id=&quot;填写服务器配置信息的介绍&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公共号开发教程java版——基础知识和环境搭建(一)</title>
    <link href="http://wangyuanjun.cn/2018/01/23/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8Bjava%E7%89%88%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E4%B8%80/"/>
    <id>http://wangyuanjun.cn/2018/01/23/微信公共号开发教程java版——基础知识和环境搭建-一/</id>
    <published>2018-01-23T08:46:07.000Z</published>
    <updated>2018-01-29T07:30:42.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：微信公共号基础知识"><a href="#一：微信公共号基础知识" class="headerlink" title="一：微信公共号基础知识"></a>一：微信公共号基础知识</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>微信公众号是开发者或商家在微信公众平台上申请的应用账号，该帐号与QQ账号互通，通过公众号，商家可在微信平台上实现和特定群体的文字、图片、语音、视频的全方位沟通、互动 。形成了一种主流的线上线下微信互动营销方式。</p>
<h2 id="分类及区别"><a href="#分类及区别" class="headerlink" title="分类及区别"></a>分类及区别</h2><p>微信公众号分为订阅号和服务号。<br>1、订阅号，任何组织和个人都可以申请，每天群发一条信息，认证后有自定义菜单。没有高级接口，不能用开发模式。<br>2、选择服务号，只面向企业或组织机构申请注册，申请后自带自定义菜单。认证后可以有高级接口，每周群发一条信息。均不可主动添加微信好友。</p>
<h2 id="通讯机制"><a href="#通讯机制" class="headerlink" title="通讯机制"></a>通讯机制</h2><p>作为开发者，我们需要面对的主要有两个对象：微信服务器和应用程序（网站）服务器。<br>当微信用户向你的公众平台发送一条消息，实际上这条消息首先发送到微信服务器，由微信服务器向网站服务器发起另外一个请求，网站服务器返回这个请求的结果，再由微信服务器发送到微信客户端。</p>
<p>整个消息通讯流程如下图：<br><img src="/2018/01/23/微信公共号开发教程java版——基础知识和环境搭建-一/通讯机制.png" alt="通讯机制"></p>
<h1 id="二：微信公共号环境搭建"><a href="#二：微信公共号环境搭建" class="headerlink" title="二：微信公共号环境搭建"></a>二：微信公共号环境搭建</h1><h2 id="服务器准备"><a href="#服务器准备" class="headerlink" title="服务器准备"></a>服务器准备</h2><ol>
<li><p>方式一：买的云主机。</p>
</li>
<li><p>方式二：BAE（注册百度账号，然后登录 <a href="https://login.bce.baidu.com/" target="_blank" rel="external">百度云</a> ）。</p>
</li>
<li><p>方式三：SAE（注册新浪微博，然后登录 <a href="http://www.sinacloud.com/sae.html" target="_blank" rel="external">新浪云SAE</a> ）。</p>
</li>
<li><p>方式五：可以通过免费映射工具。比如：ngrok ，natapp ，花生壳 ，nginx 等;</p>
</li>
</ol>
<p>由于前面三种方式都是发布到公网的的，出现问题不能在本地调试，需要在本地搭建测试环境，我将使用ngrop工具，使本地搭建的服务器能够外网能够访问，将运行在内网的服务器映射到外网去给微信访问。</p>
<h2 id="ngrop工具使用"><a href="#ngrop工具使用" class="headerlink" title="ngrop工具使用"></a>ngrop工具使用</h2><p>首先到官网<a href="https://ngrok.com" target="_blank" rel="external">https://ngrok.com</a>注册并下载ngrok，得到一串授权码<br>在windows环境下，运行 ngrok -authtoken 你的授权码80，80是你本地Web服务的端口，而之后ngrok会记住你的授权码，直接 http ngrok 80就OK了<br>每次重启ngrop，ip地址都会变<br><img src="/2018/01/23/微信公共号开发教程java版——基础知识和环境搭建-一/ngrop.png" alt="ngrop"><br><img src="/2018/01/23/微信公共号开发教程java版——基础知识和环境搭建-一/a.png" alt="a"><br><img src="/2018/01/23/微信公共号开发教程java版——基础知识和环境搭建-一/b.png" alt="b"></p>
<font color="red">标红的地方是外网地址映射80端口，本地服务端口必须是80端口</font>


<h1 id="三：微信公共号相关资料"><a href="#三：微信公共号相关资料" class="headerlink" title="三：微信公共号相关资料"></a>三：微信公共号相关资料</h1><ol>
<li><p>申请一个微信号（下载微信客户端，手机注册，或是qq注册）</p>
</li>
<li><p>申请一个<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">微信公众平台接口测试帐号</a></p>
</li>
<li><p>申请一个<a href="https://mp.weixin.qq.com/" target="_blank" rel="external">微信公众号</a></p>
</li>
</ol>
<p><font color="red">注：github项目地址：</font><a href="https://github.com/wangyuanjun008/wyj-wechat-demo" target="_blank" rel="external">微信公共号开发用例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：微信公共号基础知识&quot;&gt;&lt;a href=&quot;#一：微信公共号基础知识&quot; class=&quot;headerlink&quot; title=&quot;一：微信公共号基础知识&quot;&gt;&lt;/a&gt;一：微信公共号基础知识&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head
    
    </summary>
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
    
      <category term="微信公共号" scheme="http://wangyuanjun.cn/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E5%85%B1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>nginx中修改server_name无效，修改为www.wecharttest.com无法访问，通过localhost可以访问</title>
    <link href="http://wangyuanjun.cn/2018/01/22/nginx%E4%B8%AD%E4%BF%AE%E6%94%B9server-name%E6%97%A0%E6%95%88%EF%BC%8C%E4%BF%AE%E6%94%B9%E4%B8%BAwww-wecharttest-com%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%EF%BC%8C%E9%80%9A%E8%BF%87localhost%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE/"/>
    <id>http://wangyuanjun.cn/2018/01/22/nginx中修改server-name无效，修改为www-wecharttest-com无法访问，通过localhost可以访问/</id>
    <published>2018-01-22T06:00:00.000Z</published>
    <updated>2018-01-22T06:06:47.002Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看微信公共号，需要通过软件Nginx，直接使用自己的内网作为电脑的服务器来进行一系列的操作以及调试(实现内网穿透，将内网的服务器映射到外网给别人访问)<br>但是在Nginx中，把server_name配置成自己的域名www.wecharttest.com无效。<br>解决方法：</p>
<p>linux下：</p>
<ol>
<li>sudo vi /etc/host</li>
</ol>
<p>增加 www.wecharttest.com 127.0.0.1</p>
<ol>
<li>sudo vi /etc/hosts</li>
</ol>
<p>增加 127.0.0.1 www.wecharttest.com</p>
<p>然后esc、:wq保存退出即可。</p>
<p>windows下：</p>
<p>修改C:\Windows\System32\drivers\etc下hosts文件即可，内容如linux下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看微信公共号，需要通过软件Nginx，直接使用自己的内网作为电脑的服务器来进行一系列的操作以及调试(实现内网穿透，将内网的服务器映射到外网给别人访问)&lt;br&gt;但是在Nginx中，把server_name配置成自己的域名www.wecharttest.com无效。&lt;br
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx学习——session共享(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/16/Nginx%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94session%E5%85%B1%E4%BA%AB-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/16/Nginx学习——session共享-二/</id>
    <published>2018-01-16T08:04:58.000Z</published>
    <updated>2018-01-22T01:53:42.113Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博文说到了nginx session共享问题。由于 nginx 是随机分配请求，假设一个用户登录时访问网站登录时被分配到 192.168.43.3:8080 上，然后进行了登录操作，此时该服务器上就会有该用户登录的 session 信息，然后登陆后重定向到网站首页或个人中心时，此时如果被分配到 192.168.43.3:8081 上，那么这台服务器上没有该用户 session 信息，于是又会变成未登录状态，所以由于 nginx 的负载均衡会导致 session 共享的问题。</p>
<ol>
<li><p>不使用session，换用cookie<br>session是存放在服务器端的，cookie是存放在客户端的，我们可以把用户访问页面产生的session放到cookie里面，就是以cookie为中转站。你访问web服务器A，产生了session然后把它放到cookie里面，当你的请求被分配到B服务器时，服务器B先判断服务器有没有这个session，如果没有，再去看看客户端的cookie里面有没有这个session，如果也没有，说明session真的不存，如果cookie里面有，就把cookie里面的sessoin同步到服务器B，这样就可以实现session的同步了。<br>说明：这种方法实现起来简单，方便，也不会加大数据库的负担，但是如果客户端把cookie禁掉了的话，那么session就无从同步了，这样会给网站带来损失；cookie的安全性不高，虽然它已经加了密，但是还是可以伪造的。</p>
</li>
<li><p>session存在数据库（MySQL等）中<br>java可以配置将session保存在数据库中，这种方法是把存放session的表和其他数据库表放在一起，如果mysql也做了集群了话，每个mysql节点都要有这张表，并且这张session表的数据表要实时同步。<br>说明：用数据库来同步session，会加大数据库的IO，增加数据库的负担。而且数据库读写速度较慢，不利于session的适时同步。</p>
</li>
<li><p>ip_hash 策略<br>nginx 提供了 ip_hash 策略，可以保持用户 ip 进行 hash 值计算固定分配到某台服务器上，然后只要是该 ip 则会保持分配到该服务器上，保证用户访问的是同一台服务器，那么 session 问题就不存在了。这也是解决 session 共享的一种方式，也称为黏性 session。但是假设一台 tomcat 服务器挂了的话，那么 session 也会丢失。所以比较好的方案是抽取 session。</p>
</li>
<li><p>upstream_hash<br>为了解决ip_hash的一些问题，可以使用upstream_hash这个第三方模块，这个模块多数情况下是用作url_hash的，但是并不妨碍将它用来做session共享。没试过真心的不明白</p>
</li>
<li><p>session存在memcache或者redis中<br>此种方式将将用户的登录信息存储到redis中，因为是基于内存的读取，因此效率不会是响应效率的瓶颈，cookie中存储着jsessionid，不需要加密或处理，只需要存储redis中的key保存统一客户通过cookie中的key可以准确的登录信息或是其他有效的信息，此种方式，cookie的存储不需要加密计算成本，其次redis将信息存储到缓存中，存取效率高，后面会详细介绍此种方式实现过程。</p>
</li>
<li><p>基于tomcat容器session<br>此种方式在根本上实现共享session，他的实际情况是通过tomcat管理配置将一个tomct下的session复制到其他的tomcat的session池中，实现真实上的session共享；此种方式需要兼容tomcat配置及需要对其进行扩展，依赖性太强。</p>
</li>
</ol>
<h1 id="一：Redis-环境搭建"><a href="#一：Redis-环境搭建" class="headerlink" title="一：Redis 环境搭建"></a>一：Redis 环境搭建</h1><p>redis 依赖 gcc，先安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc-c++</div></pre></td></tr></table></figure></p>
<p>下载 redis，我使用的是 redis-3.2.11.tar.gz，上传至 linux /usr/local/redis-src / 中，解压</p>
<p>进入解压后目录 redis-3.2.11，执行 make 命令进行编译</p>
<p>安装到目录 /usr/local/redis</p>
<p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make PREFIX=/usr/local/redis install</div></pre></td></tr></table></figure></p>
<p>安装完成之后将 redis 配置文件拷贝到安装目录下，redis.conf 是 redis 的配置文件，redis.conf 在 redis 源码目录, port 默认 6379。<br>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /root/wyj/tools/redis/redis-3.2.11/redis.conf /usr/local/redis/</div></pre></td></tr></table></figure></p>
<p>在 redis 安装目录启动和关闭 redis：</p>
<p>启动：<br><img src="/2018/01/16/Nginx学习——session共享-二/redis.png" alt="redis"><br>这种启动方式叫做前端启动，必须保持在当前窗口，如果 ctrl + c 退出，那么 redis 也就退出了，不建议使用</p>
<p>那么后端启动：</p>
<p>首先修改 redis.conf 中 daemonize 的值，打开可以看到默认是 no，修改为 daemonize yes，启动即可。也可以在该配置文件中修改 redis 默认端口 6379 为其他值。<br><img src="/2018/01/16/Nginx学习——session共享-二/redis启动.png" alt="redis启动"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/redis-cli shutdown</div></pre></td></tr></table></figure></p>
<p>至此，redis 服务器搭建完成。</p>
<h1 id="二：下载相关jar"><a href="#二：下载相关jar" class="headerlink" title="二：下载相关jar"></a>二：下载相关jar</h1><ul>
<li><p>环境为 tomcat7 + jdk1.6 ：<br>  在所有需要共享 session 的服务器的 tomcat 中目录下：</p>
<p>  lib 目录中添加以下五个 jar 包，注意版本最好一致，不然极容易出现错误，下边的测试是可用的：</p>
<ul>
<li>下载<a href="https://github.com/jcoleman/tomcat-redis-session-manager/downloads" target="_blank" rel="external">tomcat-redis-session-manager</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/commons-pool/commons-pool/1.6" target="_blank" rel="external">commons-pool 1.6</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/redis.clients/jedis/2.2.0" target="_blank" rel="external">jedis 2.2</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat.extras/tomcat-extras-juli-adapters/7.0.82" target="_blank" rel="external">tomcat-juli-adapters.jar</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-juli/7.0.82" target="_blank" rel="external">tomcat-juli.jar</a><br><img src="/2018/01/16/Nginx学习——session共享-二/tomcat7jdk1.6.png" alt="tomcat7jdk1.6"><br>conf 目录中 content.xml 中加入：配置 redis 服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Valve className=&quot;com.radiadesign.catalina.session.RedisSessionHandlerValve&quot;/&gt; </div><div class="line">&lt;Manager className=&quot;com.radiadesign.catalina.session.RedisSessionManager&quot;</div><div class="line">host=&quot;localhost&quot;</div><div class="line">port=&quot;6379&quot;</div><div class="line">database=&quot;0&quot;  </div><div class="line">maxInactiveInterval=&quot;60&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>环境为 tomcat7 + jdk1.7 或 1.8 ：<br>  在所有需要共享 session 的服务器的 tomcat 中目录下：</p>
<p>  lib 目录中添加以下五个 jar 包，其中<font color="red">tomcat-redis-session-manager.jar需要重新下载编译打包，不然会报错</font>。</p>
<ul>
<li>下载<a href="https://github.com/jcoleman/tomcat-redis-session-manager/downloads" target="_blank" rel="external">tomcat-redis-session-manager</a>,我用的jdk8所以用的是-7-java.jar</li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.commons/commons-pool2/2.4.1" target="_blank" rel="external">commons-pool 2.4.1</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/redis.clients/jedis/2.6.2" target="_blank" rel="external">jedis 2.6.2</a></li>
<li>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat.extras/tomcat-extras-juli-adapters/7.0.82" target="_blank" rel="external">tomcat-juli-adapters.jar</a></li>
<li><p>下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-juli/7.0.82" target="_blank" rel="external">tomcat-juli.jar</a><br><img src="/2018/01/16/Nginx学习——session共享-二/tomcat7jdk1.71.8.png" alt="tomcat7jdk1.71.8"></p>
<p>conf 目录中 content.xml 中加入：配置 redis 服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;       </div><div class="line">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</div><div class="line">host=&quot;localhost&quot;  </div><div class="line">port=&quot;6379&quot;  </div><div class="line">database=&quot;0&quot;              </div><div class="line">maxInactiveInterval=&quot;60&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="三：配置Tomcat"><a href="#三：配置Tomcat" class="headerlink" title="三：配置Tomcat"></a>三：配置Tomcat</h1><p>根据我这测试，是 jkd1.8+tomcat7，在 137 和 139 两台 tomcat 中加入 jar 包且进行如上配置：</p>
<p>上传 jar 包<br><img src="/2018/01/16/Nginx学习——session共享-二/加jar包1.png" alt="加jar包1"><br><img src="/2018/01/16/Nginx学习——session共享-二/加jar包2.png" alt="加jar包2"><br>修改 content.xml<br><img src="/2018/01/16/Nginx学习——session共享-二/tomcatcontent.png" alt="tomcatcontent"><br>启动 redis 服务，重新启动所有 tomcat，启动 nginx，刷新 nginx 页面, 两台 tomcat 页面可以看到 sessionid 值不变，关闭某台 tomcat，nginx 中 sessionid 不变，说明 session 是共享的。</p>
<p>请注意！！！！</p>
<p>context.xml 配置说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;      </div><div class="line">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</div><div class="line">//这里是redis服务器地址</div><div class="line">host=&quot;localhost&quot;</div><div class="line">//这里是redis端口，redis默认端口是6379</div><div class="line">port=&quot;6379&quot;</div><div class="line">//这里是redis数据库中的标识，标识第0个，默认使用0即可</div><div class="line">database=&quot;0&quot;            </div><div class="line">//需要注意的是这里由于redis过期时间默认设置为60，单位是秒，session过期时间为30分钟，所以需要设置为1800对应30分钟</div><div class="line">maxInactiveInterval=&quot;1800&quot;/&gt;</div></pre></td></tr></table></figure>
<h1 id="四：项目搭建中遇到的问题"><a href="#四：项目搭建中遇到的问题" class="headerlink" title="四：项目搭建中遇到的问题"></a>四：项目搭建中遇到的问题</h1><p>将相关commons-pool2-2.4.1.jar，tomcat-redis-session-manager-1.2-tomcat-7-java-7.jar，jedis-2.6.2.jar，放到comcat的lib目录下，启动后报错：<br><img src="/2018/01/16/Nginx学习——session共享-二/报错1.png" alt="报错1"></p>
<p>查看下载的包tomcat-redis-session-manager-1.2-tomcat-7-java-7.jar或tomcat-redis-session-manager-1.2-tomcat-7.jar相关包的里面并没有类:com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve。<br>从 <a href="https://github.com/jcoleman/tomcat-redis-session-manager" target="_blank" rel="external">https://github.com/jcoleman/tomcat-redis-session-manager</a> 直接下载源码，发现源码里面存在相应的类。同时源码（tomcat-redis-session-manager）依赖了tomcat其他的包：tomcat-juli.jar，而tomcat默认是没有这些包的，从 <a href="https://mirrors.cnnic.cn/apache/tomcat/tomcat-7/v7.0.82/bin/extras/" target="_blank" rel="external">https://mirrors.cnnic.cn/apache/tomcat/tomcat-7/v7.0.82/bin/extras/</a> 下载<a href="http://mvnrepository.com/artifact/org.apache.tomcat.extras/tomcat-extras-juli-adapters/7.0.82" target="_blank" rel="external">tomcat-juli-adapters.jar</a>和<a href="http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-juli/7.0.82" target="_blank" rel="external">tomcat-juli.jar</a>两个包，放在apache-tomcat-7.0.82\lib目录下，同时将tomcat-juli.jar放在apache-tomcat-7.0.82\bin目录下同时将编译tomcat-redis-session-manager的源码，通过相应的依赖包common-pool2.2，jedis以及tomcat-juli.jar编译，并打成自己的jar包。<br>打包详情如下：<br><img src="/2018/01/16/Nginx学习——session共享-二/导出jar包.png" alt="导出jar包"><br>点击 <a href="http://download.csdn.net/download/wangyuanjun008/10214996" target="_blank" rel="external">http://download.csdn.net/download/wangyuanjun008/10214996</a> 下载<br>总结<br>这篇文章写下来可真是费了些力气，中间出了好多错，不过一个一个有耐心的解决掉，最后出来的结果还是令人挺有成就感的。毕竟心里的一块大石算是落了。以后有空再尝试一下其他几种方法。</p>
<p>PS : 修改配置文件的时候，一定要先备份再修改，不然出了问题都不能恢复。</p>
<p>参考:<br><a href="https://www.jianshu.com/p/1d035ca278e3" target="_blank" rel="external">Nginx 反向代理，负载均衡，redis session 共享，keepalived 高可用</a><br><a href="https://www.cnblogs.com/zhengbin/p/5488415.html#autoid-0-3-0" target="_blank" rel="external">搭建Nginx（负载均衡）+Redis（Session共享）+Tomcat集群</a><br><a href="http://blog.csdn.net/wkwanglei/article/details/47776871" target="_blank" rel="external">tomcat7和redis的sessoin共享问题处理</a><br><a href="http://blog.csdn.net/onlysunnyboy/article/details/50513305" target="_blank" rel="external">tomcat集群基于redis共享session解决方案</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博文说到了nginx session共享问题。由于 nginx 是随机分配请求，假设一个用户登录时访问网站登录时被分配到 192.168.43.3:8080 上，然后进行了登录操作，此时该服务器上就会有该用户登录的 session 信息，然后登陆后重定向到网站首页或个
    
    </summary>
    
      <category term="nginx" scheme="http://wangyuanjun.cn/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://wangyuanjun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习——反向代理与负载均衡(一)</title>
    <link href="http://wangyuanjun.cn/2018/01/16/Nginx%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E4%B8%80/"/>
    <id>http://wangyuanjun.cn/2018/01/16/Nginx学习——反向代理与负载均衡-一/</id>
    <published>2018-01-16T08:04:25.000Z</published>
    <updated>2018-01-21T11:32:48.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：环境配置"><a href="#一：环境配置" class="headerlink" title="一：环境配置"></a>一：环境配置</h1><p>我本地是Windows系统，使用 Oracle VM VirtualBox 虚拟机安装一个虚拟的Linux系统，安装jdk1.8，nginx,两个tomcat </p>
<p><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/架构图.png" alt="架构图"><br>一般需要用到三台服务器，一台 nginx 服务器，两台正式部署项目的服务器。为了方便操作，我只在一台服务器上面安装了一个nginx和两个tomcat(端口不一样)</p>
<h1 id="二：配置tomcat集群"><a href="#二：配置tomcat集群" class="headerlink" title="二：配置tomcat集群"></a>二：配置tomcat集群</h1><p>首先在服务器上安装两个 tomcat：这个也是简单，不多说</p>
<p>安装 tomcat：上传解压即可使用，bin 目录下 startup.sh 启动，shutdown.sh 关闭</p>
<p>配置防火墙端口：vim /etc/sysconfig/iptables 编辑，开放 8080 端口，8081 端口，80 端口等一些常用端口，当然后边有用到一些端口都是需要配置开放的，不建议关闭防火墙</p>
<p><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/tomcat防火墙.png" alt="tomcat防火墙"></p>
<p>编辑好后 service iptables restart 重新加载防火墙配置<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/防火墙规则.png" alt="防火墙规则"></p>
<blockquote>
<p>如果是自己测试嫌配置麻烦，关闭防火墙： service iptables stop 重启后防火墙打开，即在此次开机状态下有效，完全关闭再使用 chkconfig iptables off , 即会在重启后也关闭防火墙，注意有时候服务都起了但访问出错，可能就是防火墙问题哦</p>
</blockquote>
<p>启动 tomcat 访问：192.168.43.3:8080，192.168.43.3:8081，打开 tomcat 首页即成功。</p>
<p>然后编写测试项目，部署到两台 tomcat 上，eclipse 新建 web 项目，项目名为 testproject，在 webapp 下新建一个 jsp 页面为 index.jsp, 添加如下内容<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/jsp.png" alt="jsp"></p>
<p>maven导出为 war 包，spring-demo.war，将该 war 包上传到服务器的两台 tomcat 的 webapps 中<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/tomcat1.png" alt="tomcat1"><br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/tomcat2.png" alt="tomcat2"></p>
<p>此时，重新启动 tomcat，访问 192.168.43.3:8080，192.168.43.3:8081, 显示 index.jsp 内容：两台服务器访问显示如下<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/t1.png" alt="t1"><br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/t2.png" alt="t2"></p>
<p>至此，两台 tomcat 服务器搭建完成。</p>
<h1 id="三：Nginx的安装配置与测试"><a href="#三：Nginx的安装配置与测试" class="headerlink" title="三：Nginx的安装配置与测试"></a>三：Nginx的安装配置与测试</h1><p>先使用 yum 命令安装 gcc，安装 pcre，zlib，openssl：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc   </div><div class="line">yum install -y pcre pcre-devel   </div><div class="line">yum install -y zlib zlib-devel   </div><div class="line">yum install -y openssl openssl-develplain</div></pre></td></tr></table></figure></p>
<p>在 /root/wyj/tools 目录下新建 nginx 目录，将 nginx-1.17.7.tar.gz 放到此处，解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.17.7.tar.gz</div></pre></td></tr></table></figure></p>
<p>进入解压后目录<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginx.png" alt="nginx"><br>依次执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./configure   </div><div class="line"></div><div class="line">make   </div><div class="line"></div><div class="line">mkae install</div></pre></td></tr></table></figure></p>
<p>此时 nginx 安装完毕，安装目录是 /usr/local/nginx，nginx 默认占用 80 端口<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginx安装.png" alt="nginx安装"><br>其中，sbin 目录为 nginx 执行命令，conf 目录下的 nginx.conf 为默认加载的配置文件</p>
<p>启动 nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx</div></pre></td></tr></table></figure></p>
<p>关闭 nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -s stop</div></pre></td></tr></table></figure></p>
<p>重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx  -s reload</div></pre></td></tr></table></figure></p>
<p>启动 nginx 后访问 192.168.50.133:80 即可访问 nginx：显示 nginx 欢迎页<br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginx欢迎.png" alt="nginx欢迎"></p>
<p>至此，nginx 安装完毕。</p>
<h1 id="四：反向代理与负载均衡配置"><a href="#四：反向代理与负载均衡配置" class="headerlink" title="四：反向代理与负载均衡配置"></a>四：反向代理与负载均衡配置</h1><p>现有一台服务器，为 192.168.43.3，服务器上有一台 tomcat，端口为 8080 和 8081，经过配置 nginx，当访问 192.168.43.3:80 时，即可访问 192.168.43.3:8080，192.168.43.3:8081 中随机一台，此时 192.168.43.3:80 被 nginx 监听，当有请求时，代理到 192.168.43.3:8080，192.168.43.3:8081 随机一台即可，即为 nginx 反向代理功能，同时此时可以通过 nginx 将请求进行转发，保证了一个入口，将所有请求转发到两台服务器上也减轻了任何一台的负载压力，当有大量请求时，可以搭建大量服务器，在入口代理服务器上使用 nginx 进行转发，即是负载均衡功能。</p>
<p>配置即是配置 nginx 安装目录中 conf 目录下的 nginx.conf 文件即可：具体配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#user  nobody;</div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line">#error_log  logs/error.log;</div><div class="line">#error_log  logs/error.log  notice;</div><div class="line">#error_log  logs/error.log  info;</div><div class="line"></div><div class="line">#pid        logs/nginx.pid;</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    #access_log  logs/access.log  main;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line">    #gzip  on;</div><div class="line"></div><div class="line"> 	#配置被代理的服务器</div><div class="line">    upstream blank &#123;</div><div class="line">        #ip_hash;</div><div class="line">        server 192.168.43.3:8080 weight=2;</div><div class="line">        server 192.168.43.3:8081 weight=1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    server &#123;</div><div class="line">    	#nginx监听80端口，请求该端口时转发到真实目标</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            #这里配置代理是指上面定义的两个被代理目标，blank名字必须一致</div><div class="line">          proxy_pass http://blank;</div><div class="line"></div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #error_page  404              /404.html;</div><div class="line"></div><div class="line">        # redirect server error pages to the static page /50x.html</div><div class="line">        #</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    proxy_pass   http://127.0.0.1;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    root           html;</div><div class="line">        #    fastcgi_pass   127.0.0.1:9000;</div><div class="line">        #    fastcgi_index  index.php;</div><div class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</div><div class="line">        #    include        fastcgi_params;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # deny access to .htaccess files, if Apache&apos;s document root</div><div class="line">        # concurs with nginx&apos;s one</div><div class="line">        #</div><div class="line">        #location ~ /\.ht &#123;</div><div class="line">        #    deny  all;</div><div class="line">        #&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       8000;</div><div class="line">    #    listen       somename:8080;</div><div class="line">    #    server_name  somename  alias  another.alias;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line"></div><div class="line">    # HTTPS server</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       443 ssl;</div><div class="line">    #    server_name  localhost;</div><div class="line"></div><div class="line">    #    ssl_certificate      cert.pem;</div><div class="line">    #    ssl_certificate_key  cert.key;</div><div class="line"></div><div class="line">    #    ssl_session_cache    shared:SSL:1m;</div><div class="line">    #    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    #    ssl_prefer_server_ciphers  on;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动两台 tomcat，重新启动 nginx：</p>
<p>访问 192.168.43.3:80 将会随机访问 192.168.43.3:8080 和 192.168.43.3:8081 其中一台。（问题：每次刷新 nginx 服务器地址 sessionid 会变，session 不能共享。）</p>
<p><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginxtomcat1.png" alt="nginxtomcat1"><br><img src="/2018/01/16/Nginx学习——反向代理与负载均衡-一/nginxtomcat2.png" alt="nginxtomcat2"></p>
<p>尝试不断刷新，两个页面会交替显示，即成功。<br>但发现SessionID并不相同，下一篇博文来通过Redis来实现Session的共享（同步）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：环境配置&quot;&gt;&lt;a href=&quot;#一：环境配置&quot; class=&quot;headerlink&quot; title=&quot;一：环境配置&quot;&gt;&lt;/a&gt;一：环境配置&lt;/h1&gt;&lt;p&gt;我本地是Windows系统，使用 Oracle VM VirtualBox 虚拟机安装一个虚拟的Linux系
    
    </summary>
    
      <category term="nginx" scheme="http://wangyuanjun.cn/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://wangyuanjun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>HTML/CSS基础知识学习笔记</title>
    <link href="http://wangyuanjun.cn/2018/01/11/HTML-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangyuanjun.cn/2018/01/11/HTML-CSS基础知识学习笔记/</id>
    <published>2018-01-11T09:21:16.000Z</published>
    <updated>2018-01-11T09:21:16.726Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dubbo学习——Dubbo-admin管理平台搭建(三)</title>
    <link href="http://wangyuanjun.cn/2018/01/11/Dubbo%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Dubbo-admin%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA-%E4%B8%89/"/>
    <id>http://wangyuanjun.cn/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/</id>
    <published>2018-01-11T03:05:23.000Z</published>
    <updated>2018-01-21T11:19:13.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：前言"><a href="#一：前言" class="headerlink" title="一：前言"></a>一：前言</h1><p>上一篇博文介绍的是dubbo的使用，包括有注册中心，消费者，提供者的使用，但是并不能看到有哪些消费者和提供者，为了更好的调试，发现问题，解决问题，因此引入dubbo-admin。通过dubbo-admin可以对消费者和提供者进行管理。</p>
<h1 id="二：下载与配置打包"><a href="#二：下载与配置打包" class="headerlink" title="二：下载与配置打包"></a>二：下载与配置打包</h1><p>dubbo-admin的下载，可自行到官网下载：<a href="https://github.com/alibaba/dubbo" target="_blank" rel="external">https://github.com/alibaba/dubbo</a><br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/dubbo.png" alt="dubbo"></p>
<p>但是这里我们只关心dubbo-admin这个文件夹。<br>打包war包，进入dubbo-admin这个文件目录 运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn package -Dmaven.skip.test=true</div></pre></td></tr></table></figure>
<p>打包成功之后，就会发现dubbo-admin下多了个target文件夹，打开target文件夹，发现里面有个war包：<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/war包.png" alt="war包"></p>
<h1 id="三：安装dubbo-admin"><a href="#三：安装dubbo-admin" class="headerlink" title="三：安装dubbo-admin"></a>三：安装dubbo-admin</h1><ol>
<li><p>第二步我们得到dubbo-admin-2.5.8-SNAPSHOT.war，把dubbo-admin-2.5.8-SNAPSHOT.war放到tomcat的webapps目录下，然后启动tomcat,启动完成后停tomcat，得到解压后的dubbo-admin<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/a.png" alt="a"></p>
</li>
<li><p>打开刚刚tomcat解压生成的dubbo.properties<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/b.png" alt="b"></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dubbo.registry.address=zookeeper://192.168.99.100:2181</div><div class="line">dubbo.admin.root.password=root</div><div class="line">dubbo.admin.guest.password=guest</div></pre></td></tr></table></figure>
<p>修改zookeeper地址为192.168.99.100:2181</p>
<p>帐号：root,密码：root,待会儿登录用</p>
<h1 id="四：运行"><a href="#四：运行" class="headerlink" title="四：运行"></a>四：运行</h1><ol>
<li><p>先启动zookeeper，然后再启动tomcat<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/zookeeper.png" alt="zookeeper"><br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/c.png" alt="c"><br>帐号：root;密码:root<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/dubboadminindx.png" alt="dubboadminindx"></p>
</li>
<li><p>查看提供者<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/provider.png" alt="provider"></p>
</li>
<li><p>查看消费者：<br><img src="/2018/01/11/Dubbo学习——Dubbo-admin管理平台搭建-三/consumer.png" alt="consumer"></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一：前言&quot;&gt;&lt;a href=&quot;#一：前言&quot; class=&quot;headerlink&quot; title=&quot;一：前言&quot;&gt;&lt;/a&gt;一：前言&lt;/h1&gt;&lt;p&gt;上一篇博文介绍的是dubbo的使用，包括有注册中心，消费者，提供者的使用，但是并不能看到有哪些消费者和提供者，为了更好的调试
    
    </summary>
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/categories/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo学习——Dubbo简单入门Demo(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/10/Dubbo%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Dubbo%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8Demo-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/</id>
    <published>2018-01-10T15:16:22.000Z</published>
    <updated>2018-01-21T11:06:01.930Z</updated>
    
    <content type="html"><![CDATA[<p>本文采用Dubbo与Zookeeper、Spring框架的整合。整个项目的代码已经上传到我的github <a href="https://github.com/wangyuanjun008/wyj-dubbo-demo.git" target="_blank" rel="external">https://github.com/wangyuanjun008/wyj-dubbo-demo.git</a> 欢迎查看。<br>主要是以下几个步骤： </p>
<ol>
<li>安装Zookeeper,启动； </li>
<li>创建MAVEN项目，构建Dubbo+Zookeeper+Spring实现的简单Demo； </li>
<li>安装Dubbo-admin，实现监控。</li>
</ol>
<h1 id="一：Zookeeper介绍与安装"><a href="#一：Zookeeper介绍与安装" class="headerlink" title="一：Zookeeper介绍与安装"></a>一：Zookeeper介绍与安装</h1><p>本Demo中的Dubbo注册中心采用的是Zookeeper。为什么采用Zookeeper呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Zookeeper是一个分布式的服务框架，是树型的目录服务的数据存储，能做到集群管理数据 ，这里能很好的作为Dubbo服务的注册中心。</div><div class="line"></div><div class="line">Dubbo能与Zookeeper做到集群部署，当提供者出现断电等异常停机时，Zookeeper注册中心能自动删除提供者信息，当提供者重启时，能自动恢复注册数据，以及订阅请求</div></pre></td></tr></table></figure></p>
<p>到官网下载并安装到windows上，可参考博文： <a href="http://blog.csdn.net/tlk20071/article/details/52028945" target="_blank" rel="external">http://blog.csdn.net/tlk20071/article/details/52028945</a><br>我使用的是docker容器，在docker上下载zooleeper镜像,然后使用如下命令创建并启动zookeeper容器，映射与本机的端口号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name zookeeper -p 2181:2181 -p 2888:2888 -p 3888:3888 -d zookeeper:latest</div></pre></td></tr></table></figure></p>
<p><img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/zookeeper.png" alt="zookeeper"></p>
<p>我之前下载过，所以我直接启动zookeeper容器</p>
<h1 id="二：创建MAVEN项目"><a href="#二：创建MAVEN项目" class="headerlink" title="二：创建MAVEN项目"></a>二：创建MAVEN项目</h1><p>项目结构：<br>主要分三大模块：<br>dubbo-api : 存放公共接口；<br>dubbo-consumer :　调用远程服务；<br>dubbo-provider : 提供远程服务。<br><img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/project.png" alt="project"></p>
<p>下面将详细叙述代码构建过程。 </p>
<ol>
<li><p>首先构建MAVEN项目，导入所需要的jar包依赖。<br>需要导入的有spring, dubbo, zookeeper等jar包。<br>(详情参看后面提供的项目代码)</p>
</li>
<li><p>建dubbo-api的MAVEN项目(有独立的pom.xml，用来打包供提供者消费者使用)。<br>在项目中定义服务接口：该接口需单独打包，在服务提供方和消费方共享。<br><img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/api.png" alt="api"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo;</div><div class="line">/**</div><div class="line"> * 定义服务接口</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午9:03:40</div><div class="line"> */</div><div class="line">public interface DemoService &#123;</div><div class="line">    </div><div class="line">    String sayHello(String name);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建dubbo-provider的MAVEN项目(有独立的pom.xml，用来打包供消费者使用)。 </p>
<p> 实现公共接口，此实现对消费者隐藏：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo.provider;</div><div class="line"></div><div class="line">import com.wyj.dubbo.demo.DemoService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 服务提供者实现服务定义</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午9:07:16</div><div class="line"> */</div><div class="line">public class DemoServiceImpl implements DemoService &#123;</div><div class="line"></div><div class="line">    public String sayHello(String name) &#123;</div><div class="line">        return &quot;Hello &quot; + name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 需加入公共接口所在的依赖<br> <img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/provider-pom.png" alt="provider-pom"></p>
<p> 用Spring配置声明暴露服务</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo</div><div class="line">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</div><div class="line">       </div><div class="line">	&lt;!--定义了提供方应用信息，用于计算依赖关系；在 dubbo-admin 或 dubbo-monitor 会显示这个名字，方便辨识 --&gt;</div><div class="line">	&lt;dubbo:application name=&quot;demotest-provider&quot; owner=&quot;programmer&quot;</div><div class="line">		organization=&quot;dubbox&quot; /&gt;</div><div class="line">	&lt;!--使用 zookeeper 注册中心暴露服务，注意要先开启 zookeeper --&gt;</div><div class="line">	&lt;dubbo:registry address=&quot;zookeeper://192.168.99.100:2181&quot; /&gt;</div><div class="line">	&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</div><div class="line">	&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;</div><div class="line">	&lt;!--使用 dubbo 协议实现定义好的 api.PermissionService 接口 --&gt;</div><div class="line">	&lt;dubbo:service interface=&quot;com.wyj.dubbo.demo.DemoService&quot;</div><div class="line">		ref=&quot;demoService&quot; protocol=&quot;dubbo&quot; /&gt;</div><div class="line">	&lt;!--具体实现该接口的 bean --&gt;</div><div class="line">	&lt;bean id=&quot;demoService&quot; class=&quot;com.wyj.dubbo.demo.provider.DemoServiceImpl&quot; /&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p> 启动远程服务：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo.provider;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 启动服务提供者</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午9:10:38</div><div class="line"> */</div><div class="line">public class Provider &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws IOException &#123;</div><div class="line">        </div><div class="line">        ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(&quot;dubbo-provider.xml&quot;);</div><div class="line">        System.out.println(classPathXmlApplicationContext.getDisplayName() + &quot;: here&quot;);</div><div class="line">        classPathXmlApplicationContext.start();</div><div class="line">        System.out.println(&quot;服务已经启动...&quot;);</div><div class="line">        System.in.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建dubbo-consumer的MAVEN项目(可以有多个consumer，但是需要配置好)。<br> 调用所需要的远程服务：</p>
<p> 通过Spring配置引用远程服务：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</div><div class="line">       </div><div class="line">	&lt;dubbo:application name=&quot;demotest-consumer&quot; owner=&quot;programmer&quot; organization=&quot;dubbox&quot; /&gt;</div><div class="line">		</div><div class="line">	&lt;!--向 zookeeper 订阅 provider 的地址，由 zookeeper 定时推送 --&gt;</div><div class="line">	&lt;dubbo:registry address=&quot;zookeeper://192.168.99.100:2181&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;!--使用 dubbo 协议调用定义好的 api.demoService 接口 --&gt;</div><div class="line">	&lt;dubbo:reference id=&quot;demoService&quot; interface=&quot;com.wyj.dubbo.demo.DemoService&quot; /&gt;</div><div class="line">		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p> 启动Consumer,调用远程服务：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.wyj.dubbo.demo.consumer;</div><div class="line"></div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.wyj.dubbo.demo.DemoService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 启动服务消费者</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月9日 下午10:00:33</div><div class="line"> */</div><div class="line">public class Consumer &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(&quot;dubbo-consumer.xml&quot;);</div><div class="line">        classPathXmlApplicationContext.start();</div><div class="line">        DemoService demoService = (DemoService) classPathXmlApplicationContext.getBean(&quot;demoService&quot;); </div><div class="line"></div><div class="line">        while (true) &#123;</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(1000);</div><div class="line">                String hello = demoService.sayHello(&quot;world&quot;); </div><div class="line">                System.out.println(hello); </div><div class="line"></div><div class="line">            &#125; catch (Throwable throwable) &#123;</div><div class="line">                throwable.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行项目，先确保provider已被运行后再启动consumer模块：<br> 运行提供者：<br> <img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/provider.png" alt="provider"></p>
<p> 消费者成功调用提供者所提供的远程服务：<br> <img src="/2018/01/10/Dubbo学习——Dubbo简单入门Demo-二/consumer.png" alt="consumer"></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文采用Dubbo与Zookeeper、Spring框架的整合。整个项目的代码已经上传到我的github &lt;a href=&quot;https://github.com/wangyuanjun008/wyj-dubbo-demo.git&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/categories/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="http://wangyuanjun.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>使用DaoCloud docker镜像加速器</title>
    <link href="http://wangyuanjun.cn/2018/01/10/%E4%BD%BF%E7%94%A8DaoCloud%20docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8/"/>
    <id>http://wangyuanjun.cn/2018/01/10/使用DaoCloud docker镜像加速器/</id>
    <published>2018-01-10T06:10:46.000Z</published>
    <updated>2018-01-21T11:04:36.494Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Docker 的时候，需要经常从官方获取镜像，但是由于显而易见的网络原因，拉取镜像的过程非常耗时，严重影响使用Docker的体验。由于国内访问直接访问dockerhub网速比较慢，拉取镜像的时间就会比较长，甚至下载失败。一般我们会使用镜像加速或者直接从国内的一些平台镜像仓库上拉取。<br>我之前准备用阿里云的加速器的，试了好长时间没有成功，于是改用DaoCloud，下面向大家介绍在windows环境下使用docker toolbox来配置镜像加速器。<br>在docker客户端执行如下命令</p>
<pre><code>docker-machine ssh default
sudo sed -i &quot;s|EXTRA_ARGS=&apos;|EXTRA_ARGS=&apos;--registry-mirror=加速地址 |g&quot; /var/lib/boot2docker/profile
exit
docker-machine restart default 
</code></pre><p>1.使用docker客户端连接名为default的虚拟机<br>2.配置DaoCloud加速器<br>3.退出虚拟机到docker客户端<br>4.名为default的虚拟机重启</p>
<p>如果你想在linux,MC上配置加速器，请参考<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">配置 Docker 加速器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Docker 的时候，需要经常从官方获取镜像，但是由于显而易见的网络原因，拉取镜像的过程非常耗时，严重影响使用Docker的体验。由于国内访问直接访问dockerhub网速比较慢，拉取镜像的时间就会比较长，甚至下载失败。一般我们会使用镜像加速或者直接从国内的一些平台镜
    
    </summary>
    
      <category term="docker" scheme="http://wangyuanjun.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://wangyuanjun.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Quartz学习——SSM和Quartz集成详解(四)</title>
    <link href="http://wangyuanjun.cn/2018/01/08/Quartz%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94SSM%E5%92%8CQuartz%E9%9B%86%E6%88%90%E8%AF%A6%E8%A7%A3-%E5%9B%9B/"/>
    <id>http://wangyuanjun.cn/2018/01/08/Quartz学习——SSM和Quartz集成详解-四/</id>
    <published>2018-01-08T07:31:45.000Z</published>
    <updated>2018-01-08T09:09:28.738Z</updated>
    
    <content type="html"><![CDATA[<p>下面介绍SSM+Quartz的示例，项目地址: <font color="red" size="5" face="微软雅黑"><a href="https://github.com/wangyuanjun008/wyj-quartz-ssm.git" target="_blank" rel="external">quartz-spring</a></font></p>
<h2 id="一：环境介绍"><a href="#一：环境介绍" class="headerlink" title="一：环境介绍"></a>一：环境介绍</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">工具：Spring Tool Suite + Mysql </div><div class="line">框架：Spring+SpringMVC+Mybatis</div><div class="line">前端: easy ui </div><div class="line">日志：logback </div><div class="line">构建工具：Maven </div><div class="line">Quartz版本：2.2.3</div></pre></td></tr></table></figure>
<h2 id="二：SSM-Quartz集成详解"><a href="#二：SSM-Quartz集成详解" class="headerlink" title="二：SSM+Quartz集成详解"></a>二：SSM+Quartz集成详解</h2><h3 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1.项目结构"></a>1.项目结构</h3><p><img src="/2018/01/08/Quartz学习——SSM和Quartz集成详解-四/结构项目.png" alt="结构项目"></p>
<h3 id="2-配置文件介绍"><a href="#2-配置文件介绍" class="headerlink" title="2.配置文件介绍"></a>2.配置文件介绍</h3><p>（1）：在ApplicationContext.xml中添加下面的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;bean name=&quot;quartzScheduler&quot;</div><div class="line">	class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;</div><div class="line">	&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;&lt;!-- 读取spring配置的数据库，不去加载quartz.properties --&gt;</div><div class="line">	&lt;property name=&quot;applicationContextSchedulerContextKey&quot; value=&quot;applicationContextKey&quot; /&gt;</div><div class="line">	&lt;property name=&quot;configLocation&quot; value=&quot;classpath:quartz.properties&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>（2）：添加quartz.properties配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># Default Properties file for use by StdSchedulerFactory  </div><div class="line"># to create a Quartz Scheduler Instance, if a different  </div><div class="line"># properties file is not explicitly specified.  </div><div class="line">#  </div><div class="line">  </div><div class="line"></div><div class="line">org.quartz.scheduler.instanceName: DefaultQuartzScheduler</div><div class="line">#org.quartz.scheduler.instanceId = AUTO</div><div class="line"> </div><div class="line">org.quartz.scheduler.rmi.export: false  </div><div class="line">org.quartz.scheduler.rmi.proxy: false  </div><div class="line">org.quartz.scheduler.wrapJobExecutionInUserTransaction: false  </div><div class="line">  </div><div class="line">org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool  </div><div class="line">org.quartz.threadPool.threadCount: 10  </div><div class="line">org.quartz.threadPool.threadPriority: 5  </div><div class="line">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true  </div><div class="line">  </div><div class="line">#持久化配置</div><div class="line">org.quartz.jobStore.misfireThreshold: 60000  </div><div class="line">org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX </div><div class="line">org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate  </div><div class="line">org.quartz.jobStore.useProperties:true  </div><div class="line">#指定前缀</div><div class="line">org.quartz.jobStore.tablePrefix: QRTZ_</div></pre></td></tr></table></figure></p>
<h3 id="3-核心代码"><a href="#3-核心代码" class="headerlink" title="3.核心代码"></a>3.核心代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div></pre></td><td class="code"><pre><div class="line">package com.wyj.controller;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Set;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import org.apache.commons.lang.StringUtils;</div><div class="line">import org.quartz.CronTrigger;</div><div class="line">import org.quartz.JobDataMap;</div><div class="line">import org.quartz.JobDetail;</div><div class="line">import org.quartz.JobKey;</div><div class="line">import org.quartz.Scheduler;</div><div class="line">import org.quartz.SchedulerException;</div><div class="line">import org.quartz.Trigger;</div><div class="line">import org.quartz.TriggerKey;</div><div class="line">import org.quartz.impl.matchers.GroupMatcher;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.RequestMethod;</div><div class="line">import org.springframework.web.bind.annotation.RequestParam;</div><div class="line">import org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line">import com.alibaba.fastjson.JSON;</div><div class="line">import com.wyj.entity.JobDto;</div><div class="line">import com.wyj.entity.Retval;</div><div class="line">import com.wyj.service.QuartzService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 定时任务 Controller</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月7日 下午10:15:33</div><div class="line"> */</div><div class="line"></div><div class="line">@Controller</div><div class="line">@RequestMapping(value = &quot;/quartz&quot;)</div><div class="line">public class QuartzController &#123;</div><div class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</div><div class="line">    @Autowired</div><div class="line">    private Scheduler quartzScheduler;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private QuartzService quartzService;</div><div class="line"></div><div class="line">    @RequestMapping(&quot;/index&quot;)</div><div class="line">    public String index() &#123;</div><div class="line">        return &quot;/quartz/list&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 定时列表页</div><div class="line">     * </div><div class="line">     * @return</div><div class="line">     * @throws SchedulerException</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/list&quot;)</div><div class="line">    public String listJob(HttpServletRequest request, HttpServletResponse response) throws SchedulerException &#123;</div><div class="line">        List&lt;JobDto&gt; jobInfos = this.getSchedulerJobInfo();</div><div class="line">        return JSON.toJSONString(jobInfos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 新建job</div><div class="line">     * </div><div class="line">     * @param jobDto</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/add&quot;)</div><div class="line">    public Retval save(JobDto jobDto) &#123;</div><div class="line">        Retval retval = Retval.newInstance();</div><div class="line">        try &#123;</div><div class="line">            quartzService.addJob(jobDto.getJobName(), jobDto.getJobGroupName(), jobDto.getTriggerName(), jobDto.getTriggerGroupName(), Class.forName(jobDto.getJobClass()), jobDto.getCronExpression());</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            logger.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return retval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 编辑job</div><div class="line">     * </div><div class="line">     * @param jobDto</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/edit&quot;, method = RequestMethod.POST)</div><div class="line">    public Retval edit(JobDto jobDto) &#123;</div><div class="line">        Retval retval = Retval.newInstance();</div><div class="line">        try &#123;</div><div class="line">            boolean result = quartzService.modifyJobTime(jobDto.getOldJobName(), jobDto.getOldJobGroupName(), jobDto.getOldTriggerName(), jobDto.getOldTriggerGroupName(), jobDto.getJobName(), jobDto.getJobGroupName(), jobDto.getTriggerName(), jobDto.getTriggerGroupName(), jobDto.getCronExpression());</div><div class="line">            if (result) &#123;</div><div class="line">                retval.put(&quot;message&quot;, &quot;修改任务成功!&quot;);</div><div class="line">            &#125; else &#123;</div><div class="line">                retval.put(&quot;message&quot;, &quot;修改任务失败!&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            logger.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return retval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 暂停job</div><div class="line">     * </div><div class="line">     * @param jobName</div><div class="line">     * @param jobGroupName</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/stopJob&quot;, method = RequestMethod.POST)</div><div class="line">    public Retval stopJob(@RequestParam(&quot;jobName&quot;) String jobName, @RequestParam(&quot;jobGroupName&quot;) String jobGroupName) &#123;</div><div class="line">        Retval retval = Retval.newInstance();</div><div class="line">        if (StringUtils.isEmpty(jobName) || StringUtils.isEmpty(jobGroupName)) &#123;</div><div class="line">            retval.fail();</div><div class="line">            retval.put(&quot;message&quot;, &quot;暂停失败&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            try &#123;</div><div class="line">                quartzService.pauseJob(jobName, jobGroupName);</div><div class="line">                retval.put(&quot;message&quot;, &quot;暂停成功&quot;);</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                logger.error(e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return retval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 恢复job</div><div class="line">     * </div><div class="line">     * @param jobName</div><div class="line">     * @param jobGroupName</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/resumeJob&quot;, method = RequestMethod.POST)</div><div class="line">    public Retval resumeJob(@RequestParam(&quot;jobName&quot;) String jobName, @RequestParam(&quot;jobGroupName&quot;) String jobGroupName) &#123;</div><div class="line">        Retval retval = Retval.newInstance();</div><div class="line">        if (StringUtils.isEmpty(jobName) || StringUtils.isEmpty(jobGroupName)) &#123;</div><div class="line">            retval.fail();</div><div class="line">            retval.put(&quot;message&quot;, &quot;恢复失败&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            try &#123;</div><div class="line">                quartzService.resumeJob(jobName, jobGroupName);</div><div class="line">                retval.put(&quot;message&quot;, &quot;恢复成功&quot;);</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                logger.error(e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return retval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除job</div><div class="line">     * </div><div class="line">     * @param jobName</div><div class="line">     * @param jobGroupName</div><div class="line">     * @param triggerName</div><div class="line">     * @param triggerGroupName</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @RequestMapping(value = &quot;/deleteJob&quot;, method = RequestMethod.POST)</div><div class="line">    @ResponseBody</div><div class="line">    public Retval deleteJob(@RequestParam(&quot;jobName&quot;) String jobName, @RequestParam(&quot;jobGroupName&quot;) String jobGroupName, @RequestParam(&quot;triggerName&quot;) String triggerName, @RequestParam(&quot;triggerGroupName&quot;) String triggerGroupName) &#123;</div><div class="line">        Retval retval = Retval.newInstance();</div><div class="line"></div><div class="line">        if (StringUtils.isEmpty(jobName) || StringUtils.isEmpty(jobGroupName) || StringUtils.isEmpty(triggerName) || StringUtils.isEmpty(triggerGroupName)) &#123;</div><div class="line">            retval.fail();</div><div class="line">            retval.put(&quot;message&quot;, &quot;删除失败&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            try &#123;</div><div class="line">                quartzService.removeJob(jobName, jobGroupName, triggerName, triggerGroupName);</div><div class="line">                retval.put(&quot;message&quot;, &quot;删除成功&quot;);</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                logger.error(e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return retval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private List&lt;JobDto&gt; getSchedulerJobInfo() throws SchedulerException &#123;</div><div class="line">        List&lt;JobDto&gt; jobInfos = new ArrayList&lt;JobDto&gt;();</div><div class="line">        List&lt;String&gt; triggerGroupNames = quartzScheduler.getTriggerGroupNames();</div><div class="line">        for (String triggerGroupName : triggerGroupNames) &#123;</div><div class="line">            Set&lt;TriggerKey&gt; triggerKeySet = quartzScheduler.getTriggerKeys(GroupMatcher.triggerGroupEquals(triggerGroupName));</div><div class="line">            for (TriggerKey triggerKey : triggerKeySet) &#123;</div><div class="line">                Trigger t = quartzScheduler.getTrigger(triggerKey);</div><div class="line">                if (t instanceof CronTrigger) &#123;</div><div class="line">                    CronTrigger trigger = (CronTrigger) t;</div><div class="line">                    JobKey jobKey = trigger.getJobKey();</div><div class="line">                    JobDetail jd = quartzScheduler.getJobDetail(jobKey);</div><div class="line">                    JobDto jobInfo = new JobDto();</div><div class="line">                    jobInfo.setJobName(jobKey.getName());</div><div class="line">                    jobInfo.setJobGroupName(jobKey.getGroup());</div><div class="line">                    jobInfo.setTriggerName(triggerKey.getName());</div><div class="line">                    jobInfo.setTriggerGroupName(triggerKey.getGroup());</div><div class="line">                    jobInfo.setCronExpression(trigger.getCronExpression());</div><div class="line">                    jobInfo.setNextFireTime(trigger.getNextFireTime());</div><div class="line">                    jobInfo.setPreviousFireTime(trigger.getPreviousFireTime());</div><div class="line">                    jobInfo.setStartTime(trigger.getStartTime());</div><div class="line">                    jobInfo.setEndTime(trigger.getEndTime());</div><div class="line">                    jobInfo.setJobClass(jd.getJobClass().getCanonicalName());</div><div class="line">                    // jobInfo.setDuration(Long.parseLong(jd.getDescription()));</div><div class="line">                    Trigger.TriggerState triggerState = quartzScheduler.getTriggerState(trigger.getKey());</div><div class="line">                    jobInfo.setJobStatus(triggerState.toString());// NONE无,</div><div class="line">                                                                  // NORMAL正常,</div><div class="line">                                                                  // PAUSED暂停,</div><div class="line">                                                                  // COMPLETE完全,</div><div class="line">                                                                  // ERROR错误,</div><div class="line">                                                                  // BLOCKED阻塞</div><div class="line">                    JobDataMap map = quartzScheduler.getJobDetail(jobKey).getJobDataMap();</div><div class="line">                    if (null != map &amp;&amp; map.size() != 0) &#123;</div><div class="line">                        jobInfo.setCount(Long.valueOf((String) map.get(&quot;count&quot;)));</div><div class="line">                        jobInfo.setJobDataMap(map);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        jobInfo.setJobDataMap(new JobDataMap());</div><div class="line">                    &#125;</div><div class="line">                    jobInfos.add(jobInfo);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return jobInfos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-job"><a href="#4-job" class="headerlink" title="4.job"></a>4.job</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.wyj.job;</div><div class="line"></div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">import org.quartz.Job;</div><div class="line">import org.quartz.JobExecutionContext;</div><div class="line">import org.quartz.JobExecutionException;</div><div class="line">/**</div><div class="line"> * Job任务</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2018年1月5日 下午10:22:42</div><div class="line"> */</div><div class="line">public class HelloWorldJob implements Job &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void execute(JobExecutionContext context) throws JobExecutionException &#123;</div><div class="line">        System.out.println(&quot;----hello world---&quot; + new Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="三：运行效果介绍"><a href="#三：运行效果介绍" class="headerlink" title="三：运行效果介绍"></a>三：运行效果介绍</h2><p><img src="/2018/01/08/Quartz学习——SSM和Quartz集成详解-四/编辑页面.png" alt="编辑页面"><br><img src="/2018/01/08/Quartz学习——SSM和Quartz集成详解-四/控制台.png" alt="控制台"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面介绍SSM+Quartz的示例，项目地址: &lt;font color=&quot;red&quot; size=&quot;5&quot; face=&quot;微软雅黑&quot;&gt;&lt;a href=&quot;https://github.com/wangyuanjun008/wyj-quartz-ssm.git&quot; target=&quot;_bl
    
    </summary>
    
      <category term="quartz" scheme="http://wangyuanjun.cn/categories/quartz/"/>
    
    
      <category term="quartz" scheme="http://wangyuanjun.cn/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>Quartz学习——Spring和Quartz集成详解(三)</title>
    <link href="http://wangyuanjun.cn/2018/01/08/Quartz%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Spring%E5%92%8CQuartz%E9%9B%86%E6%88%90%E8%AF%A6%E8%A7%A3-%E4%B8%89/"/>
    <id>http://wangyuanjun.cn/2018/01/08/Quartz学习——Spring和Quartz集成详解-三/</id>
    <published>2018-01-08T06:46:30.000Z</published>
    <updated>2018-01-08T09:09:22.610Z</updated>
    
    <content type="html"><![CDATA[<p>下面介绍Spring集成Quartz的示例，项目地址: <font color="red" size="5" face="微软雅黑"><a href="https://github.com/wangyuanjun008/wyj-quartz-spring.git" target="_blank" rel="external">quartz-spring</a></font><br>介绍Spring和Quartz集成存储方式使用的是RAM方式和JDBC方式！ </p>
<h2 id="jar包依赖"><a href="#jar包依赖" class="headerlink" title="jar包依赖"></a>jar包依赖</h2><pre><code>&lt;properties&gt;
    &lt;!-- 项目构建源码编码方式 --&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;!-- 主要依赖库的版本定义 --&gt;
    &lt;!-- spring版本号 --&gt;
    &lt;spring.version&gt;4.0.2.RELEASE&lt;/spring.version&gt;
    &lt;!-- 日志文件管理包版本 --&gt;
    &lt;slf4j.version&gt;1.7.7&lt;/slf4j.version&gt;
    &lt;junit.version&gt;4.11&lt;/junit.version&gt;
    &lt;jackson.version&gt;2.4.0&lt;/jackson.version&gt;
    &lt;mysql.version&gt;5.1.30&lt;/mysql.version&gt;
    &lt;quartz.version&gt;2.2.3&lt;/quartz.version&gt;
    &lt;fastjson.version&gt;1.1.41&lt;/fastjson.version&gt;

&lt;/properties&gt;


&lt;dependencies&gt;

    &lt;!-- spring核心包 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- 导入java ee jar 包 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax&lt;/groupId&gt;
        &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;
        &lt;version&gt;7.0&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;!-- JSTL标签类 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
        &lt;artifactId&gt;jstl&lt;/artifactId&gt;
        &lt;version&gt;1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- 日志文件管理包 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
        &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
        &lt;version&gt;1.1.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.logback-extensions&lt;/groupId&gt;
        &lt;artifactId&gt;logback-ext-spring&lt;/artifactId&gt;
        &lt;version&gt;0.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- 代码直接调用commons-logging会被桥接到slf4j --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
        &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;
        &lt;version&gt;1.7.12&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- 代码直接调用java.util.logging会被桥接到slf4j --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
        &lt;artifactId&gt;jul-to-slf4j&lt;/artifactId&gt;
        &lt;version&gt;1.7.12&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- 格式化对象，方便输出日志 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
        &lt;version&gt;${fastjson.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;${junit.version}&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;!-- 导入Mysql数据库链接jar包 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;${mysql.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- velocity --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.7&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity-tools&lt;/artifactId&gt;
        &lt;version&gt;2.0&lt;/version&gt;
    &lt;/dependency&gt;


    &lt;!-- JSON begin --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;
        &lt;version&gt;${jackson.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
        &lt;version&gt;${jackson.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;
        &lt;artifactId&gt;jackson-module-jaxb-annotations&lt;/artifactId&gt;
        &lt;version&gt;${jackson.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- freemarker --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.freemarker&lt;/groupId&gt;
        &lt;artifactId&gt;freemarker&lt;/artifactId&gt;
        &lt;version&gt;2.3.27-incubating&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
        &lt;artifactId&gt;quartz&lt;/artifactId&gt;
        &lt;version&gt;${quartz.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
        &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;
        &lt;version&gt;${quartz.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre><h2 id="配置文件spring-quartz-xml"><a href="#配置文件spring-quartz-xml" class="headerlink" title="配置文件spring-quartz.xml"></a>配置文件spring-quartz.xml</h2><h3 id="RAM存储方式的xml配置文件"><a href="#RAM存储方式的xml配置文件" class="headerlink" title="RAM存储方式的xml配置文件"></a>RAM存储方式的xml配置文件</h3><p>（1）：配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</div><div class="line">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- ====================================RAM版============================================== --&gt;</div><div class="line">	&lt;!-- </div><div class="line">		Spring整合Quartz进行配置遵循下面的步骤：</div><div class="line">		1：定义工作任务的Job</div><div class="line">		2：定义触发器Trigger，并将触发器与工作任务绑定</div><div class="line">		3：定义调度器，并将Trigger注册到Scheduler</div><div class="line">	 --&gt;</div><div class="line">	&lt;!-- 1：定义任务的bean ，这里使用JobDetailFactoryBean,也可以使用MethodInvokingJobDetailFactoryBean ，配置类似--&gt;</div><div class="line">	&lt;bean name=&quot;hwJob&quot; class=&quot;org.springframework.scheduling.quartz.JobDetailFactoryBean&quot;&gt;</div><div class="line">		&lt;!-- 指定job的名称 --&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;hw_job&quot;/&gt;</div><div class="line">		&lt;!-- 指定job的分组 --&gt;</div><div class="line">		&lt;property name=&quot;group&quot; value=&quot;hw_group&quot;/&gt;</div><div class="line">		&lt;!-- 指定具体的job类 --&gt;</div><div class="line">		&lt;property name=&quot;jobClass&quot; value=&quot;com.wyj.exampleRAM.RAMJob&quot;/&gt;</div><div class="line">		&lt;!-- 必须设置为true，如果为false，当没有活动的触发器与之关联时会在调度器中会删除该任务  --&gt;</div><div class="line">		&lt;property name=&quot;durability&quot; value=&quot;true&quot;/&gt;</div><div class="line">		&lt;!-- 指定spring容器的key，如果不设定在job中的jobmap中是获取不到spring容器的 --&gt;</div><div class="line">		&lt;property name=&quot;applicationContextJobDataKey&quot; value=&quot;applicationContext&quot;/&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- 2.1：定义触发器的bean，定义一个Simple的Trigger，一个触发器只能和一个任务进行绑定 --&gt;</div><div class="line">	&lt;!-- &lt;bean name=&quot;simpleTrigger&quot; class=&quot;org.springframework.scheduling.quartz.SimpleTriggerFactoryBean&quot;&gt;</div><div class="line">		指定Trigger的名称</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;hw_trigger&quot;/&gt;</div><div class="line">		指定Trigger的名称</div><div class="line">		&lt;property name=&quot;group&quot; value=&quot;hw_trigger_group&quot;/&gt;</div><div class="line">		指定Tirgger绑定的Job</div><div class="line">		&lt;property name=&quot;jobDetail&quot; ref=&quot;hwJob&quot;/&gt;</div><div class="line">		指定Trigger的延迟时间 1s后运行</div><div class="line">		&lt;property name=&quot;startDelay&quot; value=&quot;1000&quot;/&gt;</div><div class="line">		指定Trigger的重复间隔  5s</div><div class="line">		&lt;property name=&quot;repeatInterval&quot; value=&quot;5000&quot;/&gt;</div><div class="line">		指定Trigger的重复次数</div><div class="line">		&lt;property name=&quot;repeatCount&quot; value=&quot;5&quot;/&gt;</div><div class="line">	&lt;/bean&gt; --&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 2.2：定义触发器的bean，定义一个Cron的Trigger，一个触发器只能和一个任务进行绑定 --&gt;</div><div class="line">	&lt;bean id=&quot;cronTrigger&quot; class=&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;&gt;</div><div class="line">		&lt;!-- 指定Trigger的名称 --&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;hw_trigger&quot;/&gt;</div><div class="line">		&lt;!-- 指定Trigger的名称 --&gt;</div><div class="line">		&lt;property name=&quot;group&quot; value=&quot;hw_trigger_group&quot;/&gt;</div><div class="line">		&lt;!-- 指定Tirgger绑定的Job --&gt;</div><div class="line">		&lt;property name=&quot;jobDetail&quot; ref=&quot;hwJob&quot;/&gt;</div><div class="line">		&lt;!-- 指定Cron 的表达式 ，当前是每隔1s运行一次 --&gt;</div><div class="line">		&lt;property name=&quot;cronExpression&quot; value=&quot;0/1 * * * * ?&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	</div><div class="line">	&lt;!-- 3.定义调度器，并将Trigger注册到调度器中--&gt;</div><div class="line">	&lt;bean name=&quot;scheduler&quot; class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;</div><div class="line">		&lt;property name=&quot;triggers&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">&lt;!--  				&lt;ref bean=&quot;simpleTrigger&quot;/&gt;   --&gt;</div><div class="line">				&lt;ref bean=&quot;cronTrigger&quot;/&gt; </div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>（2）：运行结果<br>CronScheduleBuilder：<br><img src="/2018/01/08/Quartz学习——Spring和Quartz集成详解-三/RAMTest.png" alt="RAMTest"></p>
<h3 id="JDBC存储方式的xml配置文件"><a href="#JDBC存储方式的xml配置文件" class="headerlink" title="JDBC存储方式的xml配置文件"></a>JDBC存储方式的xml配置文件</h3><p>（1）：配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</div><div class="line">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&gt;</div><div class="line">	</div><div class="line">	&lt;!-- ====================================JDBC版============================================== --&gt;</div><div class="line">	&lt;!-- </div><div class="line">		持久化数据配置，需要添加quartz.properties</div><div class="line">	 --&gt;</div><div class="line"> 	&lt;bean name=&quot;scheduler&quot; class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt; </div><div class="line">        &lt;property name=&quot;applicationContextSchedulerContextKey&quot; value=&quot;applicationContextKey&quot;/&gt; </div><div class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:quartz.properties&quot;/&gt;	</div><div class="line">	&lt;/bean&gt; </div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>（2）：quartz.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># Default Properties file for use by StdSchedulerFactory  </div><div class="line"># to create a Quartz Scheduler Instance, if a different  </div><div class="line"># properties file is not explicitly specified.  </div><div class="line">#  </div><div class="line">  </div><div class="line">#org.quartz.scheduler.instanceName: DefaultQuartzScheduler </div><div class="line"></div><div class="line">org.quartz.scheduler.instanceName: DefaultQuartzScheduler</div><div class="line">#org.quartz.scheduler.instanceId = AUTO</div><div class="line"> </div><div class="line">org.quartz.scheduler.rmi.export: false  </div><div class="line">org.quartz.scheduler.rmi.proxy: false  </div><div class="line">org.quartz.scheduler.wrapJobExecutionInUserTransaction: false  </div><div class="line">  </div><div class="line">org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool  </div><div class="line">org.quartz.threadPool.threadCount: 10  </div><div class="line">org.quartz.threadPool.threadPriority: 5  </div><div class="line">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true  </div><div class="line">  </div><div class="line">#创建数据源</div><div class="line">org.quartz.jobStore.misfireThreshold: 60000  </div><div class="line">#JDBC连接方式</div><div class="line">org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX </div><div class="line">#JDBC代理类 </div><div class="line">org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate  </div><div class="line">org.quartz.jobStore.useProperties:true  </div><div class="line">#指定前缀</div><div class="line">org.quartz.jobStore.tablePrefix: QRTZ_</div><div class="line">#数据源名称</div><div class="line">org.quartz.jobStore.dataSource: qzDS  </div><div class="line">#配置数据源属性  </div><div class="line">org.quartz.dataSource.qzDS.driver:com.mysql.jdbc.Driver</div><div class="line">org.quartz.dataSource.qzDS.URL:jdbc:mysql://192.168.99.100:3306/quartz_test?useUnicode=true&amp;characterEncoding=utf-8</div><div class="line">org.quartz.dataSource.qzDS.user:root</div><div class="line">org.quartz.dataSource.qzDS.password:admin</div><div class="line">org.quartz.dataSource.qzDS.maxConnections:10</div></pre></td></tr></table></figure></p>
<p>（3）：job<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.wyj.exampleJDBC;</div><div class="line"></div><div class="line">import java.text.SimpleDateFormat;</div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">import org.quartz.Job;</div><div class="line">import org.quartz.JobExecutionContext;</div><div class="line">import org.quartz.JobExecutionException;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">/**</div><div class="line"> * JdbcJob</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2017年12月29日 下午10:05:18</div><div class="line"> */</div><div class="line">public class JdbcJob implements Job&#123;</div><div class="line"></div><div class="line">	private Logger logger = LoggerFactory.getLogger(JdbcJob.class);</div><div class="line"></div><div class="line">	public void execute(JobExecutionContext arg0) throws JobExecutionException &#123;</div><div class="line"></div><div class="line">		logger.debug(&quot;MyJDBCJob is start ...&quot;);</div><div class="line">		</div><div class="line">		logger.debug(&quot;MyJDBCJob quzrtz &quot;+new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss &quot;).format(new Date()));</div><div class="line">		</div><div class="line">		logger.debug(&quot;MyJDBCJob is end ...&quot;);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>（4）：jobTest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">package com.wyj.exampleJDBC;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.quartz.CronScheduleBuilder;</div><div class="line">import org.quartz.CronTrigger;</div><div class="line">import org.quartz.JobBuilder;</div><div class="line">import org.quartz.JobDetail;</div><div class="line">import org.quartz.JobKey;</div><div class="line">import org.quartz.Scheduler;</div><div class="line">import org.quartz.SchedulerException;</div><div class="line">import org.quartz.SchedulerFactory;</div><div class="line">import org.quartz.SimpleScheduleBuilder;</div><div class="line">import org.quartz.SimpleTrigger;</div><div class="line">import org.quartz.Trigger;</div><div class="line">import org.quartz.TriggerBuilder;</div><div class="line">import org.quartz.impl.StdScheduler;</div><div class="line">import org.quartz.impl.StdSchedulerFactory;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line">/**</div><div class="line"> * JdbcJobtest</div><div class="line"> * </div><div class="line"> * </div><div class="line"> * @author：WangYuanJun</div><div class="line"> * @date：2017年12月29日 下午10:05:26</div><div class="line"> */</div><div class="line">public class QuartzJdbcTest &#123;</div><div class="line">    private static Scheduler scheduler;</div><div class="line">    </div><div class="line">    </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;spring-quartz.xml&quot;);</div><div class="line">        scheduler = (StdScheduler)ac.getBean(&quot;scheduler&quot;);</div><div class="line"></div><div class="line">        testStartSchedule();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     *  开始一个simpleSchedule()调度</div><div class="line">     */</div><div class="line">	public static void testStartSchedule()&#123;</div><div class="line">		</div><div class="line">		try &#123;</div><div class="line">			// 1、创建一个JobDetail实例，指定Quartz</div><div class="line">			JobDetail jobDetail = JobBuilder.newJob(JdbcJob.class)</div><div class="line">					// 任务执行类</div><div class="line">					.withIdentity(&quot;job_1&quot;, &quot;jGroup1&quot;)// 任务名，任务组</div><div class="line">					.build();</div><div class="line">			//触发器类型</div><div class="line">			//SimpleScheduleBuilder builder = SimpleScheduleBuilder.simpleSchedule().repeatSecondlyForTotalCount(5); // 设置执行次数</div><div class="line">					</div><div class="line">		    CronScheduleBuilder builder = CronScheduleBuilder.cronSchedule(&quot;0/2 * * * * ?&quot;);</div><div class="line">		    //  2、创建Trigger</div><div class="line">			</div><div class="line">			Trigger trigger = TriggerBuilder.newTrigger()</div><div class="line">					.withIdentity(&quot;trigger_1&quot;,&quot;triggerGroup1&quot;)</div><div class="line">					.withSchedule(builder)</div><div class="line">					.build();</div><div class="line">			</div><div class="line">			// 3、创建Scheduler</div><div class="line">			Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</div><div class="line">			scheduler.start();</div><div class="line">			</div><div class="line">			// 4、调度执行</div><div class="line">			scheduler.scheduleJob(jobDetail,trigger);</div><div class="line">			</div><div class="line">			try &#123;</div><div class="line">				Thread.sleep(60000);</div><div class="line">			&#125; catch (Exception e) &#123;</div><div class="line">			    e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			//关闭调度器</div><div class="line">			scheduler.shutdown();</div><div class="line">			</div><div class="line">			</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">		    e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * 从数据库中找到已经存在的job，并重新开户调度</div><div class="line">	 */</div><div class="line">	public static void resumeJob()&#123;</div><div class="line">		try &#123;</div><div class="line">			SchedulerFactory schedulerFactory = new StdSchedulerFactory();</div><div class="line">			Scheduler scheduler = schedulerFactory.getScheduler();</div><div class="line">			JobKey jobKey = new JobKey(&quot;job1_1&quot;, &quot;jGroup1&quot;);</div><div class="line">			List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</div><div class="line">            //SELECT TRIGGER_NAME, TRIGGER_GROUP FROM &#123;0&#125;TRIGGERS WHERE SCHED_NAME = &#123;1&#125; AND JOB_NAME = ? AND JOB_GROUP = ?</div><div class="line">            // 重新恢复在jGroup1组中，名为job1_1的 job的触发器运行</div><div class="line">            if(triggers.size() &gt; 0)&#123;</div><div class="line">                for (Trigger tg : triggers) &#123;</div><div class="line">                    // 根据类型判断</div><div class="line">                    if ((tg instanceof CronTrigger) || (tg instanceof SimpleTrigger)) &#123;</div><div class="line">                        // 恢复job运行</div><div class="line">                        scheduler.resumeJob(jobKey);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                scheduler.start();</div><div class="line">            &#125;</div><div class="line">			</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">		    e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br>CronScheduleBuilder：<br><img src="/2018/01/08/Quartz学习——Spring和Quartz集成详解-三/jdbcTest.png" alt="jdbcTest"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面介绍Spring集成Quartz的示例，项目地址: &lt;font color=&quot;red&quot; size=&quot;5&quot; face=&quot;微软雅黑&quot;&gt;&lt;a href=&quot;https://github.com/wangyuanjun008/wyj-quartz-spring.git&quot; targ
    
    </summary>
    
      <category term="quartz" scheme="http://wangyuanjun.cn/categories/quartz/"/>
    
    
      <category term="quartz" scheme="http://wangyuanjun.cn/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>Quartz学习——Quartz简单入门Demo(二)</title>
    <link href="http://wangyuanjun.cn/2018/01/03/Quartz%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Quartz%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8Demo-%E4%BA%8C/"/>
    <id>http://wangyuanjun.cn/2018/01/03/Quartz学习——Quartz简单入门Demo-二/</id>
    <published>2018-01-03T07:50:18.000Z</published>
    <updated>2018-01-08T09:09:39.895Z</updated>
    
    <content type="html"><![CDATA[<p>下面介绍Quartz入门的示例，项目地址: <font color="red" size="5" face="微软雅黑"><a href="https://github.com/wangyuanjun008/wyj-quartz-demo" target="_blank" rel="external">quartz-demo</a></font><br>由于Quartz的存储方式分为RAM和JDBC，分别对这两种进行简单的说明。并附上代码！<br>首先需要添加Quartz的依赖 ，我使用的是quartz.2.2.3版本！ </p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
    &lt;artifactId&gt;quartz&lt;/artifactId&gt;
    &lt;version&gt;2.2.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
    &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;
    &lt;version&gt;2.2.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><h2 id="RAM方式"><a href="#RAM方式" class="headerlink" title="RAM方式"></a>RAM方式</h2><p>要测试RAMdemo的代码，请先删除demo中这个quartz.properties文件，或者重命名！否则会测试不成功！<br>（1）：Job</p>
<pre><code>package com.wyj.exampleRAM;

import java.util.Date;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * RAMjob
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:03:31
 */
public class RAMJob implements Job{

    private Logger logger = LoggerFactory.getLogger(RAMJob.class);

    public void execute(JobExecutionContext arg0) throws JobExecutionException {
        logger.debug(&quot;hello world ! hello Quartz - &quot;+new Date());
    }

}
</code></pre><p>（2）：JobTest</p>
<pre><code>package com.wyj.exampleRAM;

import java.util.Date;

import org.quartz.CronScheduleBuilder;
import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * RAMtest
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:03:50
 */
public class RAMQuartzTest {

    private static Logger logger = LoggerFactory.getLogger(RAMJob.class);

    public static void main(String[] args) throws SchedulerException {
        //1.创建Scheduler的工厂
        SchedulerFactory sf = new StdSchedulerFactory();

        //2.从工厂中获取调度器实例
        Scheduler scheduler = sf.getScheduler();

        //3.创建JobDetail
        JobDetail jb = JobBuilder.newJob(RAMJob.class)
                .withDescription(&quot;this is hello job&quot;)//job的描述
                .withIdentity(&quot;helloJob&quot;, &quot;helloGroup&quot;)//job 的name和group
                .build();

         //任务运行的时间，SimpleSchedle类型触发器有效
        long time=  System.currentTimeMillis() + 3*1000L; //3秒后启动任务
        Date statTime = new Date(time);
        //4.创建Trigger
        //使用SimpleScheduleBuilder或者CronScheduleBuilder
        Trigger trigger = TriggerBuilder.newTrigger()
                            .withDescription(&quot;&quot;)
                            .withIdentity(&quot;helloTrigger&quot;, &quot;helloTriggerGroup&quot;)
                            .startAt(statTime)//默认当前时间启动
                            .withSchedule(CronScheduleBuilder.cronSchedule(&quot;0/2 * * * * ?&quot;))//两秒执行一次
                            .build();

        //5.注册任务和定时器
        scheduler.scheduleJob(jb, trigger);

        //6.启动 调度器
        scheduler.start();
        logger.debug(&quot;启动时间 ：&quot;+new Date());
    }
}
</code></pre><p>运行结果：<br>SimpleScheduleBuilder：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/SimpleRAMTest.png" alt="SimpleRAMTest"></p>
<p>CronScheduleBuilder：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/CronRAMTest.png" alt="CronRAMTest"></p>
<h2 id="JDBC方式"><a href="#JDBC方式" class="headerlink" title="JDBC方式"></a>JDBC方式</h2><p>使用jdbc方式，就要配置quartz.properties文件，并且在开始的时候在数据库中新增表！<br>我使用的数据库是mysql，数据库中表在wyj-quartz-demo项目里面有，需要的请在里面下载！<br>运行 tables_mysql.sql 这个文件。</p>
<pre><code>#配置数据源属性  
org.quartz.dataSource.qzDS.driver:com.mysql.jdbc.Driver
org.quartz.dataSource.qzDS.URL:jdbc:mysql://192.168.99.100:3306/quartz_test?useUnicode=true&amp;characterEncoding=utf-8
org.quartz.dataSource.qzDS.user:root
org.quartz.dataSource.qzDS.password:admin
org.quartz.dataSource.qzDS.maxConnections:10
</code></pre><p>（1）job</p>
<pre><code>package com.wyj.exampleJDBC;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * JdbcJob
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:04:03
 */
public class JdbcJob implements Job{

    private Logger logger = LoggerFactory.getLogger(JdbcJob.class);

    public void execute(JobExecutionContext arg0) throws JobExecutionException {

        logger.debug(&quot;MyJDBCJob is start ...&quot;);

        logger.debug(&quot;MyJDBCJob quzrtz &quot;+new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss &quot;).format(new Date()));

        logger.debug(&quot;MyJDBCJob is end ...&quot;);
    }
}
</code></pre><p>（2）jobTest</p>
<pre><code>package com.wyj.exampleJDBC;

import java.util.List;

import org.quartz.CronScheduleBuilder;
import org.quartz.CronTrigger;
import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.JobKey;
import org.quartz.Scheduler;
import org.quartz.SchedulerFactory;
import org.quartz.SimpleTrigger;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;
/**
 * JdbcJobtest
 * 
 * 
 * @author：WangYuanJun
 * @date：2017年12月28日 下午10:04:14
 */
public class QuartzJdbcTest {

    public static void main(String[] args) {
        testStartSchedule();
//        resumeJob();
    }


    /**
     *  开始一个simpleSchedule()调度
     */
    public static void testStartSchedule(){

        try {
            // 1、创建一个JobDetail实例，指定Quartz
            JobDetail jobDetail = JobBuilder.newJob(JdbcJob.class)
                    // 任务执行类
                    .withIdentity(&quot;job_1&quot;, &quot;jGroup1&quot;)// 任务名，任务组
                    .build();
            //触发器类型
//            SimpleScheduleBuilder builder = SimpleScheduleBuilder.simpleSchedule().repeatSecondlyForTotalCount(5); // 设置执行次数

            CronScheduleBuilder builder = CronScheduleBuilder.cronSchedule(&quot;0/2 * * * * ?&quot;);
            //  2、创建Trigger

            Trigger trigger = TriggerBuilder.newTrigger()
                    .withIdentity(&quot;trigger_1&quot;,&quot;triggerGroup1&quot;)
                    .withSchedule(builder)
                    .build();

            // 3、创建Scheduler
            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();
            scheduler.start();

            // 4、调度执行
            scheduler.scheduleJob(jobDetail,trigger);

            try {
                Thread.sleep(60000);
            } catch (Exception e) {
                e.printStackTrace();
            }

            //关闭调度器
            scheduler.shutdown();


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 从数据库中找到已经存在的job，并重新开户调度
     */
    public static void resumeJob(){
        try {
            SchedulerFactory schedulerFactory = new StdSchedulerFactory();
            Scheduler scheduler = schedulerFactory.getScheduler();
            JobKey jobKey = new JobKey(&quot;job1_1&quot;, &quot;jGroup1&quot;);
            List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);
            //SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?
            // 重新恢复在jGroup1组中，名为job1_1的 job的触发器运行
            if(triggers.size() &gt; 0){
                for (Trigger tg : triggers) {
                    // 根据类型判断
                    if ((tg instanceof CronTrigger) || (tg instanceof SimpleTrigger)) {
                        // 恢复job运行
                        scheduler.resumeJob(jobKey);
                    }
                }
                scheduler.start();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre><p>运行结果：<br>数据库信息：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/jdbcTest1.png" alt="jdbcTest1"></p>
<p>控制台信息：<br><img src="/2018/01/03/Quartz学习——Quartz简单入门Demo-二/jdbcTest2.png" alt="jdbcTest2"></p>
<p><strong>注意</strong>:<font color="red">Cron和Simple类型，Simple类型的如果JobDetail没有设置.storeDurably(true)，则job在运行完成之后会在数据库中删除！</font></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面介绍Quartz入门的示例，项目地址: &lt;font color=&quot;red&quot; size=&quot;5&quot; face=&quot;微软雅黑&quot;&gt;&lt;a href=&quot;https://github.com/wangyuanjun008/wyj-quartz-demo&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="quartz" scheme="http://wangyuanjun.cn/categories/quartz/"/>
    
    
      <category term="quartz" scheme="http://wangyuanjun.cn/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>Docker之创建并进入mysql容器</title>
    <link href="http://wangyuanjun.cn/2018/01/03/Docker%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%BF%9B%E5%85%A5mysql%E5%AE%B9%E5%99%A8/"/>
    <id>http://wangyuanjun.cn/2018/01/03/Docker之创建并进入mysql容器/</id>
    <published>2018-01-03T02:11:52.000Z</published>
    <updated>2018-01-03T02:39:59.678Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍docker如何创建并进入MYSQL容器。</p>
<h2 id="运行”docker-pull-mysql”获取mysql镜像"><a href="#运行”docker-pull-mysql”获取mysql镜像" class="headerlink" title="运行”docker pull mysql”获取mysql镜像"></a>运行”docker pull mysql”获取mysql镜像</h2><pre><code>[root@localhost ~]# docker pull mysql  
Using default tag: latest  
latest: Pulling from library/mysql  
85b1f47fba49: Pull complete   
5671503d4f93: Pull complete   
3b43b3b913cb: Pull complete   
4fbb803665d0: Pull complete   
05808866e6f9: Pull complete   
1d8c65d48cfa: Pull complete   
e189e187b2b5: Pull complete   
02d3e6011ee8: Pull complete   
d43b32d5ce04: Pull complete   
2a809168ab45: Pull complete   
Digest: sha256:1a2f9361228e9b10b4c77a651b460828514845dc7ac51735b919c2c4aec864b7  
Status: Downloaded newer image for mysql:latest  
</code></pre><h2 id="在后台启动mysql容器-–name指定了容器的名称，方便之后进入容器的命令行，MYSQL-ROOT-PASSWORD-admin指定了mysql的root密码，-d表示在后台运行"><a href="#在后台启动mysql容器-–name指定了容器的名称，方便之后进入容器的命令行，MYSQL-ROOT-PASSWORD-admin指定了mysql的root密码，-d表示在后台运行" class="headerlink" title="在后台启动mysql容器(–name指定了容器的名称，方便之后进入容器的命令行，MYSQL_ROOT_PASSWORD=admin指定了mysql的root密码，-d表示在后台运行)"></a>在后台启动mysql容器(–name指定了容器的名称，方便之后进入容器的命令行，MYSQL_ROOT_PASSWORD=admin指定了mysql的root密码，-d表示在后台运行)</h2><pre><code>Administrator@SKY-20170607FIJ MINGW64 ~
$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=admin -d mysql
c6215e8c1fd73bc395a0c92e93f7e7145baedbe99c7ff639ccc9f5641bddf583
</code></pre><h2 id="进入容器bash并进入mysql命令行："><a href="#进入容器bash并进入mysql命令行：" class="headerlink" title="进入容器bash并进入mysql命令行："></a>进入容器bash并进入mysql命令行：</h2><pre><code>Administrator@SKY-20170607FIJ MINGW64 ~
$ docker exec -it mysql bash
root@c6215e8c1fd7:/# mysql -uroot -padmin
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 5
Server version: 5.7.20 MySQL Community Server (GPL)

Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)

mysql&gt;
</code></pre><h2 id="退出mysql镜像"><a href="#退出mysql镜像" class="headerlink" title="退出mysql镜像"></a>退出mysql镜像</h2><p>输入</p>
<pre><code>exit
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍docker如何创建并进入MYSQL容器。&lt;/p&gt;
&lt;h2 id=&quot;运行”docker-pull-mysql”获取mysql镜像&quot;&gt;&lt;a href=&quot;#运行”docker-pull-mysql”获取mysql镜像&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="docker" scheme="http://wangyuanjun.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://wangyuanjun.cn/tags/docker/"/>
    
  </entry>
  
</feed>
